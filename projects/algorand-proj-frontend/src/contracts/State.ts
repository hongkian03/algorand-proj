/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"State","structs":{"Input":[{"name":"name","type":"string"},{"name":"age","type":"uint64"}],"Output":[{"name":"message","type":"string"},{"name":"result","type":"uint64"}]},"methods":[{"name":"create_abi","args":[{"type":"string","name":"input"}],"returns":{"type":"string"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"update_abi","args":[{"type":"string","name":"input"}],"returns":{"type":"string"},"actions":{"create":[],"call":["UpdateApplication"]},"readonly":false,"events":[],"recommendations":{}},{"name":"delete_abi","args":[{"type":"string","name":"input"}],"returns":{"type":"string"},"actions":{"create":[],"call":["DeleteApplication"]},"readonly":false,"events":[],"recommendations":{}},{"name":"opt_in","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["OptIn"]},"readonly":false,"events":[],"recommendations":{}},{"name":"error","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"call_abi","args":[{"type":"string","name":"value"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"call_abi_txn","args":[{"type":"pay","name":"txn"},{"type":"string","name":"value"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"call_with_references","args":[{"type":"asset","name":"asset"},{"type":"account","name":"account"},{"type":"application","name":"application"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"default_value","args":[{"type":"string","name":"arg_with_default","defaultValue":{"source":"literal","data":"AA1kZWZhdWx0IHZhbHVl","type":"string"}}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"default_value_int","args":[{"type":"uint64","name":"arg_with_default","defaultValue":{"source":"literal","data":"AAAAAAAAAHs=","type":"uint64"}}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"default_value_from_abi","args":[{"type":"string","name":"arg_with_default","defaultValue":{"source":"literal","data":"AA1kZWZhdWx0IHZhbHVl","type":"string"}}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"default_value_from_global_state","args":[{"type":"uint64","name":"arg_with_default","defaultValue":{"source":"global","data":"aW50MQ==","type":"AVMString"}}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"default_value_from_local_state","args":[{"type":"string","name":"arg_with_default","defaultValue":{"source":"local","data":"bG9jYWxfYnl0ZXMx","type":"AVMString"}}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"structs","args":[{"type":"(string,uint64)","struct":"Input","name":"name_age"}],"returns":{"type":"(string,uint64)","struct":"Output"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"set_global","args":[{"type":"uint64","name":"int1"},{"type":"uint64","name":"int2"},{"type":"string","name":"bytes1"},{"type":"byte[4]","name":"bytes2"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"set_local","args":[{"type":"uint64","name":"int1"},{"type":"uint64","name":"int2"},{"type":"string","name":"bytes1"},{"type":"byte[4]","name":"bytes2"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"set_box","args":[{"type":"byte[4]","name":"name"},{"type":"string","name":"value"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":3,"bytes":3},"local":{"ints":2,"bytes":3}},"keys":{"global":{"value":{"keyType":"AVMString","valueType":"AVMUint64","key":"dmFsdWU="},"bytes1":{"keyType":"AVMString","valueType":"AVMBytes","key":"Ynl0ZXMx"},"bytes2":{"keyType":"AVMString","valueType":"AVMBytes","key":"Ynl0ZXMy"},"bytesNotInSnakeCase":{"keyType":"AVMString","valueType":"AVMBytes","key":"Ynl0ZXNOb3RJblNuYWtlQ2FzZQ=="},"int1":{"keyType":"AVMString","valueType":"AVMUint64","key":"aW50MQ=="},"int2":{"keyType":"AVMString","valueType":"AVMUint64","key":"aW50Mg=="}},"local":{"local_bytes1":{"keyType":"AVMString","valueType":"AVMBytes","key":"bG9jYWxfYnl0ZXMx"},"local_bytes2":{"keyType":"AVMString","valueType":"AVMBytes","key":"bG9jYWxfYnl0ZXMy"},"localBytesNotInSnakeCase":{"keyType":"AVMString","valueType":"AVMBytes","key":"bG9jYWxCeXRlc05vdEluU25ha2VDYXNl"},"local_int1":{"keyType":"AVMString","valueType":"AVMUint64","key":"bG9jYWxfaW50MQ=="},"local_int2":{"keyType":"AVMString","valueType":"AVMUint64","key":"bG9jYWxfaW50Mg=="}},"box":{"boxNotInSnakeCase":{"keyType":"AVMBytes","valueType":"string","key":"YQ=="}}},"maps":{"global":{},"local":{},"box":{"box":{"keyType":"byte[4]","valueType":"string","prefix":""},"boxMapNotInSnakeCase":{"keyType":"byte[4]","valueType":"string","prefix":"Yg=="}}}},"bareActions":{"create":["NoOp","OptIn"],"call":["DeleteApplication","UpdateApplication"]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[620,927],"errorMessage":"Check app is deletable"},{"pc":[609,918],"errorMessage":"Check app is updatable"},{"pc":[426],"errorMessage":"Deliberate error"},{"pc":[764],"errorMessage":"Index access is out of bounds"},{"pc":[442],"errorMessage":"OnCompletion is not DeleteApplication"},{"pc":[136,154,183,212,231,253,268,287,302,317,352,392,422,504],"errorMessage":"OnCompletion is not NoOp"},{"pc":[431],"errorMessage":"OnCompletion is not OptIn"},{"pc":[474],"errorMessage":"OnCompletion is not UpdateApplication"},{"pc":[671],"errorMessage":"account not provided"},{"pc":[674],"errorMessage":"application not provided"},{"pc":[665],"errorMessage":"asset not provided"},{"pc":[508,570],"errorMessage":"can only call when creating"},{"pc":[139,157,186,215,234,256,271,290,305,320,355,395,425,434,445,477,553,561],"errorMessage":"can only call when not creating"},{"pc":[365],"errorMessage":"transaction type is pay"},{"pc":[940],"errorMessage":"unauthorized"}],"pcOffsetMethod":"cblocks"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAFAQAAAAAmAwQVH3x1B0hlbGxvLCAAMRtBAg+CEQSdUjBABDylzrcEJxtO6QQwxtWKBETQ2g0E8X6ApQQKkqgeBP798R4EV0tVyAQ2A2LpBEbSEaMEDPy7AATQ8Lr4BCRr64MEpM+N6gTOwoNKBKS0ojA2GgCOEQFyAVIBMgEoASABAgDaALcAqACZAIYAdwBhAE4AMQAUAAIjQzEZFEQxGEQ2GgE2GgKIAvAiQzEZFEQxGEQ2GgEXNhoCFzYaA1cCADYaBIgChyJDMRkURDEYRDYaARc2GgIXNhoDVwIANhoEiAI+IkMxGRREMRhENhoBiAH/KExQsCJDMRkURDEYRDYaAVcCAIgByyhMULAiQzEZFEQxGEQoNhoBULAiQzEZFEQxGEQ2GgGIAY8oTFCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhENhoBF8AwNhoCF8AcNhoDF8AyiAE+FihMULAiQzEZFEQxGEQxFiIJSTgQIhJENhoBVwIAiAEBSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIAiADbSRUWVwYCTFAoTFCwIkMxGRREMRhEADEZIhJEMRhEIkMxGYEFEkQxGEQ2GgFXAgCIAJ5JFRZXBgJMUChMULAiQzEZgQQSRDEYRDYaAVcCAIgAc0kVFlcGAkxQKExQsCJDMRkURDEYFEQ2GgFXAgCIAEtJFRZXBgJMUChMULAiQzEZjQYAEwAT/l/+XwALAANC/lwxGESIAW4iQzEYRIgBXSJDMRgURIgAAiJDigAAiAFegAV2YWx1ZSEEZ4mKAQGIAU2L/4mKAQGIAUQkRIv/iYoBAYgBOSVEi/+JigEBKYv/UImKAgGL/jgIiAEsgAVTZW50IExQgAIuIFCL/1CJigMBi/1Ei/4yAxNEi/9EIomKAQGL/1cCAIAFQUJJLCBMUEkVFlcGAkxQiYoBAYANTG9jYWwgc3RhdGUsIIv/UEkVFlcGAkxQiYoBAYv/I1mL/xWL/04CUlcCAClMUEkVFlcGAkxQi/9XAggXgQILFoACAApMUExQiYoEAIAEaW50MYv8Z4AEaW50Mov9Z4AGYnl0ZXMxi/5ngAZieXRlczKL/2eJigQAMQCACmxvY2FsX2ludDGL/GYxAIAKbG9jYWxfaW50Mov9ZjEAgAxsb2NhbF9ieXRlczGL/mYxAIAMbG9jYWxfYnl0ZXMyi/9miYoCAIv+vEiL/ov/v4mKAAAkRIgAComKAAAlRIgAAYmKAAAxADIJEkSJigEBKov/QAAFgAEwTImL/4EKCkmMAEEAHIsAiP/ii/+BChiACjAxMjM0NTY3ODlMIlhQTIkqQv/l","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":3,"patch":3}},"events":[],"templateVariables":{"UPDATABLE":{"type":"AVMUint64"},"DELETABLE":{"type":"AVMUint64"},"VALUE":{"type":"AVMUint64"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Input = {
  name: string,
  age: bigint
}


/**
 * Converts the ABI tuple representation of a Input to the struct representation
 */
export function InputFromTuple(abiTuple: [string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Input, APP_SPEC.structs) as Input
}

export type Output = {
  message: string,
  result: bigint
}


/**
 * Converts the ABI tuple representation of a Output to the struct representation
 */
export function OutputFromTuple(abiTuple: [string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Output, APP_SPEC.structs) as Output
}

/**
 * Deploy-time template variables
 */
export type TemplateVariables = {
  UPDATABLE: bigint,
  DELETABLE: bigint,
  VALUE: bigint,
}

/**
 * The argument types for the State contract
 */
export type StateArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_abi(string)string': {
      input: string
    }
    'update_abi(string)string': {
      input: string
    }
    'delete_abi(string)string': {
      input: string
    }
    'opt_in()void': Record<string, never>
    'error()void': Record<string, never>
    'call_abi(string)string': {
      value: string
    }
    'call_abi_txn(pay,string)string': {
      txn: AppMethodCallTransactionArgument
      value: string
    }
    'call_with_references(asset,account,application)uint64': {
      asset: bigint
      account: Uint8Array | string
      application: bigint
    }
    'default_value(string)string': {
      argWithDefault?: string
    }
    'default_value_int(uint64)uint64': {
      argWithDefault?: bigint | number
    }
    'default_value_from_abi(string)string': {
      argWithDefault?: string
    }
    'default_value_from_global_state(uint64)uint64': {
      argWithDefault?: bigint | number
    }
    'default_value_from_local_state(string)string': {
      argWithDefault?: string
    }
    'structs((string,uint64))(string,uint64)': {
      nameAge: Input
    }
    'set_global(uint64,uint64,string,byte[4])void': {
      int1: bigint | number
      int2: bigint | number
      bytes1: string
      bytes2: Uint8Array
    }
    'set_local(uint64,uint64,string,byte[4])void': {
      int1: bigint | number
      int2: bigint | number
      bytes1: string
      bytes2: Uint8Array
    }
    'set_box(byte[4],string)void': {
      name: Uint8Array
      value: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_abi(string)string': [input: string]
    'update_abi(string)string': [input: string]
    'delete_abi(string)string': [input: string]
    'opt_in()void': []
    'error()void': []
    'call_abi(string)string': [value: string]
    'call_abi_txn(pay,string)string': [txn: AppMethodCallTransactionArgument, value: string]
    'call_with_references(asset,account,application)uint64': [asset: bigint, account: Uint8Array | string, application: bigint]
    'default_value(string)string': [argWithDefault: string | undefined]
    'default_value_int(uint64)uint64': [argWithDefault: bigint | number | undefined]
    'default_value_from_abi(string)string': [argWithDefault: string | undefined]
    'default_value_from_global_state(uint64)uint64': [argWithDefault: bigint | number | undefined]
    'default_value_from_local_state(string)string': [argWithDefault: string | undefined]
    'structs((string,uint64))(string,uint64)': [nameAge: Input]
    'set_global(uint64,uint64,string,byte[4])void': [int1: bigint | number, int2: bigint | number, bytes1: string, bytes2: Uint8Array]
    'set_local(uint64,uint64,string,byte[4])void': [int1: bigint | number, int2: bigint | number, bytes1: string, bytes2: Uint8Array]
    'set_box(byte[4],string)void': [name: Uint8Array, value: string]
  }
}

/**
 * The return type for each method
 */
export type StateReturns = {
  'create_abi(string)string': string
  'update_abi(string)string': string
  'delete_abi(string)string': string
  'opt_in()void': void
  'error()void': void
  'call_abi(string)string': string
  'call_abi_txn(pay,string)string': string
  'call_with_references(asset,account,application)uint64': bigint
  'default_value(string)string': string
  'default_value_int(uint64)uint64': bigint
  'default_value_from_abi(string)string': string
  'default_value_from_global_state(uint64)uint64': bigint
  'default_value_from_local_state(string)string': string
  'structs((string,uint64))(string,uint64)': Output
  'set_global(uint64,uint64,string,byte[4])void': void
  'set_local(uint64,uint64,string,byte[4])void': void
  'set_box(byte[4],string)void': void
}

/**
 * Defines the types of available calls and state of the State smart contract.
 */
export type StateTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_abi(string)string' | 'create_abi', {
      argsObj: StateArgs['obj']['create_abi(string)string']
      argsTuple: StateArgs['tuple']['create_abi(string)string']
      returns: StateReturns['create_abi(string)string']
    }>
    & Record<'update_abi(string)string' | 'update_abi', {
      argsObj: StateArgs['obj']['update_abi(string)string']
      argsTuple: StateArgs['tuple']['update_abi(string)string']
      returns: StateReturns['update_abi(string)string']
    }>
    & Record<'delete_abi(string)string' | 'delete_abi', {
      argsObj: StateArgs['obj']['delete_abi(string)string']
      argsTuple: StateArgs['tuple']['delete_abi(string)string']
      returns: StateReturns['delete_abi(string)string']
    }>
    & Record<'opt_in()void' | 'opt_in', {
      argsObj: StateArgs['obj']['opt_in()void']
      argsTuple: StateArgs['tuple']['opt_in()void']
      returns: StateReturns['opt_in()void']
    }>
    & Record<'error()void' | 'error', {
      argsObj: StateArgs['obj']['error()void']
      argsTuple: StateArgs['tuple']['error()void']
      returns: StateReturns['error()void']
    }>
    & Record<'call_abi(string)string' | 'call_abi', {
      argsObj: StateArgs['obj']['call_abi(string)string']
      argsTuple: StateArgs['tuple']['call_abi(string)string']
      returns: StateReturns['call_abi(string)string']
    }>
    & Record<'call_abi_txn(pay,string)string' | 'call_abi_txn', {
      argsObj: StateArgs['obj']['call_abi_txn(pay,string)string']
      argsTuple: StateArgs['tuple']['call_abi_txn(pay,string)string']
      returns: StateReturns['call_abi_txn(pay,string)string']
    }>
    & Record<'call_with_references(asset,account,application)uint64' | 'call_with_references', {
      argsObj: StateArgs['obj']['call_with_references(asset,account,application)uint64']
      argsTuple: StateArgs['tuple']['call_with_references(asset,account,application)uint64']
      returns: StateReturns['call_with_references(asset,account,application)uint64']
    }>
    & Record<'default_value(string)string' | 'default_value', {
      argsObj: StateArgs['obj']['default_value(string)string']
      argsTuple: StateArgs['tuple']['default_value(string)string']
      returns: StateReturns['default_value(string)string']
    }>
    & Record<'default_value_int(uint64)uint64' | 'default_value_int', {
      argsObj: StateArgs['obj']['default_value_int(uint64)uint64']
      argsTuple: StateArgs['tuple']['default_value_int(uint64)uint64']
      returns: StateReturns['default_value_int(uint64)uint64']
    }>
    & Record<'default_value_from_abi(string)string' | 'default_value_from_abi', {
      argsObj: StateArgs['obj']['default_value_from_abi(string)string']
      argsTuple: StateArgs['tuple']['default_value_from_abi(string)string']
      returns: StateReturns['default_value_from_abi(string)string']
    }>
    & Record<'default_value_from_global_state(uint64)uint64' | 'default_value_from_global_state', {
      argsObj: StateArgs['obj']['default_value_from_global_state(uint64)uint64']
      argsTuple: StateArgs['tuple']['default_value_from_global_state(uint64)uint64']
      returns: StateReturns['default_value_from_global_state(uint64)uint64']
    }>
    & Record<'default_value_from_local_state(string)string' | 'default_value_from_local_state', {
      argsObj: StateArgs['obj']['default_value_from_local_state(string)string']
      argsTuple: StateArgs['tuple']['default_value_from_local_state(string)string']
      returns: StateReturns['default_value_from_local_state(string)string']
    }>
    & Record<'structs((string,uint64))(string,uint64)' | 'structs', {
      argsObj: StateArgs['obj']['structs((string,uint64))(string,uint64)']
      argsTuple: StateArgs['tuple']['structs((string,uint64))(string,uint64)']
      returns: StateReturns['structs((string,uint64))(string,uint64)']
    }>
    & Record<'set_global(uint64,uint64,string,byte[4])void' | 'set_global', {
      argsObj: StateArgs['obj']['set_global(uint64,uint64,string,byte[4])void']
      argsTuple: StateArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']
      returns: StateReturns['set_global(uint64,uint64,string,byte[4])void']
    }>
    & Record<'set_local(uint64,uint64,string,byte[4])void' | 'set_local', {
      argsObj: StateArgs['obj']['set_local(uint64,uint64,string,byte[4])void']
      argsTuple: StateArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']
      returns: StateReturns['set_local(uint64,uint64,string,byte[4])void']
    }>
    & Record<'set_box(byte[4],string)void' | 'set_box', {
      argsObj: StateArgs['obj']['set_box(byte[4],string)void']
      argsTuple: StateArgs['tuple']['set_box(byte[4],string)void']
      returns: StateReturns['set_box(byte[4],string)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        value: bigint
        bytes1: BinaryState
        bytes2: BinaryState
        bytesNotInSnakeCase: BinaryState
        int1: bigint
        int2: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        localBytes1: BinaryState
        localBytes2: BinaryState
        localBytesNotInSnakeCase: BinaryState
        localInt1: bigint
        localInt2: bigint
      }
      maps: {}
    }
    box: {
      keys: {
        boxNotInSnakeCase: string
      }
      maps: {
        box: Map<Uint8Array, string>
        boxMapNotInSnakeCase: Map<Uint8Array, string>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type StateSignatures = keyof StateTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type StateNonVoidMethodSignatures = keyof StateTypes['methods'] extends infer T ? T extends keyof StateTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the State smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends StateSignatures> = StateTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the State smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StateSignatures> = StateTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = StateTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = StateTypes['state']['local']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = StateTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type StateCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC} & CreateSchema>
  | Expand<CallParams<StateArgs['obj']['create_abi(string)string'] | StateArgs['tuple']['create_abi(string)string']> & {method: 'create_abi'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<StateArgs['obj']['create_abi(string)string'] | StateArgs['tuple']['create_abi(string)string']> & {method: 'create_abi(string)string'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type StateUpdateCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
  | Expand<CallParams<StateArgs['obj']['update_abi(string)string'] | StateArgs['tuple']['update_abi(string)string']> & {method: 'update_abi'}>
  | Expand<CallParams<StateArgs['obj']['update_abi(string)string'] | StateArgs['tuple']['update_abi(string)string']> & {method: 'update_abi(string)string'}>
/**
 * Defines supported delete method params for this smart contract
 */
export type StateDeleteCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
  | Expand<CallParams<StateArgs['obj']['delete_abi(string)string'] | StateArgs['tuple']['delete_abi(string)string']> & {method: 'delete_abi'}>
  | Expand<CallParams<StateArgs['obj']['delete_abi(string)string'] | StateArgs['tuple']['delete_abi(string)string']> & {method: 'delete_abi(string)string'}>
/**
 * Defines arguments required for the deploy method.
 */
export type StateDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: StateCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: StateUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: StateDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the State smart contract
 */
export abstract class StateParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends StateCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_abi':
          case 'create_abi(string)string':
            return StateParamsFactory.create.createAbi(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the State smart contract using the create_abi(string)string ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createAbi(params: CallParams<StateArgs['obj']['create_abi(string)string'] | StateArgs['tuple']['create_abi(string)string']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_abi(string)string' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.input],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends StateUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'update_abi':
          case 'update_abi(string)string':
            return StateParamsFactory.update.updateAbi(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the State smart contract using the update_abi(string)string ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateAbi(params: CallParams<StateArgs['obj']['update_abi(string)string'] | StateArgs['tuple']['update_abi(string)string']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'update_abi(string)string' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.input],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends StateDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'delete_abi':
          case 'delete_abi(string)string':
            return StateParamsFactory.delete.deleteAbi(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the State smart contract using the delete_abi(string)string ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteAbi(params: CallParams<StateArgs['obj']['delete_abi(string)string'] | StateArgs['tuple']['delete_abi(string)string']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete_abi(string)string' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.input],
        }
      },
    }
  }

  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the State smart contract using the opt_in()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optIn(params: CallParams<StateArgs['obj']['opt_in()void'] | StateArgs['tuple']['opt_in()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'opt_in()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the error()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static error(params: CallParams<StateArgs['obj']['error()void'] | StateArgs['tuple']['error()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'error()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the call_abi(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callAbi(params: CallParams<StateArgs['obj']['call_abi(string)string'] | StateArgs['tuple']['call_abi(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_abi(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.value],
    }
  }
  /**
   * Constructs a no op call for the call_abi_txn(pay,string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callAbiTxn(params: CallParams<StateArgs['obj']['call_abi_txn(pay,string)string'] | StateArgs['tuple']['call_abi_txn(pay,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_abi_txn(pay,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txn, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the call_with_references(asset,account,application)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callWithReferences(params: CallParams<StateArgs['obj']['call_with_references(asset,account,application)uint64'] | StateArgs['tuple']['call_with_references(asset,account,application)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_with_references(asset,account,application)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.account, params.args.application],
    }
  }
  /**
   * Constructs a no op call for the default_value(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static defaultValue(params: CallParams<StateArgs['obj']['default_value(string)string'] | StateArgs['tuple']['default_value(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'default_value(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.argWithDefault],
    }
  }
  /**
   * Constructs a no op call for the default_value_int(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static defaultValueInt(params: CallParams<StateArgs['obj']['default_value_int(uint64)uint64'] | StateArgs['tuple']['default_value_int(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'default_value_int(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.argWithDefault],
    }
  }
  /**
   * Constructs a no op call for the default_value_from_abi(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static defaultValueFromAbi(params: CallParams<StateArgs['obj']['default_value_from_abi(string)string'] | StateArgs['tuple']['default_value_from_abi(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'default_value_from_abi(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.argWithDefault],
    }
  }
  /**
   * Constructs a no op call for the default_value_from_global_state(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static defaultValueFromGlobalState(params: CallParams<StateArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateArgs['tuple']['default_value_from_global_state(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'default_value_from_global_state(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.argWithDefault],
    }
  }
  /**
   * Constructs a no op call for the default_value_from_local_state(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static defaultValueFromLocalState(params: CallParams<StateArgs['obj']['default_value_from_local_state(string)string'] | StateArgs['tuple']['default_value_from_local_state(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'default_value_from_local_state(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.argWithDefault],
    }
  }
  /**
   * Constructs a no op call for the structs((string,uint64))(string,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static structs(params: CallParams<StateArgs['obj']['structs((string,uint64))(string,uint64)'] | StateArgs['tuple']['structs((string,uint64))(string,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'structs((string,uint64))(string,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.nameAge],
    }
  }
  /**
   * Constructs a no op call for the set_global(uint64,uint64,string,byte[4])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setGlobal(params: CallParams<StateArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_global(uint64,uint64,string,byte[4])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.int1, params.args.int2, params.args.bytes1, params.args.bytes2],
    }
  }
  /**
   * Constructs a no op call for the set_local(uint64,uint64,string,byte[4])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setLocal(params: CallParams<StateArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_local(uint64,uint64,string,byte[4])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.int1, params.args.int2, params.args.bytes1, params.args.bytes2],
    }
  }
  /**
   * Constructs a no op call for the set_box(byte[4],string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBox(params: CallParams<StateArgs['obj']['set_box(byte[4],string)void'] | StateArgs['tuple']['set_box(byte[4],string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_box(byte[4],string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.value],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the State smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class StateFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `StateFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new StateClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new StateClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the State smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: StateDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? StateParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (StateCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? StateParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (StateUpdateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? StateParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (StateDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new StateClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the State smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
      /**
       * Creates a new instance of the State smart contract using the create_abi(string)string ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createAbi: (params: CallParams<StateArgs['obj']['create_abi(string)string'] | StateArgs['tuple']['create_abi(string)string']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(StateParamsFactory.create.createAbi(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the State smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployUpdate call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appFactory.params.bare.deployUpdate(params)
      },
      /**
       * Updates an existing instance of the State smart contract using the update_abi(string)string ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateAbi: (params: CallParams<StateArgs['obj']['update_abi(string)string'] | StateArgs['tuple']['update_abi(string)string']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(StateParamsFactory.update.updateAbi(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the State smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployDelete call
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appFactory.params.bare.deployDelete(params)
      },
      /**
       * Deletes an existing instance of the State smart contract using the delete_abi(string)string ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteAbi: (params: CallParams<StateArgs['obj']['delete_abi(string)string'] | StateArgs['tuple']['delete_abi(string)string']>) => {
        return this.appFactory.params.deployDelete(StateParamsFactory.delete.deleteAbi(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the State smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
      /**
       * Creates a new instance of the State smart contract using the create_abi(string)string ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createAbi: (params: CallParams<StateArgs['obj']['create_abi(string)string'] | StateArgs['tuple']['create_abi(string)string']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(StateParamsFactory.create.createAbi(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the State smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC | OnApplicationComplete.OptInOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new StateClient(result.appClient) }
      },
      /**
       * Creates a new instance of the State smart contract using an ABI method call using the create_abi(string)string ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createAbi: async (params: CallParams<StateArgs['obj']['create_abi(string)string'] | StateArgs['tuple']['create_abi(string)string']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(StateParamsFactory.create.createAbi(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | StateReturns['create_abi(string)string']) }, appClient: new StateClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the State smart contract
 */
export class StateClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `StateClient`
   *
   * @param appClient An `AppClient` instance which has been created with the State app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `StateClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends StateNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `StateClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<StateClient> {
    return new StateClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `StateClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<StateClient> {
    return new StateClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the State smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.params.bare.update(params)
      },
      /**
       * Updates an existing instance of the State smart contract using the `update_abi(string)string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateAbi: (params: CallParams<StateArgs['obj']['update_abi(string)string'] | StateArgs['tuple']['update_abi(string)string']> & AppClientCompilationParams) => {
        return this.appClient.params.update(StateParamsFactory.update.updateAbi(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the State smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.delete(params)
      },
      /**
       * Deletes an existing instance of the State smart contract using the `delete_abi(string)string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteAbi: (params: CallParams<StateArgs['obj']['delete_abi(string)string'] | StateArgs['tuple']['delete_abi(string)string']>) => {
        return this.appClient.params.delete(StateParamsFactory.delete.deleteAbi(params))
      },

    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the State smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optIn: (params: CallParams<StateArgs['obj']['opt_in()void'] | StateArgs['tuple']['opt_in()void']> = {args: []}) => {
        return this.appClient.params.optIn(StateParamsFactory.optIn.optIn(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the State smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the State smart contract using the `error()void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    error: (params: CallParams<StateArgs['obj']['error()void'] | StateArgs['tuple']['error()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StateParamsFactory.error(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callAbi: (params: CallParams<StateArgs['obj']['call_abi(string)string'] | StateArgs['tuple']['call_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.callAbi(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_txn(pay,string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callAbiTxn: (params: CallParams<StateArgs['obj']['call_abi_txn(pay,string)string'] | StateArgs['tuple']['call_abi_txn(pay,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.callAbiTxn(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_with_references(asset,account,application)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callWithReferences: (params: CallParams<StateArgs['obj']['call_with_references(asset,account,application)uint64'] | StateArgs['tuple']['call_with_references(asset,account,application)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.callWithReferences(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    defaultValue: (params: CallParams<StateArgs['obj']['default_value(string)string'] | StateArgs['tuple']['default_value(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.params.call(StateParamsFactory.defaultValue(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_int(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    defaultValueInt: (params: CallParams<StateArgs['obj']['default_value_int(uint64)uint64'] | StateArgs['tuple']['default_value_int(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.params.call(StateParamsFactory.defaultValueInt(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    defaultValueFromAbi: (params: CallParams<StateArgs['obj']['default_value_from_abi(string)string'] | StateArgs['tuple']['default_value_from_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.params.call(StateParamsFactory.defaultValueFromAbi(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_global_state(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    defaultValueFromGlobalState: (params: CallParams<StateArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateArgs['tuple']['default_value_from_global_state(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.params.call(StateParamsFactory.defaultValueFromGlobalState(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_local_state(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    defaultValueFromLocalState: (params: CallParams<StateArgs['obj']['default_value_from_local_state(string)string'] | StateArgs['tuple']['default_value_from_local_state(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.params.call(StateParamsFactory.defaultValueFromLocalState(params))
    },

    /**
     * Makes a call to the State smart contract using the `structs((string,uint64))(string,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    structs: (params: CallParams<StateArgs['obj']['structs((string,uint64))(string,uint64)'] | StateArgs['tuple']['structs((string,uint64))(string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.structs(params))
    },

    /**
     * Makes a call to the State smart contract using the `set_global(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setGlobal: (params: CallParams<StateArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.setGlobal(params))
    },

    /**
     * Makes a call to the State smart contract using the `set_local(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setLocal: (params: CallParams<StateArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.setLocal(params))
    },

    /**
     * Makes a call to the State smart contract using the `set_box(byte[4],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBox: (params: CallParams<StateArgs['obj']['set_box(byte[4],string)void'] | StateArgs['tuple']['set_box(byte[4],string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StateParamsFactory.setBox(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the State smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.createTransaction.bare.update(params)
      },
      /**
       * Updates an existing instance of the State smart contract using the `update_abi(string)string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateAbi: (params: CallParams<StateArgs['obj']['update_abi(string)string'] | StateArgs['tuple']['update_abi(string)string']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(StateParamsFactory.update.updateAbi(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the State smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.delete(params)
      },
      /**
       * Deletes an existing instance of the State smart contract using the `delete_abi(string)string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteAbi: (params: CallParams<StateArgs['obj']['delete_abi(string)string'] | StateArgs['tuple']['delete_abi(string)string']>) => {
        return this.appClient.createTransaction.delete(StateParamsFactory.delete.deleteAbi(params))
      },

    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the State smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optIn: (params: CallParams<StateArgs['obj']['opt_in()void'] | StateArgs['tuple']['opt_in()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(StateParamsFactory.optIn.optIn(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the State smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the State smart contract using the `error()void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    error: (params: CallParams<StateArgs['obj']['error()void'] | StateArgs['tuple']['error()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.error(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callAbi: (params: CallParams<StateArgs['obj']['call_abi(string)string'] | StateArgs['tuple']['call_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.callAbi(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_txn(pay,string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callAbiTxn: (params: CallParams<StateArgs['obj']['call_abi_txn(pay,string)string'] | StateArgs['tuple']['call_abi_txn(pay,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.callAbiTxn(params))
    },

    /**
     * Makes a call to the State smart contract using the `call_with_references(asset,account,application)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callWithReferences: (params: CallParams<StateArgs['obj']['call_with_references(asset,account,application)uint64'] | StateArgs['tuple']['call_with_references(asset,account,application)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.callWithReferences(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    defaultValue: (params: CallParams<StateArgs['obj']['default_value(string)string'] | StateArgs['tuple']['default_value(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.defaultValue(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_int(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    defaultValueInt: (params: CallParams<StateArgs['obj']['default_value_int(uint64)uint64'] | StateArgs['tuple']['default_value_int(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.defaultValueInt(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    defaultValueFromAbi: (params: CallParams<StateArgs['obj']['default_value_from_abi(string)string'] | StateArgs['tuple']['default_value_from_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.defaultValueFromAbi(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_global_state(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    defaultValueFromGlobalState: (params: CallParams<StateArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateArgs['tuple']['default_value_from_global_state(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.defaultValueFromGlobalState(params))
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_local_state(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    defaultValueFromLocalState: (params: CallParams<StateArgs['obj']['default_value_from_local_state(string)string'] | StateArgs['tuple']['default_value_from_local_state(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.defaultValueFromLocalState(params))
    },

    /**
     * Makes a call to the State smart contract using the `structs((string,uint64))(string,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    structs: (params: CallParams<StateArgs['obj']['structs((string,uint64))(string,uint64)'] | StateArgs['tuple']['structs((string,uint64))(string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.structs(params))
    },

    /**
     * Makes a call to the State smart contract using the `set_global(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setGlobal: (params: CallParams<StateArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.setGlobal(params))
    },

    /**
     * Makes a call to the State smart contract using the `set_local(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setLocal: (params: CallParams<StateArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.setLocal(params))
    },

    /**
     * Makes a call to the State smart contract using the `set_box(byte[4],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBox: (params: CallParams<StateArgs['obj']['set_box(byte[4],string)void'] | StateArgs['tuple']['set_box(byte[4],string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StateParamsFactory.setBox(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the State smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & SendParams>) => {
        return this.appClient.send.bare.update(params)
      },
      /**
       * Updates an existing instance of the State smart contract using the `update_abi(string)string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateAbi: async (params: CallParams<StateArgs['obj']['update_abi(string)string'] | StateArgs['tuple']['update_abi(string)string']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(StateParamsFactory.update.updateAbi(params))
        return {...result, return: result.return as unknown as (undefined | StateReturns['update_abi(string)string'])}
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the State smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.delete(params)
      },
      /**
       * Deletes an existing instance of the State smart contract using the `delete_abi(string)string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteAbi: async (params: CallParams<StateArgs['obj']['delete_abi(string)string'] | StateArgs['tuple']['delete_abi(string)string']> & SendParams) => {
        const result = await this.appClient.send.delete(StateParamsFactory.delete.deleteAbi(params))
        return {...result, return: result.return as unknown as (undefined | StateReturns['delete_abi(string)string'])}
      },

    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the State smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optIn: async (params: CallParams<StateArgs['obj']['opt_in()void'] | StateArgs['tuple']['opt_in()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(StateParamsFactory.optIn.optIn(params))
        return {...result, return: result.return as unknown as (undefined | StateReturns['opt_in()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the State smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the State smart contract using the `error()void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    error: async (params: CallParams<StateArgs['obj']['error()void'] | StateArgs['tuple']['error()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StateParamsFactory.error(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['error()void'])}
    },

    /**
     * Makes a call to the State smart contract using the `call_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callAbi: async (params: CallParams<StateArgs['obj']['call_abi(string)string'] | StateArgs['tuple']['call_abi(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.callAbi(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['call_abi(string)string'])}
    },

    /**
     * Makes a call to the State smart contract using the `call_abi_txn(pay,string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callAbiTxn: async (params: CallParams<StateArgs['obj']['call_abi_txn(pay,string)string'] | StateArgs['tuple']['call_abi_txn(pay,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.callAbiTxn(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['call_abi_txn(pay,string)string'])}
    },

    /**
     * Makes a call to the State smart contract using the `call_with_references(asset,account,application)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callWithReferences: async (params: CallParams<StateArgs['obj']['call_with_references(asset,account,application)uint64'] | StateArgs['tuple']['call_with_references(asset,account,application)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.callWithReferences(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['call_with_references(asset,account,application)uint64'])}
    },

    /**
     * Makes a call to the State smart contract using the `default_value(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    defaultValue: async (params: CallParams<StateArgs['obj']['default_value(string)string'] | StateArgs['tuple']['default_value(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      const result = await this.appClient.send.call(StateParamsFactory.defaultValue(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['default_value(string)string'])}
    },

    /**
     * Makes a call to the State smart contract using the `default_value_int(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    defaultValueInt: async (params: CallParams<StateArgs['obj']['default_value_int(uint64)uint64'] | StateArgs['tuple']['default_value_int(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      const result = await this.appClient.send.call(StateParamsFactory.defaultValueInt(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['default_value_int(uint64)uint64'])}
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_abi(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    defaultValueFromAbi: async (params: CallParams<StateArgs['obj']['default_value_from_abi(string)string'] | StateArgs['tuple']['default_value_from_abi(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      const result = await this.appClient.send.call(StateParamsFactory.defaultValueFromAbi(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['default_value_from_abi(string)string'])}
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_global_state(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    defaultValueFromGlobalState: async (params: CallParams<StateArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateArgs['tuple']['default_value_from_global_state(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      const result = await this.appClient.send.call(StateParamsFactory.defaultValueFromGlobalState(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['default_value_from_global_state(uint64)uint64'])}
    },

    /**
     * Makes a call to the State smart contract using the `default_value_from_local_state(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    defaultValueFromLocalState: async (params: CallParams<StateArgs['obj']['default_value_from_local_state(string)string'] | StateArgs['tuple']['default_value_from_local_state(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: [undefined]}) => {
      const result = await this.appClient.send.call(StateParamsFactory.defaultValueFromLocalState(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['default_value_from_local_state(string)string'])}
    },

    /**
     * Makes a call to the State smart contract using the `structs((string,uint64))(string,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    structs: async (params: CallParams<StateArgs['obj']['structs((string,uint64))(string,uint64)'] | StateArgs['tuple']['structs((string,uint64))(string,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.structs(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['structs((string,uint64))(string,uint64)'])}
    },

    /**
     * Makes a call to the State smart contract using the `set_global(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setGlobal: async (params: CallParams<StateArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.setGlobal(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['set_global(uint64,uint64,string,byte[4])void'])}
    },

    /**
     * Makes a call to the State smart contract using the `set_local(uint64,uint64,string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setLocal: async (params: CallParams<StateArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.setLocal(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['set_local(uint64,uint64,string,byte[4])void'])}
    },

    /**
     * Makes a call to the State smart contract using the `set_box(byte[4],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBox: async (params: CallParams<StateArgs['obj']['set_box(byte[4],string)void'] | StateArgs['tuple']['set_box(byte[4],string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StateParamsFactory.setBox(params))
      return {...result, return: result.return as unknown as (undefined | StateReturns['set_box(byte[4],string)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new StateClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `error()void` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async error(params: CallParams<StateArgs['obj']['error()void'] | StateArgs['tuple']['error()void']> = {args: []}) {
    const result = await this.appClient.send.call(StateParamsFactory.error(params))
    return result.return as unknown as StateReturns['error()void']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `call_abi(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async callAbi(params: CallParams<StateArgs['obj']['call_abi(string)string'] | StateArgs['tuple']['call_abi(string)string']>) {
    const result = await this.appClient.send.call(StateParamsFactory.callAbi(params))
    return result.return as unknown as StateReturns['call_abi(string)string']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `call_abi_txn(pay,string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async callAbiTxn(params: CallParams<StateArgs['obj']['call_abi_txn(pay,string)string'] | StateArgs['tuple']['call_abi_txn(pay,string)string']>) {
    const result = await this.appClient.send.call(StateParamsFactory.callAbiTxn(params))
    return result.return as unknown as StateReturns['call_abi_txn(pay,string)string']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `default_value(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async defaultValue(params: CallParams<StateArgs['obj']['default_value(string)string'] | StateArgs['tuple']['default_value(string)string']> = {args: [undefined]}) {
    const result = await this.appClient.send.call(StateParamsFactory.defaultValue(params))
    return result.return as unknown as StateReturns['default_value(string)string']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `default_value_int(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async defaultValueInt(params: CallParams<StateArgs['obj']['default_value_int(uint64)uint64'] | StateArgs['tuple']['default_value_int(uint64)uint64']> = {args: [undefined]}) {
    const result = await this.appClient.send.call(StateParamsFactory.defaultValueInt(params))
    return result.return as unknown as StateReturns['default_value_int(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `default_value_from_abi(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async defaultValueFromAbi(params: CallParams<StateArgs['obj']['default_value_from_abi(string)string'] | StateArgs['tuple']['default_value_from_abi(string)string']> = {args: [undefined]}) {
    const result = await this.appClient.send.call(StateParamsFactory.defaultValueFromAbi(params))
    return result.return as unknown as StateReturns['default_value_from_abi(string)string']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `default_value_from_global_state(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async defaultValueFromGlobalState(params: CallParams<StateArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateArgs['tuple']['default_value_from_global_state(uint64)uint64']> = {args: [undefined]}) {
    const result = await this.appClient.send.call(StateParamsFactory.defaultValueFromGlobalState(params))
    return result.return as unknown as StateReturns['default_value_from_global_state(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the State smart contract using the `default_value_from_local_state(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async defaultValueFromLocalState(params: CallParams<StateArgs['obj']['default_value_from_local_state(string)string'] | StateArgs['tuple']['default_value_from_local_state(string)string']> = {args: [undefined]}) {
    const result = await this.appClient.send.call(StateParamsFactory.defaultValueFromLocalState(params))
    return result.return as unknown as StateReturns['default_value_from_local_state(string)string']
  }

  /**
   * Methods to access state for the current State app
   */
  state = {
    /**
     * Methods to access global state for the current State app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          value: result.value,
          bytes1: new BinaryStateValue(result.bytes1),
          bytes2: new BinaryStateValue(result.bytes2),
          bytesNotInSnakeCase: new BinaryStateValue(result.bytesNotInSnakeCase),
          int1: result.int1,
          int2: result.int2,
        }
      },
      /**
       * Get the current value of the value key in global state
       */
      value: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("value")) as bigint | undefined },
      /**
       * Get the current value of the bytes1 key in global state
       */
      bytes1: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("bytes1")) as Uint8Array | undefined) },
      /**
       * Get the current value of the bytes2 key in global state
       */
      bytes2: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("bytes2")) as Uint8Array | undefined) },
      /**
       * Get the current value of the bytesNotInSnakeCase key in global state
       */
      bytesNotInSnakeCase: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("bytesNotInSnakeCase")) as Uint8Array | undefined) },
      /**
       * Get the current value of the int1 key in global state
       */
      int1: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("int1")) as bigint | undefined },
      /**
       * Get the current value of the int2 key in global state
       */
      int2: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("int2")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current State app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            localBytes1: new BinaryStateValue(result.local_bytes1),
            localBytes2: new BinaryStateValue(result.local_bytes2),
            localBytesNotInSnakeCase: new BinaryStateValue(result.localBytesNotInSnakeCase),
            localInt1: result.local_int1,
            localInt2: result.local_int2,
          }
        },
        /**
         * Get the current value of the local_bytes1 key in local state
         */
        localBytes1: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.local(encodedAddress).getValue("local_bytes1")) as Uint8Array | undefined) },
        /**
         * Get the current value of the local_bytes2 key in local state
         */
        localBytes2: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.local(encodedAddress).getValue("local_bytes2")) as Uint8Array | undefined) },
        /**
         * Get the current value of the localBytesNotInSnakeCase key in local state
         */
        localBytesNotInSnakeCase: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.local(encodedAddress).getValue("localBytesNotInSnakeCase")) as Uint8Array | undefined) },
        /**
         * Get the current value of the local_int1 key in local state
         */
        localInt1: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("local_int1")) as bigint | undefined },
        /**
         * Get the current value of the local_int2 key in local state
         */
        localInt2: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("local_int2")) as bigint | undefined },
      }
    },
    /**
     * Methods to access box state for the current State app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          boxNotInSnakeCase: result.boxNotInSnakeCase,
        }
      },
      /**
       * Get the current value of the boxNotInSnakeCase key in box state
       */
      boxNotInSnakeCase: async (): Promise<string | undefined> => { return (await this.appClient.state.box.getValue("boxNotInSnakeCase")) as string | undefined },
      /**
       * Get values from the box map in box state
       */
      box: {
        /**
         * Get all current values of the box map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, string>> => { return (await this.appClient.state.box.getMap("box")) as Map<Uint8Array, string> },
        /**
         * Get a current value of the box map by key from box state
         */
        value: async (key: Uint8Array): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("box", key) as string | undefined },
      },
      /**
       * Get values from the boxMapNotInSnakeCase map in box state
       */
      boxMapNotInSnakeCase: {
        /**
         * Get all current values of the boxMapNotInSnakeCase map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, string>> => { return (await this.appClient.state.box.getMap("boxMapNotInSnakeCase")) as Map<Uint8Array, string> },
        /**
         * Get a current value of the boxMapNotInSnakeCase map by key from box state
         */
        value: async (key: Uint8Array): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("boxMapNotInSnakeCase", key) as string | undefined },
      },
    },
  }

  public newGroup(): StateComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a error()void method call against the State contract
       */
      error(params: CallParams<StateArgs['obj']['error()void'] | StateArgs['tuple']['error()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.error(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a call_abi(string)string method call against the State contract
       */
      callAbi(params: CallParams<StateArgs['obj']['call_abi(string)string'] | StateArgs['tuple']['call_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callAbi(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_abi(string)string', v))
        return this
      },
      /**
       * Add a call_abi_txn(pay,string)string method call against the State contract
       */
      callAbiTxn(params: CallParams<StateArgs['obj']['call_abi_txn(pay,string)string'] | StateArgs['tuple']['call_abi_txn(pay,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callAbiTxn(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_abi_txn(pay,string)string', v))
        return this
      },
      /**
       * Add a call_with_references(asset,account,application)uint64 method call against the State contract
       */
      callWithReferences(params: CallParams<StateArgs['obj']['call_with_references(asset,account,application)uint64'] | StateArgs['tuple']['call_with_references(asset,account,application)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callWithReferences(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_with_references(asset,account,application)uint64', v))
        return this
      },
      /**
       * Add a default_value(string)string method call against the State contract
       */
      defaultValue(params: CallParams<StateArgs['obj']['default_value(string)string'] | StateArgs['tuple']['default_value(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.defaultValue(params)))
        resultMappers.push((v) => client.decodeReturnValue('default_value(string)string', v))
        return this
      },
      /**
       * Add a default_value_int(uint64)uint64 method call against the State contract
       */
      defaultValueInt(params: CallParams<StateArgs['obj']['default_value_int(uint64)uint64'] | StateArgs['tuple']['default_value_int(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.defaultValueInt(params)))
        resultMappers.push((v) => client.decodeReturnValue('default_value_int(uint64)uint64', v))
        return this
      },
      /**
       * Add a default_value_from_abi(string)string method call against the State contract
       */
      defaultValueFromAbi(params: CallParams<StateArgs['obj']['default_value_from_abi(string)string'] | StateArgs['tuple']['default_value_from_abi(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.defaultValueFromAbi(params)))
        resultMappers.push((v) => client.decodeReturnValue('default_value_from_abi(string)string', v))
        return this
      },
      /**
       * Add a default_value_from_global_state(uint64)uint64 method call against the State contract
       */
      defaultValueFromGlobalState(params: CallParams<StateArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateArgs['tuple']['default_value_from_global_state(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.defaultValueFromGlobalState(params)))
        resultMappers.push((v) => client.decodeReturnValue('default_value_from_global_state(uint64)uint64', v))
        return this
      },
      /**
       * Add a default_value_from_local_state(string)string method call against the State contract
       */
      defaultValueFromLocalState(params: CallParams<StateArgs['obj']['default_value_from_local_state(string)string'] | StateArgs['tuple']['default_value_from_local_state(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.defaultValueFromLocalState(params)))
        resultMappers.push((v) => client.decodeReturnValue('default_value_from_local_state(string)string', v))
        return this
      },
      /**
       * Add a structs((string,uint64))(string,uint64) method call against the State contract
       */
      structs(params: CallParams<StateArgs['obj']['structs((string,uint64))(string,uint64)'] | StateArgs['tuple']['structs((string,uint64))(string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.structs(params)))
        resultMappers.push((v) => client.decodeReturnValue('structs((string,uint64))(string,uint64)', v))
        return this
      },
      /**
       * Add a set_global(uint64,uint64,string,byte[4])void method call against the State contract
       */
      setGlobal(params: CallParams<StateArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setGlobal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_local(uint64,uint64,string,byte[4])void method call against the State contract
       */
      setLocal(params: CallParams<StateArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setLocal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_box(byte[4],string)void method call against the State contract
       */
      setBox(params: CallParams<StateArgs['obj']['set_box(byte[4],string)void'] | StateArgs['tuple']['set_box(byte[4],string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBox(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          bare: (params?: AppClientBareCallParams & AppClientCompilationParams ) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdate(await client.params.update.bare(params)))
            return this
          },
          updateAbi: (params: CallParams<StateArgs['obj']['update_abi(string)string'] | StateArgs['tuple']['update_abi(string)string']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateAbi(params)))
            resultMappers.push((v) => client.decodeReturnValue('update_abi(string)string', v))
            return this
          },
        }
      },
      get delete() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppDelete(client.params.delete.bare(params)))
            return this
          },
          deleteAbi: (params: CallParams<StateArgs['obj']['delete_abi(string)string'] | StateArgs['tuple']['delete_abi(string)string']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteAbi(params)))
            resultMappers.push((v) => client.decodeReturnValue('delete_abi(string)string', v))
            return this
          },
        }
      },
      get optIn() {
        return {
          optIn: (params: CallParams<StateArgs['obj']['opt_in()void'] | StateArgs['tuple']['opt_in()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optIn(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the State contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as StateComposer
  }
}
export type StateComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the error()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  error(params?: CallParams<StateArgs['obj']['error()void'] | StateArgs['tuple']['error()void']>): StateComposer<[...TReturns, StateReturns['error()void'] | undefined]>

  /**
   * Calls the call_abi(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbi(params?: CallParams<StateArgs['obj']['call_abi(string)string'] | StateArgs['tuple']['call_abi(string)string']>): StateComposer<[...TReturns, StateReturns['call_abi(string)string'] | undefined]>

  /**
   * Calls the call_abi_txn(pay,string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callAbiTxn(params?: CallParams<StateArgs['obj']['call_abi_txn(pay,string)string'] | StateArgs['tuple']['call_abi_txn(pay,string)string']>): StateComposer<[...TReturns, StateReturns['call_abi_txn(pay,string)string'] | undefined]>

  /**
   * Calls the call_with_references(asset,account,application)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callWithReferences(params?: CallParams<StateArgs['obj']['call_with_references(asset,account,application)uint64'] | StateArgs['tuple']['call_with_references(asset,account,application)uint64']>): StateComposer<[...TReturns, StateReturns['call_with_references(asset,account,application)uint64'] | undefined]>

  /**
   * Calls the default_value(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValue(params?: CallParams<StateArgs['obj']['default_value(string)string'] | StateArgs['tuple']['default_value(string)string']>): StateComposer<[...TReturns, StateReturns['default_value(string)string'] | undefined]>

  /**
   * Calls the default_value_int(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueInt(params?: CallParams<StateArgs['obj']['default_value_int(uint64)uint64'] | StateArgs['tuple']['default_value_int(uint64)uint64']>): StateComposer<[...TReturns, StateReturns['default_value_int(uint64)uint64'] | undefined]>

  /**
   * Calls the default_value_from_abi(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueFromAbi(params?: CallParams<StateArgs['obj']['default_value_from_abi(string)string'] | StateArgs['tuple']['default_value_from_abi(string)string']>): StateComposer<[...TReturns, StateReturns['default_value_from_abi(string)string'] | undefined]>

  /**
   * Calls the default_value_from_global_state(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueFromGlobalState(params?: CallParams<StateArgs['obj']['default_value_from_global_state(uint64)uint64'] | StateArgs['tuple']['default_value_from_global_state(uint64)uint64']>): StateComposer<[...TReturns, StateReturns['default_value_from_global_state(uint64)uint64'] | undefined]>

  /**
   * Calls the default_value_from_local_state(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  defaultValueFromLocalState(params?: CallParams<StateArgs['obj']['default_value_from_local_state(string)string'] | StateArgs['tuple']['default_value_from_local_state(string)string']>): StateComposer<[...TReturns, StateReturns['default_value_from_local_state(string)string'] | undefined]>

  /**
   * Calls the structs((string,uint64))(string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  structs(params?: CallParams<StateArgs['obj']['structs((string,uint64))(string,uint64)'] | StateArgs['tuple']['structs((string,uint64))(string,uint64)']>): StateComposer<[...TReturns, StateReturns['structs((string,uint64))(string,uint64)'] | undefined]>

  /**
   * Calls the set_global(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setGlobal(params?: CallParams<StateArgs['obj']['set_global(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_global(uint64,uint64,string,byte[4])void']>): StateComposer<[...TReturns, StateReturns['set_global(uint64,uint64,string,byte[4])void'] | undefined]>

  /**
   * Calls the set_local(uint64,uint64,string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setLocal(params?: CallParams<StateArgs['obj']['set_local(uint64,uint64,string,byte[4])void'] | StateArgs['tuple']['set_local(uint64,uint64,string,byte[4])void']>): StateComposer<[...TReturns, StateReturns['set_local(uint64,uint64,string,byte[4])void'] | undefined]>

  /**
   * Calls the set_box(byte[4],string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBox(params?: CallParams<StateArgs['obj']['set_box(byte[4],string)void'] | StateArgs['tuple']['set_box(byte[4],string)void']>): StateComposer<[...TReturns, StateReturns['set_box(byte[4],string)void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the State smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): StateComposer<[...TReturns, undefined]>
    /**
     * Deletes an existing instance of the State smart contract using the delete_abi(string)string ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteAbi(params?: CallParams<StateArgs['obj']['delete_abi(string)string'] | StateArgs['tuple']['delete_abi(string)string']>): StateComposer<[...TReturns, StateReturns['delete_abi(string)string'] | undefined]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the State smart contract using the opt_in()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optIn(params?: CallParams<StateArgs['obj']['opt_in()void'] | StateArgs['tuple']['opt_in()void']>): StateComposer<[...TReturns, StateReturns['opt_in()void'] | undefined]>
  }

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the State smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): StateComposer<[...TReturns, undefined]>
    /**
     * Updates an existing instance of the State smart contract using the update_abi(string)string ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateAbi(params?: CallParams<StateArgs['obj']['update_abi(string)string'] | StateArgs['tuple']['update_abi(string)string']>): StateComposer<[...TReturns, StateReturns['update_abi(string)string'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the State smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): StateComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): StateComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<StateComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<StateComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<StateComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<StateComposerResults<TReturns>>
}
export type StateComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

