/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"GetMoney","structs":{},"methods":[{"name":"init","args":[{"type":"byte[]","name":"oracle_pubkey"},{"type":"uint64","name":"usdt_asset_id"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"set_oracle","args":[{"type":"byte[]","name":"new_key"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"set_asset","args":[{"type":"uint64","name":"asset_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"sweep","args":[{"type":"account","name":"receiver"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"release_simple","args":[{"type":"account","name":"recipient"},{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"opt_in_asset","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"address","key":"YWRtaW4="},"oracle_pk":{"keyType":"AVMString","valueType":"AVMBytes","key":"b3JhY2xlX3Br"},"asset_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRfaWQ="},"paused":{"keyType":"AVMString","valueType":"AVMUint64","key":"cGF1c2Vk"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[92,104,126,144,160,178],"errorMessage":"OnCompletion is not NoOp"},{"pc":[182],"errorMessage":"can only call when creating"},{"pc":[95,107,129,147,163],"errorMessage":"can only call when not creating"},{"pc":[232,248,264,301,332],"errorMessage":"check self.admin exists"},{"pc":[270,307,338],"errorMessage":"check self.asset_id exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiADAAEEJgMFYWRtaW4IYXNzZXRfaWQJb3JhY2xlX3BrMRtBADGCBgTdtxgcBHLiuLcEcJuAqASIdzPDBKFNxBYEA01PejYaAI4GAFgARgA2ACQADgACIkMxGRREMRhEiADkI0MxGRREMRhENhoBF8AcNhoCF4gArCNDMRkURDEYRDYaARfAHIgAdSNDMRkURDEYRDYaAReIAFUjQzEZFEQxGEQ2GgFXAgCIADMjQzEZFEQxGBRENhoBVwIANhoCF4gAAiNDigIAKDEAZyqL/mcpi/9ngAZwYXVzZWQiZ4mKAQAxACIoZUQSRCqL/2eJigEAMQAiKGVEEkQpi/9niYoBADEAIihlRBJEIillRLGL/7IUi/+yFSKyErIRJLIQIrIBs4mKAgAxACIoZUQSRCIpZUSxi/6yFIv/shKyESSyECKyAbOJMQAiKGVEEkQiKWVEsTIKshQishKyESSyECKyAbOJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the GetMoney contract
 */
export type GetMoneyArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'init(byte[],uint64)void': {
      oraclePubkey: Uint8Array
      usdtAssetId: bigint | number
    }
    'set_oracle(byte[])void': {
      newKey: Uint8Array
    }
    'set_asset(uint64)void': {
      assetId: bigint | number
    }
    'sweep(account)void': {
      receiver: Uint8Array | string
    }
    'release_simple(account,uint64)void': {
      recipient: Uint8Array | string
      amount: bigint | number
    }
    'opt_in_asset()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'init(byte[],uint64)void': [oraclePubkey: Uint8Array, usdtAssetId: bigint | number]
    'set_oracle(byte[])void': [newKey: Uint8Array]
    'set_asset(uint64)void': [assetId: bigint | number]
    'sweep(account)void': [receiver: Uint8Array | string]
    'release_simple(account,uint64)void': [recipient: Uint8Array | string, amount: bigint | number]
    'opt_in_asset()void': []
  }
}

/**
 * The return type for each method
 */
export type GetMoneyReturns = {
  'init(byte[],uint64)void': void
  'set_oracle(byte[])void': void
  'set_asset(uint64)void': void
  'sweep(account)void': void
  'release_simple(account,uint64)void': void
  'opt_in_asset()void': void
}

/**
 * Defines the types of available calls and state of the GetMoney smart contract.
 */
export type GetMoneyTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'init(byte[],uint64)void' | 'init', {
      argsObj: GetMoneyArgs['obj']['init(byte[],uint64)void']
      argsTuple: GetMoneyArgs['tuple']['init(byte[],uint64)void']
      returns: GetMoneyReturns['init(byte[],uint64)void']
    }>
    & Record<'set_oracle(byte[])void' | 'set_oracle', {
      argsObj: GetMoneyArgs['obj']['set_oracle(byte[])void']
      argsTuple: GetMoneyArgs['tuple']['set_oracle(byte[])void']
      returns: GetMoneyReturns['set_oracle(byte[])void']
    }>
    & Record<'set_asset(uint64)void' | 'set_asset', {
      argsObj: GetMoneyArgs['obj']['set_asset(uint64)void']
      argsTuple: GetMoneyArgs['tuple']['set_asset(uint64)void']
      returns: GetMoneyReturns['set_asset(uint64)void']
    }>
    & Record<'sweep(account)void' | 'sweep', {
      argsObj: GetMoneyArgs['obj']['sweep(account)void']
      argsTuple: GetMoneyArgs['tuple']['sweep(account)void']
      returns: GetMoneyReturns['sweep(account)void']
    }>
    & Record<'release_simple(account,uint64)void' | 'release_simple', {
      argsObj: GetMoneyArgs['obj']['release_simple(account,uint64)void']
      argsTuple: GetMoneyArgs['tuple']['release_simple(account,uint64)void']
      returns: GetMoneyReturns['release_simple(account,uint64)void']
    }>
    & Record<'opt_in_asset()void' | 'opt_in_asset', {
      argsObj: GetMoneyArgs['obj']['opt_in_asset()void']
      argsTuple: GetMoneyArgs['tuple']['opt_in_asset()void']
      returns: GetMoneyReturns['opt_in_asset()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: string
        oraclePk: BinaryState
        assetId: bigint
        paused: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type GetMoneySignatures = keyof GetMoneyTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type GetMoneyNonVoidMethodSignatures = keyof GetMoneyTypes['methods'] extends infer T ? T extends keyof GetMoneyTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the GetMoney smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends GetMoneySignatures> = GetMoneyTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the GetMoney smart contract to the method's return type
 */
export type MethodReturn<TSignature extends GetMoneySignatures> = GetMoneyTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = GetMoneyTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type GetMoneyCreateCallParams =
  | Expand<CallParams<GetMoneyArgs['obj']['init(byte[],uint64)void'] | GetMoneyArgs['tuple']['init(byte[],uint64)void']> & {method: 'init'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GetMoneyArgs['obj']['init(byte[],uint64)void'] | GetMoneyArgs['tuple']['init(byte[],uint64)void']> & {method: 'init(byte[],uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type GetMoneyDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: GetMoneyCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the GetMoney smart contract
 */
export abstract class GetMoneyParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends GetMoneyCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'init':
          case 'init(byte[],uint64)void':
            return GetMoneyParamsFactory.create.init(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the GetMoney smart contract using the init(byte[],uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      init(params: CallParams<GetMoneyArgs['obj']['init(byte[],uint64)void'] | GetMoneyArgs['tuple']['init(byte[],uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'init(byte[],uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.oraclePubkey, params.args.usdtAssetId],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the set_oracle(byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setOracle(params: CallParams<GetMoneyArgs['obj']['set_oracle(byte[])void'] | GetMoneyArgs['tuple']['set_oracle(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_oracle(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newKey],
    }
  }
  /**
   * Constructs a no op call for the set_asset(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAsset(params: CallParams<GetMoneyArgs['obj']['set_asset(uint64)void'] | GetMoneyArgs['tuple']['set_asset(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_asset(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the sweep(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sweep(params: CallParams<GetMoneyArgs['obj']['sweep(account)void'] | GetMoneyArgs['tuple']['sweep(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sweep(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.receiver],
    }
  }
  /**
   * Constructs a no op call for the release_simple(account,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static releaseSimple(params: CallParams<GetMoneyArgs['obj']['release_simple(account,uint64)void'] | GetMoneyArgs['tuple']['release_simple(account,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'release_simple(account,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipient, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the opt_in_asset()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInAsset(params: CallParams<GetMoneyArgs['obj']['opt_in_asset()void'] | GetMoneyArgs['tuple']['opt_in_asset()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opt_in_asset()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the GetMoney smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class GetMoneyFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `GetMoneyFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new GetMoneyClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new GetMoneyClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the GetMoney smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: GetMoneyDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? GetMoneyParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (GetMoneyCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new GetMoneyClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GetMoney smart contract using the init(byte[],uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      init: (params: CallParams<GetMoneyArgs['obj']['init(byte[],uint64)void'] | GetMoneyArgs['tuple']['init(byte[],uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(GetMoneyParamsFactory.create.init(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GetMoney smart contract using the init(byte[],uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      init: (params: CallParams<GetMoneyArgs['obj']['init(byte[],uint64)void'] | GetMoneyArgs['tuple']['init(byte[],uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(GetMoneyParamsFactory.create.init(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GetMoney smart contract using an ABI method call using the init(byte[],uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      init: async (params: CallParams<GetMoneyArgs['obj']['init(byte[],uint64)void'] | GetMoneyArgs['tuple']['init(byte[],uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(GetMoneyParamsFactory.create.init(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | GetMoneyReturns['init(byte[],uint64)void']) }, appClient: new GetMoneyClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the GetMoney smart contract
 */
export class GetMoneyClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `GetMoneyClient`
   *
   * @param appClient An `AppClient` instance which has been created with the GetMoney app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `GetMoneyClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends GetMoneyNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `GetMoneyClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<GetMoneyClient> {
    return new GetMoneyClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `GetMoneyClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<GetMoneyClient> {
    return new GetMoneyClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the GetMoney smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the GetMoney smart contract using the `set_oracle(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setOracle: (params: CallParams<GetMoneyArgs['obj']['set_oracle(byte[])void'] | GetMoneyArgs['tuple']['set_oracle(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GetMoneyParamsFactory.setOracle(params))
    },

    /**
     * Makes a call to the GetMoney smart contract using the `set_asset(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAsset: (params: CallParams<GetMoneyArgs['obj']['set_asset(uint64)void'] | GetMoneyArgs['tuple']['set_asset(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GetMoneyParamsFactory.setAsset(params))
    },

    /**
     * Makes a call to the GetMoney smart contract using the `sweep(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sweep: (params: CallParams<GetMoneyArgs['obj']['sweep(account)void'] | GetMoneyArgs['tuple']['sweep(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GetMoneyParamsFactory.sweep(params))
    },

    /**
     * Makes a call to the GetMoney smart contract using the `release_simple(account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    releaseSimple: (params: CallParams<GetMoneyArgs['obj']['release_simple(account,uint64)void'] | GetMoneyArgs['tuple']['release_simple(account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GetMoneyParamsFactory.releaseSimple(params))
    },

    /**
     * Makes a call to the GetMoney smart contract using the `opt_in_asset()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInAsset: (params: CallParams<GetMoneyArgs['obj']['opt_in_asset()void'] | GetMoneyArgs['tuple']['opt_in_asset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(GetMoneyParamsFactory.optInAsset(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the GetMoney smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the GetMoney smart contract using the `set_oracle(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setOracle: (params: CallParams<GetMoneyArgs['obj']['set_oracle(byte[])void'] | GetMoneyArgs['tuple']['set_oracle(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GetMoneyParamsFactory.setOracle(params))
    },

    /**
     * Makes a call to the GetMoney smart contract using the `set_asset(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAsset: (params: CallParams<GetMoneyArgs['obj']['set_asset(uint64)void'] | GetMoneyArgs['tuple']['set_asset(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GetMoneyParamsFactory.setAsset(params))
    },

    /**
     * Makes a call to the GetMoney smart contract using the `sweep(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sweep: (params: CallParams<GetMoneyArgs['obj']['sweep(account)void'] | GetMoneyArgs['tuple']['sweep(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GetMoneyParamsFactory.sweep(params))
    },

    /**
     * Makes a call to the GetMoney smart contract using the `release_simple(account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    releaseSimple: (params: CallParams<GetMoneyArgs['obj']['release_simple(account,uint64)void'] | GetMoneyArgs['tuple']['release_simple(account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GetMoneyParamsFactory.releaseSimple(params))
    },

    /**
     * Makes a call to the GetMoney smart contract using the `opt_in_asset()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInAsset: (params: CallParams<GetMoneyArgs['obj']['opt_in_asset()void'] | GetMoneyArgs['tuple']['opt_in_asset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(GetMoneyParamsFactory.optInAsset(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the GetMoney smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the GetMoney smart contract using the `set_oracle(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setOracle: async (params: CallParams<GetMoneyArgs['obj']['set_oracle(byte[])void'] | GetMoneyArgs['tuple']['set_oracle(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GetMoneyParamsFactory.setOracle(params))
      return {...result, return: result.return as unknown as (undefined | GetMoneyReturns['set_oracle(byte[])void'])}
    },

    /**
     * Makes a call to the GetMoney smart contract using the `set_asset(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAsset: async (params: CallParams<GetMoneyArgs['obj']['set_asset(uint64)void'] | GetMoneyArgs['tuple']['set_asset(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GetMoneyParamsFactory.setAsset(params))
      return {...result, return: result.return as unknown as (undefined | GetMoneyReturns['set_asset(uint64)void'])}
    },

    /**
     * Makes a call to the GetMoney smart contract using the `sweep(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sweep: async (params: CallParams<GetMoneyArgs['obj']['sweep(account)void'] | GetMoneyArgs['tuple']['sweep(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GetMoneyParamsFactory.sweep(params))
      return {...result, return: result.return as unknown as (undefined | GetMoneyReturns['sweep(account)void'])}
    },

    /**
     * Makes a call to the GetMoney smart contract using the `release_simple(account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    releaseSimple: async (params: CallParams<GetMoneyArgs['obj']['release_simple(account,uint64)void'] | GetMoneyArgs['tuple']['release_simple(account,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GetMoneyParamsFactory.releaseSimple(params))
      return {...result, return: result.return as unknown as (undefined | GetMoneyReturns['release_simple(account,uint64)void'])}
    },

    /**
     * Makes a call to the GetMoney smart contract using the `opt_in_asset()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInAsset: async (params: CallParams<GetMoneyArgs['obj']['opt_in_asset()void'] | GetMoneyArgs['tuple']['opt_in_asset()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(GetMoneyParamsFactory.optInAsset(params))
      return {...result, return: result.return as unknown as (undefined | GetMoneyReturns['opt_in_asset()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new GetMoneyClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current GetMoney app
   */
  state = {
    /**
     * Methods to access global state for the current GetMoney app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
          oraclePk: new BinaryStateValue(result.oracle_pk),
          assetId: result.asset_id,
          paused: result.paused,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the oracle_pk key in global state
       */
      oraclePk: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("oracle_pk")) as Uint8Array | undefined) },
      /**
       * Get the current value of the asset_id key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset_id")) as bigint | undefined },
      /**
       * Get the current value of the paused key in global state
       */
      paused: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("paused")) as bigint | undefined },
    },
  }

  public newGroup(): GetMoneyComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a set_oracle(byte[])void method call against the GetMoney contract
       */
      setOracle(params: CallParams<GetMoneyArgs['obj']['set_oracle(byte[])void'] | GetMoneyArgs['tuple']['set_oracle(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setOracle(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_asset(uint64)void method call against the GetMoney contract
       */
      setAsset(params: CallParams<GetMoneyArgs['obj']['set_asset(uint64)void'] | GetMoneyArgs['tuple']['set_asset(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a sweep(account)void method call against the GetMoney contract
       */
      sweep(params: CallParams<GetMoneyArgs['obj']['sweep(account)void'] | GetMoneyArgs['tuple']['sweep(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sweep(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a release_simple(account,uint64)void method call against the GetMoney contract
       */
      releaseSimple(params: CallParams<GetMoneyArgs['obj']['release_simple(account,uint64)void'] | GetMoneyArgs['tuple']['release_simple(account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.releaseSimple(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a opt_in_asset()void method call against the GetMoney contract
       */
      optInAsset(params: CallParams<GetMoneyArgs['obj']['opt_in_asset()void'] | GetMoneyArgs['tuple']['opt_in_asset()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the GetMoney contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as GetMoneyComposer
  }
}
export type GetMoneyComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_oracle(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setOracle(params?: CallParams<GetMoneyArgs['obj']['set_oracle(byte[])void'] | GetMoneyArgs['tuple']['set_oracle(byte[])void']>): GetMoneyComposer<[...TReturns, GetMoneyReturns['set_oracle(byte[])void'] | undefined]>

  /**
   * Calls the set_asset(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAsset(params?: CallParams<GetMoneyArgs['obj']['set_asset(uint64)void'] | GetMoneyArgs['tuple']['set_asset(uint64)void']>): GetMoneyComposer<[...TReturns, GetMoneyReturns['set_asset(uint64)void'] | undefined]>

  /**
   * Calls the sweep(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sweep(params?: CallParams<GetMoneyArgs['obj']['sweep(account)void'] | GetMoneyArgs['tuple']['sweep(account)void']>): GetMoneyComposer<[...TReturns, GetMoneyReturns['sweep(account)void'] | undefined]>

  /**
   * Calls the release_simple(account,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  releaseSimple(params?: CallParams<GetMoneyArgs['obj']['release_simple(account,uint64)void'] | GetMoneyArgs['tuple']['release_simple(account,uint64)void']>): GetMoneyComposer<[...TReturns, GetMoneyReturns['release_simple(account,uint64)void'] | undefined]>

  /**
   * Calls the opt_in_asset()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInAsset(params?: CallParams<GetMoneyArgs['obj']['opt_in_asset()void'] | GetMoneyArgs['tuple']['opt_in_asset()void']>): GetMoneyComposer<[...TReturns, GetMoneyReturns['opt_in_asset()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the GetMoney smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): GetMoneyComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): GetMoneyComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<GetMoneyComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<GetMoneyComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<GetMoneyComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<GetMoneyComposerResults<TReturns>>
}
export type GetMoneyComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

