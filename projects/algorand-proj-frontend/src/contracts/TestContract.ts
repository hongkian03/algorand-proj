/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"TestContract","desc":"","structs":{},"methods":[{"name":"doMath","desc":"A method that takes two numbers and does either addition or subtraction","args":[{"name":"a","type":"uint64","desc":"The first number"},{"name":"b","type":"uint64","desc":"The second number"},{"name":"operation","type":"string","desc":"The operation to perform. Can be either 'sum' or 'difference'"}],"returns":{"type":"uint64","desc":"The result of the operation"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"txnArg","args":[{"name":"txn","type":"pay"}],"returns":{"type":"address"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"helloWorld","args":[],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"methodArg","args":[{"name":"call","type":"appl"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"nestedTxnArg","args":[{"name":"txn","type":"pay"},{"name":"call","type":"appl"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"doubleNestedTxnArg","args":[{"name":"txn0","type":"pay"},{"name":"call1","type":"appl"},{"name":"txn2","type":"pay"},{"name":"call3","type":"appl"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}}],"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the TestContract contract
 */
export type TestContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'doMath(uint64,uint64,string)uint64': {
      /**
       * The first number
       */
      a: bigint | number
      /**
       * The second number
       */
      b: bigint | number
      /**
       * The operation to perform. Can be either 'sum' or 'difference'
       */
      operation: string
    }
    'txnArg(pay)address': {
      txn: AppMethodCallTransactionArgument
    }
    'helloWorld()string': Record<string, never>
    'methodArg(appl)uint64': {
      call: AppMethodCallTransactionArgument
    }
    'nestedTxnArg(pay,appl)uint64': {
      txn?: AppMethodCallTransactionArgument
      call: AppMethodCallTransactionArgument
    }
    'doubleNestedTxnArg(pay,appl,pay,appl)uint64': {
      txn0?: AppMethodCallTransactionArgument
      call1?: AppMethodCallTransactionArgument
      txn2?: AppMethodCallTransactionArgument
      call3: AppMethodCallTransactionArgument
    }
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'doMath(uint64,uint64,string)uint64': [a: bigint | number, b: bigint | number, operation: string]
    'txnArg(pay)address': [txn: AppMethodCallTransactionArgument]
    'helloWorld()string': []
    'methodArg(appl)uint64': [call: AppMethodCallTransactionArgument]
    'nestedTxnArg(pay,appl)uint64': [txn: AppMethodCallTransactionArgument | undefined, call: AppMethodCallTransactionArgument]
    'doubleNestedTxnArg(pay,appl,pay,appl)uint64': [txn0: AppMethodCallTransactionArgument | undefined, call1: AppMethodCallTransactionArgument | undefined, txn2: AppMethodCallTransactionArgument | undefined, call3: AppMethodCallTransactionArgument]
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type TestContractReturns = {
  'doMath(uint64,uint64,string)uint64': bigint
  'txnArg(pay)address': string
  'helloWorld()string': string
  'methodArg(appl)uint64': bigint
  'nestedTxnArg(pay,appl)uint64': bigint
  'doubleNestedTxnArg(pay,appl,pay,appl)uint64': bigint
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the TestContract smart contract.
 */
export type TestContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'doMath(uint64,uint64,string)uint64' | 'doMath', {
      argsObj: TestContractArgs['obj']['doMath(uint64,uint64,string)uint64']
      argsTuple: TestContractArgs['tuple']['doMath(uint64,uint64,string)uint64']
      /**
       * The result of the operation
       */
      returns: TestContractReturns['doMath(uint64,uint64,string)uint64']
    }>
    & Record<'txnArg(pay)address' | 'txnArg', {
      argsObj: TestContractArgs['obj']['txnArg(pay)address']
      argsTuple: TestContractArgs['tuple']['txnArg(pay)address']
      returns: TestContractReturns['txnArg(pay)address']
    }>
    & Record<'helloWorld()string' | 'helloWorld', {
      argsObj: TestContractArgs['obj']['helloWorld()string']
      argsTuple: TestContractArgs['tuple']['helloWorld()string']
      returns: TestContractReturns['helloWorld()string']
    }>
    & Record<'methodArg(appl)uint64' | 'methodArg', {
      argsObj: TestContractArgs['obj']['methodArg(appl)uint64']
      argsTuple: TestContractArgs['tuple']['methodArg(appl)uint64']
      returns: TestContractReturns['methodArg(appl)uint64']
    }>
    & Record<'nestedTxnArg(pay,appl)uint64' | 'nestedTxnArg', {
      argsObj: TestContractArgs['obj']['nestedTxnArg(pay,appl)uint64']
      argsTuple: TestContractArgs['tuple']['nestedTxnArg(pay,appl)uint64']
      returns: TestContractReturns['nestedTxnArg(pay,appl)uint64']
    }>
    & Record<'doubleNestedTxnArg(pay,appl,pay,appl)uint64' | 'doubleNestedTxnArg', {
      argsObj: TestContractArgs['obj']['doubleNestedTxnArg(pay,appl,pay,appl)uint64']
      argsTuple: TestContractArgs['tuple']['doubleNestedTxnArg(pay,appl,pay,appl)uint64']
      returns: TestContractReturns['doubleNestedTxnArg(pay,appl,pay,appl)uint64']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: TestContractArgs['obj']['createApplication()void']
      argsTuple: TestContractArgs['tuple']['createApplication()void']
      returns: TestContractReturns['createApplication()void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type TestContractSignatures = keyof TestContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TestContractNonVoidMethodSignatures = keyof TestContractTypes['methods'] extends infer T ? T extends keyof TestContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TestContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TestContractSignatures> = TestContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TestContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TestContractSignatures> = TestContractTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type TestContractCreateCallParams =
  | Expand<CallParams<TestContractArgs['obj']['createApplication()void'] | TestContractArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<TestContractArgs['obj']['createApplication()void'] | TestContractArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TestContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TestContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TestContract smart contract
 */
export abstract class TestContractParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends TestContractCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return TestContractParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the TestContract smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<TestContractArgs['obj']['createApplication()void'] | TestContractArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the doMath(uint64,uint64,string)uint64 ABI method
   *
   * A method that takes two numbers and does either addition or subtraction
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doMath(params: CallParams<TestContractArgs['obj']['doMath(uint64,uint64,string)uint64'] | TestContractArgs['tuple']['doMath(uint64,uint64,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'doMath(uint64,uint64,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a, params.args.b, params.args.operation],
    }
  }
  /**
   * Constructs a no op call for the txnArg(pay)address ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static txnArg(params: CallParams<TestContractArgs['obj']['txnArg(pay)address'] | TestContractArgs['tuple']['txnArg(pay)address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'txnArg(pay)address' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txn],
    }
  }
  /**
   * Constructs a no op call for the helloWorld()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static helloWorld(params: CallParams<TestContractArgs['obj']['helloWorld()string'] | TestContractArgs['tuple']['helloWorld()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'helloWorld()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the methodArg(appl)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static methodArg(params: CallParams<TestContractArgs['obj']['methodArg(appl)uint64'] | TestContractArgs['tuple']['methodArg(appl)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'methodArg(appl)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.call],
    }
  }
  /**
   * Constructs a no op call for the nestedTxnArg(pay,appl)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static nestedTxnArg(params: CallParams<TestContractArgs['obj']['nestedTxnArg(pay,appl)uint64'] | TestContractArgs['tuple']['nestedTxnArg(pay,appl)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'nestedTxnArg(pay,appl)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txn, params.args.call],
    }
  }
  /**
   * Constructs a no op call for the doubleNestedTxnArg(pay,appl,pay,appl)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doubleNestedTxnArg(params: CallParams<TestContractArgs['obj']['doubleNestedTxnArg(pay,appl,pay,appl)uint64'] | TestContractArgs['tuple']['doubleNestedTxnArg(pay,appl,pay,appl)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'doubleNestedTxnArg(pay,appl,pay,appl)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txn0, params.args.call1, params.args.txn2, params.args.call3],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TestContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TestContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TestContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TestContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TestContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TestContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TestContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? TestContractParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (TestContractCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new TestContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TestContract smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<TestContractArgs['obj']['createApplication()void'] | TestContractArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(TestContractParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TestContract smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<TestContractArgs['obj']['createApplication()void'] | TestContractArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(TestContractParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TestContract smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<TestContractArgs['obj']['createApplication()void'] | TestContractArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(TestContractParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | TestContractReturns['createApplication()void']) }, appClient: new TestContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TestContract smart contract
 */
export class TestContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TestContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TestContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TestContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TestContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TestContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TestContractClient> {
    return new TestContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TestContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TestContractClient> {
    return new TestContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the TestContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TestContract smart contract using the `doMath(uint64,uint64,string)uint64` ABI method.
     *
     * A method that takes two numbers and does either addition or subtraction
     *
     * @param params The params for the smart contract call
     * @returns The call params: The result of the operation
     */
    doMath: (params: CallParams<TestContractArgs['obj']['doMath(uint64,uint64,string)uint64'] | TestContractArgs['tuple']['doMath(uint64,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TestContractParamsFactory.doMath(params))
    },

    /**
     * Makes a call to the TestContract smart contract using the `txnArg(pay)address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    txnArg: (params: CallParams<TestContractArgs['obj']['txnArg(pay)address'] | TestContractArgs['tuple']['txnArg(pay)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TestContractParamsFactory.txnArg(params))
    },

    /**
     * Makes a call to the TestContract smart contract using the `helloWorld()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    helloWorld: (params: CallParams<TestContractArgs['obj']['helloWorld()string'] | TestContractArgs['tuple']['helloWorld()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TestContractParamsFactory.helloWorld(params))
    },

    /**
     * Makes a call to the TestContract smart contract using the `methodArg(appl)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    methodArg: (params: CallParams<TestContractArgs['obj']['methodArg(appl)uint64'] | TestContractArgs['tuple']['methodArg(appl)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TestContractParamsFactory.methodArg(params))
    },

    /**
     * Makes a call to the TestContract smart contract using the `nestedTxnArg(pay,appl)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    nestedTxnArg: (params: CallParams<TestContractArgs['obj']['nestedTxnArg(pay,appl)uint64'] | TestContractArgs['tuple']['nestedTxnArg(pay,appl)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TestContractParamsFactory.nestedTxnArg(params))
    },

    /**
     * Makes a call to the TestContract smart contract using the `doubleNestedTxnArg(pay,appl,pay,appl)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doubleNestedTxnArg: (params: CallParams<TestContractArgs['obj']['doubleNestedTxnArg(pay,appl,pay,appl)uint64'] | TestContractArgs['tuple']['doubleNestedTxnArg(pay,appl,pay,appl)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TestContractParamsFactory.doubleNestedTxnArg(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the TestContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TestContract smart contract using the `doMath(uint64,uint64,string)uint64` ABI method.
     *
     * A method that takes two numbers and does either addition or subtraction
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The result of the operation
     */
    doMath: (params: CallParams<TestContractArgs['obj']['doMath(uint64,uint64,string)uint64'] | TestContractArgs['tuple']['doMath(uint64,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TestContractParamsFactory.doMath(params))
    },

    /**
     * Makes a call to the TestContract smart contract using the `txnArg(pay)address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    txnArg: (params: CallParams<TestContractArgs['obj']['txnArg(pay)address'] | TestContractArgs['tuple']['txnArg(pay)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TestContractParamsFactory.txnArg(params))
    },

    /**
     * Makes a call to the TestContract smart contract using the `helloWorld()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    helloWorld: (params: CallParams<TestContractArgs['obj']['helloWorld()string'] | TestContractArgs['tuple']['helloWorld()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TestContractParamsFactory.helloWorld(params))
    },

    /**
     * Makes a call to the TestContract smart contract using the `methodArg(appl)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    methodArg: (params: CallParams<TestContractArgs['obj']['methodArg(appl)uint64'] | TestContractArgs['tuple']['methodArg(appl)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TestContractParamsFactory.methodArg(params))
    },

    /**
     * Makes a call to the TestContract smart contract using the `nestedTxnArg(pay,appl)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    nestedTxnArg: (params: CallParams<TestContractArgs['obj']['nestedTxnArg(pay,appl)uint64'] | TestContractArgs['tuple']['nestedTxnArg(pay,appl)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TestContractParamsFactory.nestedTxnArg(params))
    },

    /**
     * Makes a call to the TestContract smart contract using the `doubleNestedTxnArg(pay,appl,pay,appl)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doubleNestedTxnArg: (params: CallParams<TestContractArgs['obj']['doubleNestedTxnArg(pay,appl,pay,appl)uint64'] | TestContractArgs['tuple']['doubleNestedTxnArg(pay,appl,pay,appl)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TestContractParamsFactory.doubleNestedTxnArg(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the TestContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TestContract smart contract using the `doMath(uint64,uint64,string)uint64` ABI method.
     *
     * A method that takes two numbers and does either addition or subtraction
     *
     * @param params The params for the smart contract call
     * @returns The call result: The result of the operation
     */
    doMath: async (params: CallParams<TestContractArgs['obj']['doMath(uint64,uint64,string)uint64'] | TestContractArgs['tuple']['doMath(uint64,uint64,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TestContractParamsFactory.doMath(params))
      return {...result, return: result.return as unknown as (undefined | TestContractReturns['doMath(uint64,uint64,string)uint64'])}
    },

    /**
     * Makes a call to the TestContract smart contract using the `txnArg(pay)address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    txnArg: async (params: CallParams<TestContractArgs['obj']['txnArg(pay)address'] | TestContractArgs['tuple']['txnArg(pay)address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TestContractParamsFactory.txnArg(params))
      return {...result, return: result.return as unknown as (undefined | TestContractReturns['txnArg(pay)address'])}
    },

    /**
     * Makes a call to the TestContract smart contract using the `helloWorld()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    helloWorld: async (params: CallParams<TestContractArgs['obj']['helloWorld()string'] | TestContractArgs['tuple']['helloWorld()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TestContractParamsFactory.helloWorld(params))
      return {...result, return: result.return as unknown as (undefined | TestContractReturns['helloWorld()string'])}
    },

    /**
     * Makes a call to the TestContract smart contract using the `methodArg(appl)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    methodArg: async (params: CallParams<TestContractArgs['obj']['methodArg(appl)uint64'] | TestContractArgs['tuple']['methodArg(appl)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TestContractParamsFactory.methodArg(params))
      return {...result, return: result.return as unknown as (undefined | TestContractReturns['methodArg(appl)uint64'])}
    },

    /**
     * Makes a call to the TestContract smart contract using the `nestedTxnArg(pay,appl)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    nestedTxnArg: async (params: CallParams<TestContractArgs['obj']['nestedTxnArg(pay,appl)uint64'] | TestContractArgs['tuple']['nestedTxnArg(pay,appl)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TestContractParamsFactory.nestedTxnArg(params))
      return {...result, return: result.return as unknown as (undefined | TestContractReturns['nestedTxnArg(pay,appl)uint64'])}
    },

    /**
     * Makes a call to the TestContract smart contract using the `doubleNestedTxnArg(pay,appl,pay,appl)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doubleNestedTxnArg: async (params: CallParams<TestContractArgs['obj']['doubleNestedTxnArg(pay,appl,pay,appl)uint64'] | TestContractArgs['tuple']['doubleNestedTxnArg(pay,appl,pay,appl)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TestContractParamsFactory.doubleNestedTxnArg(params))
      return {...result, return: result.return as unknown as (undefined | TestContractReturns['doubleNestedTxnArg(pay,appl,pay,appl)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TestContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current TestContract app
   */
  state = {
  }

  public newGroup(): TestContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a doMath(uint64,uint64,string)uint64 method call against the TestContract contract
       */
      doMath(params: CallParams<TestContractArgs['obj']['doMath(uint64,uint64,string)uint64'] | TestContractArgs['tuple']['doMath(uint64,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doMath(params)))
        resultMappers.push((v) => client.decodeReturnValue('doMath(uint64,uint64,string)uint64', v))
        return this
      },
      /**
       * Add a txnArg(pay)address method call against the TestContract contract
       */
      txnArg(params: CallParams<TestContractArgs['obj']['txnArg(pay)address'] | TestContractArgs['tuple']['txnArg(pay)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.txnArg(params)))
        resultMappers.push((v) => client.decodeReturnValue('txnArg(pay)address', v))
        return this
      },
      /**
       * Add a helloWorld()string method call against the TestContract contract
       */
      helloWorld(params: CallParams<TestContractArgs['obj']['helloWorld()string'] | TestContractArgs['tuple']['helloWorld()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.helloWorld(params)))
        resultMappers.push((v) => client.decodeReturnValue('helloWorld()string', v))
        return this
      },
      /**
       * Add a methodArg(appl)uint64 method call against the TestContract contract
       */
      methodArg(params: CallParams<TestContractArgs['obj']['methodArg(appl)uint64'] | TestContractArgs['tuple']['methodArg(appl)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.methodArg(params)))
        resultMappers.push((v) => client.decodeReturnValue('methodArg(appl)uint64', v))
        return this
      },
      /**
       * Add a nestedTxnArg(pay,appl)uint64 method call against the TestContract contract
       */
      nestedTxnArg(params: CallParams<TestContractArgs['obj']['nestedTxnArg(pay,appl)uint64'] | TestContractArgs['tuple']['nestedTxnArg(pay,appl)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.nestedTxnArg(params)))
        resultMappers.push((v) => client.decodeReturnValue('nestedTxnArg(pay,appl)uint64', v))
        return this
      },
      /**
       * Add a doubleNestedTxnArg(pay,appl,pay,appl)uint64 method call against the TestContract contract
       */
      doubleNestedTxnArg(params: CallParams<TestContractArgs['obj']['doubleNestedTxnArg(pay,appl,pay,appl)uint64'] | TestContractArgs['tuple']['doubleNestedTxnArg(pay,appl,pay,appl)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doubleNestedTxnArg(params)))
        resultMappers.push((v) => client.decodeReturnValue('doubleNestedTxnArg(pay,appl,pay,appl)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the TestContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TestContractComposer
  }
}
export type TestContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the doMath(uint64,uint64,string)uint64 ABI method.
   *
   * A method that takes two numbers and does either addition or subtraction
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doMath(params?: CallParams<TestContractArgs['obj']['doMath(uint64,uint64,string)uint64'] | TestContractArgs['tuple']['doMath(uint64,uint64,string)uint64']>): TestContractComposer<[...TReturns, TestContractReturns['doMath(uint64,uint64,string)uint64'] | undefined]>

  /**
   * Calls the txnArg(pay)address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  txnArg(params?: CallParams<TestContractArgs['obj']['txnArg(pay)address'] | TestContractArgs['tuple']['txnArg(pay)address']>): TestContractComposer<[...TReturns, TestContractReturns['txnArg(pay)address'] | undefined]>

  /**
   * Calls the helloWorld()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  helloWorld(params?: CallParams<TestContractArgs['obj']['helloWorld()string'] | TestContractArgs['tuple']['helloWorld()string']>): TestContractComposer<[...TReturns, TestContractReturns['helloWorld()string'] | undefined]>

  /**
   * Calls the methodArg(appl)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  methodArg(params?: CallParams<TestContractArgs['obj']['methodArg(appl)uint64'] | TestContractArgs['tuple']['methodArg(appl)uint64']>): TestContractComposer<[...TReturns, TestContractReturns['methodArg(appl)uint64'] | undefined]>

  /**
   * Calls the nestedTxnArg(pay,appl)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  nestedTxnArg(params?: CallParams<TestContractArgs['obj']['nestedTxnArg(pay,appl)uint64'] | TestContractArgs['tuple']['nestedTxnArg(pay,appl)uint64']>): TestContractComposer<[...TReturns, TestContractReturns['nestedTxnArg(pay,appl)uint64'] | undefined]>

  /**
   * Calls the doubleNestedTxnArg(pay,appl,pay,appl)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doubleNestedTxnArg(params?: CallParams<TestContractArgs['obj']['doubleNestedTxnArg(pay,appl,pay,appl)uint64'] | TestContractArgs['tuple']['doubleNestedTxnArg(pay,appl,pay,appl)uint64']>): TestContractComposer<[...TReturns, TestContractReturns['doubleNestedTxnArg(pay,appl,pay,appl)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the TestContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TestContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TestContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TestContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TestContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TestContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TestContractComposerResults<TReturns>>
}
export type TestContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

