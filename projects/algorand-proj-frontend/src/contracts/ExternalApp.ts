/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"ExternalApp","desc":"","structs":{},"methods":[{"name":"optInToApplication","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["OptIn"]}},{"name":"dummy","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"error","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"boxWithPayment","args":[{"name":"_payment","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"createAsset","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"senderAssetBalance","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}}],"state":{"schema":{"global":{"ints":1,"bytes":0},"local":{"ints":0,"bytes":1}},"keys":{"global":{"asa":{"key":"YXNh","keyType":"AVMString","valueType":"AVMUint64"}},"local":{"localKey":{"key":"bG9jYWxLZXk=","keyType":"AVMString","valueType":"AVMBytes"}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjg3LjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpjYWxsX09wdEluICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCWVycgoKLy8gb3B0SW5Ub0FwcGxpY2F0aW9uKCl2b2lkCiphYmlfcm91dGVfb3B0SW5Ub0FwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSBvcHRJblRvQXBwbGljYXRpb24oKXZvaWQKCWNhbGxzdWIgb3B0SW5Ub0FwcGxpY2F0aW9uCglpbnQgMQoJcmV0dXJuCgovLyBvcHRJblRvQXBwbGljYXRpb24oKTogdm9pZApvcHRJblRvQXBwbGljYXRpb246Cglwcm90byAwIDAKCgkvLyB0ZXN0cy9leGFtcGxlLWNvbnRyYWN0cy9yZXNvdXJjZS1wYWNrZXIvcmVzb3VyY2UtcGFja2VyLmFsZ28udHM6MTIKCS8vIHRoaXMubG9jYWxLZXkodGhpcy50eG4uc2VuZGVyKS52YWx1ZSA9ICdmb28nCgl0eG4gU2VuZGVyCglieXRlIDB4NmM2ZjYzNjE2YzRiNjU3OSAvLyAibG9jYWxLZXkiCglieXRlIDB4NjY2ZjZmIC8vICJmb28iCglhcHBfbG9jYWxfcHV0CglyZXRzdWIKCi8vIGR1bW15KCl2b2lkCiphYmlfcm91dGVfZHVtbXk6CgkvLyBleGVjdXRlIGR1bW15KCl2b2lkCgljYWxsc3ViIGR1bW15CglpbnQgMQoJcmV0dXJuCgovLyBkdW1teSgpOiB2b2lkCmR1bW15OgoJcHJvdG8gMCAwCglyZXRzdWIKCi8vIGVycm9yKCl2b2lkCiphYmlfcm91dGVfZXJyb3I6CgkvLyBleGVjdXRlIGVycm9yKCl2b2lkCgljYWxsc3ViIGVycm9yCglpbnQgMQoJcmV0dXJuCgovLyBlcnJvcigpOiB2b2lkCmVycm9yOgoJcHJvdG8gMCAwCgllcnIKCi8vIGJveFdpdGhQYXltZW50KHBheSl2b2lkCiphYmlfcm91dGVfYm94V2l0aFBheW1lbnQ6CgkvLyBfcGF5bWVudDogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGJveFdpdGhQYXltZW50KHBheSl2b2lkCgljYWxsc3ViIGJveFdpdGhQYXltZW50CglpbnQgMQoJcmV0dXJuCgovLyBib3hXaXRoUGF5bWVudChfcGF5bWVudDogUGF5VHhuKTogdm9pZApib3hXaXRoUGF5bWVudDoKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2V4YW1wbGUtY29udHJhY3RzL3Jlc291cmNlLXBhY2tlci9yZXNvdXJjZS1wYWNrZXIuYWxnby50czoyMgoJLy8gdGhpcy5ib3hLZXkudmFsdWUgPSAnZm9vJwoJYnl0ZSAweDYyNmY3ODRiNjU3OSAvLyAiYm94S2V5IgoJZHVwCglib3hfZGVsCglwb3AKCWJ5dGUgMHg2NjZmNmYgLy8gImZvbyIKCWJveF9wdXQKCXJldHN1YgoKLy8gY3JlYXRlQXNzZXQoKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBc3NldDoKCS8vIGV4ZWN1dGUgY3JlYXRlQXNzZXQoKXZvaWQKCWNhbGxzdWIgY3JlYXRlQXNzZXQKCWludCAxCglyZXR1cm4KCi8vIGNyZWF0ZUFzc2V0KCk6IHZvaWQKY3JlYXRlQXNzZXQ6Cglwcm90byAwIDAKCgkvLyB0ZXN0cy9leGFtcGxlLWNvbnRyYWN0cy9yZXNvdXJjZS1wYWNrZXIvcmVzb3VyY2UtcGFja2VyLmFsZ28udHM6MjYKCS8vIHRoaXMuYXNhLnZhbHVlID0gc2VuZEFzc2V0Q3JlYXRpb24oewoJLy8gICAgICAgY29uZmlnQXNzZXRUb3RhbDogMSwKCS8vICAgICB9KQoJYnl0ZSAweDYxNzM2MSAvLyAiYXNhIgoJaXR4bl9iZWdpbgoJaW50IGFjZmcKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyB0ZXN0cy9leGFtcGxlLWNvbnRyYWN0cy9yZXNvdXJjZS1wYWNrZXIvcmVzb3VyY2UtcGFja2VyLmFsZ28udHM6MjcKCS8vIGNvbmZpZ0Fzc2V0VG90YWw6IDEKCWludCAxCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VG90YWwKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIENyZWF0ZWRBc3NldElECglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBzZW5kZXJBc3NldEJhbGFuY2UoKXZvaWQKKmFiaV9yb3V0ZV9zZW5kZXJBc3NldEJhbGFuY2U6CgkvLyBleGVjdXRlIHNlbmRlckFzc2V0QmFsYW5jZSgpdm9pZAoJY2FsbHN1YiBzZW5kZXJBc3NldEJhbGFuY2UKCWludCAxCglyZXR1cm4KCi8vIHNlbmRlckFzc2V0QmFsYW5jZSgpOiB2b2lkCnNlbmRlckFzc2V0QmFsYW5jZToKCXByb3RvIDAgMAoKCS8vIHRlc3RzL2V4YW1wbGUtY29udHJhY3RzL3Jlc291cmNlLXBhY2tlci9yZXNvdXJjZS1wYWNrZXIuYWxnby50czozMgoJLy8gYXNzZXJ0KCF0aGlzLnR4bi5zZW5kZXIuaXNPcHRlZEluVG9Bc3NldCh0aGlzLmFzYS52YWx1ZSkpCgl0eG4gU2VuZGVyCglieXRlIDB4NjE3MzYxIC8vICJhc2EiCglhcHBfZ2xvYmFsX2dldAoJYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCglzd2FwCglwb3AKCSEKCWFzc2VydAoJcmV0c3ViCgoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJaW50IDEKCXJldHVybgoKKmNyZWF0ZV9Ob09wOgoJbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCWVycgoKKmNhbGxfTm9PcDoKCW1ldGhvZCAiZHVtbXkoKXZvaWQiCgltZXRob2QgImVycm9yKCl2b2lkIgoJbWV0aG9kICJib3hXaXRoUGF5bWVudChwYXkpdm9pZCIKCW1ldGhvZCAiY3JlYXRlQXNzZXQoKXZvaWQiCgltZXRob2QgInNlbmRlckFzc2V0QmFsYW5jZSgpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfZHVtbXkgKmFiaV9yb3V0ZV9lcnJvciAqYWJpX3JvdXRlX2JveFdpdGhQYXltZW50ICphYmlfcm91dGVfY3JlYXRlQXNzZXQgKmFiaV9yb3V0ZV9zZW5kZXJBc3NldEJhbGFuY2UKCWVycgoKKmNhbGxfT3B0SW46CgltZXRob2QgIm9wdEluVG9BcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfb3B0SW5Ub0FwcGxpY2F0aW9uCgllcnI=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the ExternalApp contract
 */
export type ExternalAppArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'optInToApplication()void': Record<string, never>
    'dummy()void': Record<string, never>
    'error()void': Record<string, never>
    'boxWithPayment(pay)void': {
      _payment: AppMethodCallTransactionArgument
    }
    'createAsset()void': Record<string, never>
    'senderAssetBalance()void': Record<string, never>
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'optInToApplication()void': []
    'dummy()void': []
    'error()void': []
    'boxWithPayment(pay)void': [_payment: AppMethodCallTransactionArgument]
    'createAsset()void': []
    'senderAssetBalance()void': []
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type ExternalAppReturns = {
  'optInToApplication()void': void
  'dummy()void': void
  'error()void': void
  'boxWithPayment(pay)void': void
  'createAsset()void': void
  'senderAssetBalance()void': void
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the ExternalApp smart contract.
 */
export type ExternalAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: ExternalAppArgs['obj']['optInToApplication()void']
      argsTuple: ExternalAppArgs['tuple']['optInToApplication()void']
      returns: ExternalAppReturns['optInToApplication()void']
    }>
    & Record<'dummy()void' | 'dummy', {
      argsObj: ExternalAppArgs['obj']['dummy()void']
      argsTuple: ExternalAppArgs['tuple']['dummy()void']
      returns: ExternalAppReturns['dummy()void']
    }>
    & Record<'error()void' | 'error', {
      argsObj: ExternalAppArgs['obj']['error()void']
      argsTuple: ExternalAppArgs['tuple']['error()void']
      returns: ExternalAppReturns['error()void']
    }>
    & Record<'boxWithPayment(pay)void' | 'boxWithPayment', {
      argsObj: ExternalAppArgs['obj']['boxWithPayment(pay)void']
      argsTuple: ExternalAppArgs['tuple']['boxWithPayment(pay)void']
      returns: ExternalAppReturns['boxWithPayment(pay)void']
    }>
    & Record<'createAsset()void' | 'createAsset', {
      argsObj: ExternalAppArgs['obj']['createAsset()void']
      argsTuple: ExternalAppArgs['tuple']['createAsset()void']
      returns: ExternalAppReturns['createAsset()void']
    }>
    & Record<'senderAssetBalance()void' | 'senderAssetBalance', {
      argsObj: ExternalAppArgs['obj']['senderAssetBalance()void']
      argsTuple: ExternalAppArgs['tuple']['senderAssetBalance()void']
      returns: ExternalAppReturns['senderAssetBalance()void']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: ExternalAppArgs['obj']['createApplication()void']
      argsTuple: ExternalAppArgs['tuple']['createApplication()void']
      returns: ExternalAppReturns['createApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        asa: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        localKey: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ExternalAppSignatures = keyof ExternalAppTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ExternalAppNonVoidMethodSignatures = keyof ExternalAppTypes['methods'] extends infer T ? T extends keyof ExternalAppTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ExternalApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ExternalAppSignatures> = ExternalAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ExternalApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ExternalAppSignatures> = ExternalAppTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ExternalAppTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = ExternalAppTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ExternalAppCreateCallParams =
  | Expand<CallParams<ExternalAppArgs['obj']['createApplication()void'] | ExternalAppArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<ExternalAppArgs['obj']['createApplication()void'] | ExternalAppArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ExternalAppDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ExternalAppCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ExternalApp smart contract
 */
export abstract class ExternalAppParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends ExternalAppCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return ExternalAppParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ExternalApp smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<ExternalAppArgs['obj']['createApplication()void'] | ExternalAppArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the ExternalApp smart contract using the optInToApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optInToApplication(params: CallParams<ExternalAppArgs['obj']['optInToApplication()void'] | ExternalAppArgs['tuple']['optInToApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'optInToApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the dummy()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dummy(params: CallParams<ExternalAppArgs['obj']['dummy()void'] | ExternalAppArgs['tuple']['dummy()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'dummy()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the error()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static error(params: CallParams<ExternalAppArgs['obj']['error()void'] | ExternalAppArgs['tuple']['error()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'error()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the boxWithPayment(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static boxWithPayment(params: CallParams<ExternalAppArgs['obj']['boxWithPayment(pay)void'] | ExternalAppArgs['tuple']['boxWithPayment(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'boxWithPayment(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args._payment],
    }
  }
  /**
   * Constructs a no op call for the createAsset()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createAsset(params: CallParams<ExternalAppArgs['obj']['createAsset()void'] | ExternalAppArgs['tuple']['createAsset()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createAsset()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the senderAssetBalance()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static senderAssetBalance(params: CallParams<ExternalAppArgs['obj']['senderAssetBalance()void'] | ExternalAppArgs['tuple']['senderAssetBalance()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'senderAssetBalance()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ExternalApp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ExternalAppFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ExternalAppFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ExternalAppClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ExternalAppClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ExternalApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ExternalAppDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? ExternalAppParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (ExternalAppCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new ExternalAppClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ExternalApp smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<ExternalAppArgs['obj']['createApplication()void'] | ExternalAppArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(ExternalAppParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ExternalApp smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<ExternalAppArgs['obj']['createApplication()void'] | ExternalAppArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(ExternalAppParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ExternalApp smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<ExternalAppArgs['obj']['createApplication()void'] | ExternalAppArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(ExternalAppParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | ExternalAppReturns['createApplication()void']) }, appClient: new ExternalAppClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ExternalApp smart contract
 */
export class ExternalAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ExternalAppClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ExternalApp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ExternalAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ExternalAppNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ExternalAppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ExternalAppClient> {
    return new ExternalAppClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ExternalAppClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ExternalAppClient> {
    return new ExternalAppClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the ExternalApp smart contract using the `optInToApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optInToApplication: (params: CallParams<ExternalAppArgs['obj']['optInToApplication()void'] | ExternalAppArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.params.optIn(ExternalAppParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the ExternalApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ExternalApp smart contract using the `dummy()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    dummy: (params: CallParams<ExternalAppArgs['obj']['dummy()void'] | ExternalAppArgs['tuple']['dummy()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ExternalAppParamsFactory.dummy(params))
    },

    /**
     * Makes a call to the ExternalApp smart contract using the `error()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    error: (params: CallParams<ExternalAppArgs['obj']['error()void'] | ExternalAppArgs['tuple']['error()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ExternalAppParamsFactory.error(params))
    },

    /**
     * Makes a call to the ExternalApp smart contract using the `boxWithPayment(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    boxWithPayment: (params: CallParams<ExternalAppArgs['obj']['boxWithPayment(pay)void'] | ExternalAppArgs['tuple']['boxWithPayment(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ExternalAppParamsFactory.boxWithPayment(params))
    },

    /**
     * Makes a call to the ExternalApp smart contract using the `createAsset()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createAsset: (params: CallParams<ExternalAppArgs['obj']['createAsset()void'] | ExternalAppArgs['tuple']['createAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ExternalAppParamsFactory.createAsset(params))
    },

    /**
     * Makes a call to the ExternalApp smart contract using the `senderAssetBalance()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    senderAssetBalance: (params: CallParams<ExternalAppArgs['obj']['senderAssetBalance()void'] | ExternalAppArgs['tuple']['senderAssetBalance()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ExternalAppParamsFactory.senderAssetBalance(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the ExternalApp smart contract using the `optInToApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optInToApplication: (params: CallParams<ExternalAppArgs['obj']['optInToApplication()void'] | ExternalAppArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(ExternalAppParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the ExternalApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ExternalApp smart contract using the `dummy()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    dummy: (params: CallParams<ExternalAppArgs['obj']['dummy()void'] | ExternalAppArgs['tuple']['dummy()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ExternalAppParamsFactory.dummy(params))
    },

    /**
     * Makes a call to the ExternalApp smart contract using the `error()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    error: (params: CallParams<ExternalAppArgs['obj']['error()void'] | ExternalAppArgs['tuple']['error()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ExternalAppParamsFactory.error(params))
    },

    /**
     * Makes a call to the ExternalApp smart contract using the `boxWithPayment(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    boxWithPayment: (params: CallParams<ExternalAppArgs['obj']['boxWithPayment(pay)void'] | ExternalAppArgs['tuple']['boxWithPayment(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ExternalAppParamsFactory.boxWithPayment(params))
    },

    /**
     * Makes a call to the ExternalApp smart contract using the `createAsset()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createAsset: (params: CallParams<ExternalAppArgs['obj']['createAsset()void'] | ExternalAppArgs['tuple']['createAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ExternalAppParamsFactory.createAsset(params))
    },

    /**
     * Makes a call to the ExternalApp smart contract using the `senderAssetBalance()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    senderAssetBalance: (params: CallParams<ExternalAppArgs['obj']['senderAssetBalance()void'] | ExternalAppArgs['tuple']['senderAssetBalance()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ExternalAppParamsFactory.senderAssetBalance(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the ExternalApp smart contract using the `optInToApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optInToApplication: async (params: CallParams<ExternalAppArgs['obj']['optInToApplication()void'] | ExternalAppArgs['tuple']['optInToApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(ExternalAppParamsFactory.optIn.optInToApplication(params))
        return {...result, return: result.return as unknown as (undefined | ExternalAppReturns['optInToApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the ExternalApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ExternalApp smart contract using the `dummy()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    dummy: async (params: CallParams<ExternalAppArgs['obj']['dummy()void'] | ExternalAppArgs['tuple']['dummy()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ExternalAppParamsFactory.dummy(params))
      return {...result, return: result.return as unknown as (undefined | ExternalAppReturns['dummy()void'])}
    },

    /**
     * Makes a call to the ExternalApp smart contract using the `error()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    error: async (params: CallParams<ExternalAppArgs['obj']['error()void'] | ExternalAppArgs['tuple']['error()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ExternalAppParamsFactory.error(params))
      return {...result, return: result.return as unknown as (undefined | ExternalAppReturns['error()void'])}
    },

    /**
     * Makes a call to the ExternalApp smart contract using the `boxWithPayment(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    boxWithPayment: async (params: CallParams<ExternalAppArgs['obj']['boxWithPayment(pay)void'] | ExternalAppArgs['tuple']['boxWithPayment(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ExternalAppParamsFactory.boxWithPayment(params))
      return {...result, return: result.return as unknown as (undefined | ExternalAppReturns['boxWithPayment(pay)void'])}
    },

    /**
     * Makes a call to the ExternalApp smart contract using the `createAsset()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createAsset: async (params: CallParams<ExternalAppArgs['obj']['createAsset()void'] | ExternalAppArgs['tuple']['createAsset()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ExternalAppParamsFactory.createAsset(params))
      return {...result, return: result.return as unknown as (undefined | ExternalAppReturns['createAsset()void'])}
    },

    /**
     * Makes a call to the ExternalApp smart contract using the `senderAssetBalance()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    senderAssetBalance: async (params: CallParams<ExternalAppArgs['obj']['senderAssetBalance()void'] | ExternalAppArgs['tuple']['senderAssetBalance()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ExternalAppParamsFactory.senderAssetBalance(params))
      return {...result, return: result.return as unknown as (undefined | ExternalAppReturns['senderAssetBalance()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ExternalAppClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ExternalApp app
   */
  state = {
    /**
     * Methods to access global state for the current ExternalApp app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          asa: result.asa,
        }
      },
      /**
       * Get the current value of the asa key in global state
       */
      asa: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asa")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current ExternalApp app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            localKey: new BinaryStateValue(result.localKey),
          }
        },
        /**
         * Get the current value of the localKey key in local state
         */
        localKey: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.local(encodedAddress).getValue("localKey")) as Uint8Array | undefined) },
      }
    },
  }

  public newGroup(): ExternalAppComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a dummy()void method call against the ExternalApp contract
       */
      dummy(params: CallParams<ExternalAppArgs['obj']['dummy()void'] | ExternalAppArgs['tuple']['dummy()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dummy(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a error()void method call against the ExternalApp contract
       */
      error(params: CallParams<ExternalAppArgs['obj']['error()void'] | ExternalAppArgs['tuple']['error()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.error(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a boxWithPayment(pay)void method call against the ExternalApp contract
       */
      boxWithPayment(params: CallParams<ExternalAppArgs['obj']['boxWithPayment(pay)void'] | ExternalAppArgs['tuple']['boxWithPayment(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.boxWithPayment(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a createAsset()void method call against the ExternalApp contract
       */
      createAsset(params: CallParams<ExternalAppArgs['obj']['createAsset()void'] | ExternalAppArgs['tuple']['createAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a senderAssetBalance()void method call against the ExternalApp contract
       */
      senderAssetBalance(params: CallParams<ExternalAppArgs['obj']['senderAssetBalance()void'] | ExternalAppArgs['tuple']['senderAssetBalance()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.senderAssetBalance(params)))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        return {
          optInToApplication: (params: CallParams<ExternalAppArgs['obj']['optInToApplication()void'] | ExternalAppArgs['tuple']['optInToApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optInToApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the ExternalApp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ExternalAppComposer
  }
}
export type ExternalAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the dummy()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dummy(params?: CallParams<ExternalAppArgs['obj']['dummy()void'] | ExternalAppArgs['tuple']['dummy()void']>): ExternalAppComposer<[...TReturns, ExternalAppReturns['dummy()void'] | undefined]>

  /**
   * Calls the error()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  error(params?: CallParams<ExternalAppArgs['obj']['error()void'] | ExternalAppArgs['tuple']['error()void']>): ExternalAppComposer<[...TReturns, ExternalAppReturns['error()void'] | undefined]>

  /**
   * Calls the boxWithPayment(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  boxWithPayment(params?: CallParams<ExternalAppArgs['obj']['boxWithPayment(pay)void'] | ExternalAppArgs['tuple']['boxWithPayment(pay)void']>): ExternalAppComposer<[...TReturns, ExternalAppReturns['boxWithPayment(pay)void'] | undefined]>

  /**
   * Calls the createAsset()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAsset(params?: CallParams<ExternalAppArgs['obj']['createAsset()void'] | ExternalAppArgs['tuple']['createAsset()void']>): ExternalAppComposer<[...TReturns, ExternalAppReturns['createAsset()void'] | undefined]>

  /**
   * Calls the senderAssetBalance()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  senderAssetBalance(params?: CallParams<ExternalAppArgs['obj']['senderAssetBalance()void'] | ExternalAppArgs['tuple']['senderAssetBalance()void']>): ExternalAppComposer<[...TReturns, ExternalAppReturns['senderAssetBalance()void'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the ExternalApp smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(params?: CallParams<ExternalAppArgs['obj']['optInToApplication()void'] | ExternalAppArgs['tuple']['optInToApplication()void']>): ExternalAppComposer<[...TReturns, ExternalAppReturns['optInToApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the ExternalApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ExternalAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ExternalAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ExternalAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ExternalAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ExternalAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ExternalAppComposerResults<TReturns>>
}
export type ExternalAppComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

