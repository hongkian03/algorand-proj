/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"ResourcePackerv9","desc":"","structs":{},"methods":[{"name":"bootstrap","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"addressBalance","args":[{"name":"addr","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"smallBox","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"mediumBox","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"externalAppCall","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"assetTotal","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"hasAsset","args":[{"name":"addr","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"externalLocal","args":[{"name":"addr","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}}],"state":{"schema":{"global":{"ints":2,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"externalAppID":{"key":"ZXh0ZXJuYWxBcHBJRA==","keyType":"AVMString","valueType":"AVMUint64"},"asa":{"key":"YXNh","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDk="},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the ResourcePackerv9 contract
 */
export type ResourcePackerv9Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'bootstrap()void': Record<string, never>
    'addressBalance(address)void': {
      addr: string
    }
    'smallBox()void': Record<string, never>
    'mediumBox()void': Record<string, never>
    'externalAppCall()void': Record<string, never>
    'assetTotal()void': Record<string, never>
    'hasAsset(address)void': {
      addr: string
    }
    'externalLocal(address)void': {
      addr: string
    }
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'bootstrap()void': []
    'addressBalance(address)void': [addr: string]
    'smallBox()void': []
    'mediumBox()void': []
    'externalAppCall()void': []
    'assetTotal()void': []
    'hasAsset(address)void': [addr: string]
    'externalLocal(address)void': [addr: string]
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type ResourcePackerv9Returns = {
  'bootstrap()void': void
  'addressBalance(address)void': void
  'smallBox()void': void
  'mediumBox()void': void
  'externalAppCall()void': void
  'assetTotal()void': void
  'hasAsset(address)void': void
  'externalLocal(address)void': void
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the ResourcePackerv9 smart contract.
 */
export type ResourcePackerv9Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap()void' | 'bootstrap', {
      argsObj: ResourcePackerv9Args['obj']['bootstrap()void']
      argsTuple: ResourcePackerv9Args['tuple']['bootstrap()void']
      returns: ResourcePackerv9Returns['bootstrap()void']
    }>
    & Record<'addressBalance(address)void' | 'addressBalance', {
      argsObj: ResourcePackerv9Args['obj']['addressBalance(address)void']
      argsTuple: ResourcePackerv9Args['tuple']['addressBalance(address)void']
      returns: ResourcePackerv9Returns['addressBalance(address)void']
    }>
    & Record<'smallBox()void' | 'smallBox', {
      argsObj: ResourcePackerv9Args['obj']['smallBox()void']
      argsTuple: ResourcePackerv9Args['tuple']['smallBox()void']
      returns: ResourcePackerv9Returns['smallBox()void']
    }>
    & Record<'mediumBox()void' | 'mediumBox', {
      argsObj: ResourcePackerv9Args['obj']['mediumBox()void']
      argsTuple: ResourcePackerv9Args['tuple']['mediumBox()void']
      returns: ResourcePackerv9Returns['mediumBox()void']
    }>
    & Record<'externalAppCall()void' | 'externalAppCall', {
      argsObj: ResourcePackerv9Args['obj']['externalAppCall()void']
      argsTuple: ResourcePackerv9Args['tuple']['externalAppCall()void']
      returns: ResourcePackerv9Returns['externalAppCall()void']
    }>
    & Record<'assetTotal()void' | 'assetTotal', {
      argsObj: ResourcePackerv9Args['obj']['assetTotal()void']
      argsTuple: ResourcePackerv9Args['tuple']['assetTotal()void']
      returns: ResourcePackerv9Returns['assetTotal()void']
    }>
    & Record<'hasAsset(address)void' | 'hasAsset', {
      argsObj: ResourcePackerv9Args['obj']['hasAsset(address)void']
      argsTuple: ResourcePackerv9Args['tuple']['hasAsset(address)void']
      returns: ResourcePackerv9Returns['hasAsset(address)void']
    }>
    & Record<'externalLocal(address)void' | 'externalLocal', {
      argsObj: ResourcePackerv9Args['obj']['externalLocal(address)void']
      argsTuple: ResourcePackerv9Args['tuple']['externalLocal(address)void']
      returns: ResourcePackerv9Returns['externalLocal(address)void']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: ResourcePackerv9Args['obj']['createApplication()void']
      argsTuple: ResourcePackerv9Args['tuple']['createApplication()void']
      returns: ResourcePackerv9Returns['createApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        externalAppId: bigint
        asa: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ResourcePackerv9Signatures = keyof ResourcePackerv9Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ResourcePackerv9NonVoidMethodSignatures = keyof ResourcePackerv9Types['methods'] extends infer T ? T extends keyof ResourcePackerv9Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ResourcePackerv9 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ResourcePackerv9Signatures> = ResourcePackerv9Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ResourcePackerv9 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ResourcePackerv9Signatures> = ResourcePackerv9Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ResourcePackerv9Types['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ResourcePackerv9CreateCallParams =
  | Expand<CallParams<ResourcePackerv9Args['obj']['createApplication()void'] | ResourcePackerv9Args['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<ResourcePackerv9Args['obj']['createApplication()void'] | ResourcePackerv9Args['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ResourcePackerv9DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ResourcePackerv9CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ResourcePackerv9 smart contract
 */
export abstract class ResourcePackerv9ParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends ResourcePackerv9CreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return ResourcePackerv9ParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ResourcePackerv9 smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<ResourcePackerv9Args['obj']['createApplication()void'] | ResourcePackerv9Args['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<ResourcePackerv9Args['obj']['bootstrap()void'] | ResourcePackerv9Args['tuple']['bootstrap()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the addressBalance(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addressBalance(params: CallParams<ResourcePackerv9Args['obj']['addressBalance(address)void'] | ResourcePackerv9Args['tuple']['addressBalance(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addressBalance(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addr],
    }
  }
  /**
   * Constructs a no op call for the smallBox()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static smallBox(params: CallParams<ResourcePackerv9Args['obj']['smallBox()void'] | ResourcePackerv9Args['tuple']['smallBox()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'smallBox()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the mediumBox()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mediumBox(params: CallParams<ResourcePackerv9Args['obj']['mediumBox()void'] | ResourcePackerv9Args['tuple']['mediumBox()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mediumBox()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the externalAppCall()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static externalAppCall(params: CallParams<ResourcePackerv9Args['obj']['externalAppCall()void'] | ResourcePackerv9Args['tuple']['externalAppCall()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'externalAppCall()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the assetTotal()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetTotal(params: CallParams<ResourcePackerv9Args['obj']['assetTotal()void'] | ResourcePackerv9Args['tuple']['assetTotal()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assetTotal()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the hasAsset(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hasAsset(params: CallParams<ResourcePackerv9Args['obj']['hasAsset(address)void'] | ResourcePackerv9Args['tuple']['hasAsset(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hasAsset(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addr],
    }
  }
  /**
   * Constructs a no op call for the externalLocal(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static externalLocal(params: CallParams<ResourcePackerv9Args['obj']['externalLocal(address)void'] | ResourcePackerv9Args['tuple']['externalLocal(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'externalLocal(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addr],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ResourcePackerv9 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ResourcePackerv9Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ResourcePackerv9Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ResourcePackerv9Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ResourcePackerv9Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ResourcePackerv9 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ResourcePackerv9DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? ResourcePackerv9ParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (ResourcePackerv9CreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new ResourcePackerv9Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ResourcePackerv9 smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<ResourcePackerv9Args['obj']['createApplication()void'] | ResourcePackerv9Args['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(ResourcePackerv9ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ResourcePackerv9 smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<ResourcePackerv9Args['obj']['createApplication()void'] | ResourcePackerv9Args['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(ResourcePackerv9ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ResourcePackerv9 smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<ResourcePackerv9Args['obj']['createApplication()void'] | ResourcePackerv9Args['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(ResourcePackerv9ParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | ResourcePackerv9Returns['createApplication()void']) }, appClient: new ResourcePackerv9Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ResourcePackerv9 smart contract
 */
export class ResourcePackerv9Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ResourcePackerv9Client`
   *
   * @param appClient An `AppClient` instance which has been created with the ResourcePackerv9 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ResourcePackerv9Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ResourcePackerv9NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ResourcePackerv9Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ResourcePackerv9Client> {
    return new ResourcePackerv9Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ResourcePackerv9Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ResourcePackerv9Client> {
    return new ResourcePackerv9Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ResourcePackerv9 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `bootstrap()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<ResourcePackerv9Args['obj']['bootstrap()void'] | ResourcePackerv9Args['tuple']['bootstrap()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ResourcePackerv9ParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `addressBalance(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addressBalance: (params: CallParams<ResourcePackerv9Args['obj']['addressBalance(address)void'] | ResourcePackerv9Args['tuple']['addressBalance(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ResourcePackerv9ParamsFactory.addressBalance(params))
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `smallBox()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    smallBox: (params: CallParams<ResourcePackerv9Args['obj']['smallBox()void'] | ResourcePackerv9Args['tuple']['smallBox()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ResourcePackerv9ParamsFactory.smallBox(params))
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `mediumBox()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mediumBox: (params: CallParams<ResourcePackerv9Args['obj']['mediumBox()void'] | ResourcePackerv9Args['tuple']['mediumBox()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ResourcePackerv9ParamsFactory.mediumBox(params))
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `externalAppCall()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    externalAppCall: (params: CallParams<ResourcePackerv9Args['obj']['externalAppCall()void'] | ResourcePackerv9Args['tuple']['externalAppCall()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ResourcePackerv9ParamsFactory.externalAppCall(params))
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `assetTotal()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetTotal: (params: CallParams<ResourcePackerv9Args['obj']['assetTotal()void'] | ResourcePackerv9Args['tuple']['assetTotal()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ResourcePackerv9ParamsFactory.assetTotal(params))
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `hasAsset(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hasAsset: (params: CallParams<ResourcePackerv9Args['obj']['hasAsset(address)void'] | ResourcePackerv9Args['tuple']['hasAsset(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ResourcePackerv9ParamsFactory.hasAsset(params))
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `externalLocal(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    externalLocal: (params: CallParams<ResourcePackerv9Args['obj']['externalLocal(address)void'] | ResourcePackerv9Args['tuple']['externalLocal(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ResourcePackerv9ParamsFactory.externalLocal(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ResourcePackerv9 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `bootstrap()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<ResourcePackerv9Args['obj']['bootstrap()void'] | ResourcePackerv9Args['tuple']['bootstrap()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ResourcePackerv9ParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `addressBalance(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addressBalance: (params: CallParams<ResourcePackerv9Args['obj']['addressBalance(address)void'] | ResourcePackerv9Args['tuple']['addressBalance(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ResourcePackerv9ParamsFactory.addressBalance(params))
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `smallBox()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    smallBox: (params: CallParams<ResourcePackerv9Args['obj']['smallBox()void'] | ResourcePackerv9Args['tuple']['smallBox()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ResourcePackerv9ParamsFactory.smallBox(params))
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `mediumBox()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mediumBox: (params: CallParams<ResourcePackerv9Args['obj']['mediumBox()void'] | ResourcePackerv9Args['tuple']['mediumBox()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ResourcePackerv9ParamsFactory.mediumBox(params))
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `externalAppCall()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    externalAppCall: (params: CallParams<ResourcePackerv9Args['obj']['externalAppCall()void'] | ResourcePackerv9Args['tuple']['externalAppCall()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ResourcePackerv9ParamsFactory.externalAppCall(params))
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `assetTotal()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetTotal: (params: CallParams<ResourcePackerv9Args['obj']['assetTotal()void'] | ResourcePackerv9Args['tuple']['assetTotal()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ResourcePackerv9ParamsFactory.assetTotal(params))
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `hasAsset(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hasAsset: (params: CallParams<ResourcePackerv9Args['obj']['hasAsset(address)void'] | ResourcePackerv9Args['tuple']['hasAsset(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ResourcePackerv9ParamsFactory.hasAsset(params))
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `externalLocal(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    externalLocal: (params: CallParams<ResourcePackerv9Args['obj']['externalLocal(address)void'] | ResourcePackerv9Args['tuple']['externalLocal(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ResourcePackerv9ParamsFactory.externalLocal(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ResourcePackerv9 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `bootstrap()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<ResourcePackerv9Args['obj']['bootstrap()void'] | ResourcePackerv9Args['tuple']['bootstrap()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ResourcePackerv9ParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | ResourcePackerv9Returns['bootstrap()void'])}
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `addressBalance(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addressBalance: async (params: CallParams<ResourcePackerv9Args['obj']['addressBalance(address)void'] | ResourcePackerv9Args['tuple']['addressBalance(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ResourcePackerv9ParamsFactory.addressBalance(params))
      return {...result, return: result.return as unknown as (undefined | ResourcePackerv9Returns['addressBalance(address)void'])}
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `smallBox()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    smallBox: async (params: CallParams<ResourcePackerv9Args['obj']['smallBox()void'] | ResourcePackerv9Args['tuple']['smallBox()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ResourcePackerv9ParamsFactory.smallBox(params))
      return {...result, return: result.return as unknown as (undefined | ResourcePackerv9Returns['smallBox()void'])}
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `mediumBox()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mediumBox: async (params: CallParams<ResourcePackerv9Args['obj']['mediumBox()void'] | ResourcePackerv9Args['tuple']['mediumBox()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ResourcePackerv9ParamsFactory.mediumBox(params))
      return {...result, return: result.return as unknown as (undefined | ResourcePackerv9Returns['mediumBox()void'])}
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `externalAppCall()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    externalAppCall: async (params: CallParams<ResourcePackerv9Args['obj']['externalAppCall()void'] | ResourcePackerv9Args['tuple']['externalAppCall()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ResourcePackerv9ParamsFactory.externalAppCall(params))
      return {...result, return: result.return as unknown as (undefined | ResourcePackerv9Returns['externalAppCall()void'])}
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `assetTotal()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetTotal: async (params: CallParams<ResourcePackerv9Args['obj']['assetTotal()void'] | ResourcePackerv9Args['tuple']['assetTotal()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ResourcePackerv9ParamsFactory.assetTotal(params))
      return {...result, return: result.return as unknown as (undefined | ResourcePackerv9Returns['assetTotal()void'])}
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `hasAsset(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hasAsset: async (params: CallParams<ResourcePackerv9Args['obj']['hasAsset(address)void'] | ResourcePackerv9Args['tuple']['hasAsset(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ResourcePackerv9ParamsFactory.hasAsset(params))
      return {...result, return: result.return as unknown as (undefined | ResourcePackerv9Returns['hasAsset(address)void'])}
    },

    /**
     * Makes a call to the ResourcePackerv9 smart contract using the `externalLocal(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    externalLocal: async (params: CallParams<ResourcePackerv9Args['obj']['externalLocal(address)void'] | ResourcePackerv9Args['tuple']['externalLocal(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ResourcePackerv9ParamsFactory.externalLocal(params))
      return {...result, return: result.return as unknown as (undefined | ResourcePackerv9Returns['externalLocal(address)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ResourcePackerv9Client(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ResourcePackerv9 app
   */
  state = {
    /**
     * Methods to access global state for the current ResourcePackerv9 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          externalAppId: result.externalAppID,
          asa: result.asa,
        }
      },
      /**
       * Get the current value of the externalAppID key in global state
       */
      externalAppId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("externalAppID")) as bigint | undefined },
      /**
       * Get the current value of the asa key in global state
       */
      asa: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asa")) as bigint | undefined },
    },
  }

  public newGroup(): ResourcePackerv9Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap()void method call against the ResourcePackerv9 contract
       */
      bootstrap(params: CallParams<ResourcePackerv9Args['obj']['bootstrap()void'] | ResourcePackerv9Args['tuple']['bootstrap()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addressBalance(address)void method call against the ResourcePackerv9 contract
       */
      addressBalance(params: CallParams<ResourcePackerv9Args['obj']['addressBalance(address)void'] | ResourcePackerv9Args['tuple']['addressBalance(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addressBalance(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a smallBox()void method call against the ResourcePackerv9 contract
       */
      smallBox(params: CallParams<ResourcePackerv9Args['obj']['smallBox()void'] | ResourcePackerv9Args['tuple']['smallBox()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.smallBox(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a mediumBox()void method call against the ResourcePackerv9 contract
       */
      mediumBox(params: CallParams<ResourcePackerv9Args['obj']['mediumBox()void'] | ResourcePackerv9Args['tuple']['mediumBox()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mediumBox(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a externalAppCall()void method call against the ResourcePackerv9 contract
       */
      externalAppCall(params: CallParams<ResourcePackerv9Args['obj']['externalAppCall()void'] | ResourcePackerv9Args['tuple']['externalAppCall()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.externalAppCall(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a assetTotal()void method call against the ResourcePackerv9 contract
       */
      assetTotal(params: CallParams<ResourcePackerv9Args['obj']['assetTotal()void'] | ResourcePackerv9Args['tuple']['assetTotal()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetTotal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a hasAsset(address)void method call against the ResourcePackerv9 contract
       */
      hasAsset(params: CallParams<ResourcePackerv9Args['obj']['hasAsset(address)void'] | ResourcePackerv9Args['tuple']['hasAsset(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hasAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a externalLocal(address)void method call against the ResourcePackerv9 contract
       */
      externalLocal(params: CallParams<ResourcePackerv9Args['obj']['externalLocal(address)void'] | ResourcePackerv9Args['tuple']['externalLocal(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.externalLocal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the ResourcePackerv9 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ResourcePackerv9Composer
  }
}
export type ResourcePackerv9Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<ResourcePackerv9Args['obj']['bootstrap()void'] | ResourcePackerv9Args['tuple']['bootstrap()void']>): ResourcePackerv9Composer<[...TReturns, ResourcePackerv9Returns['bootstrap()void'] | undefined]>

  /**
   * Calls the addressBalance(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addressBalance(params?: CallParams<ResourcePackerv9Args['obj']['addressBalance(address)void'] | ResourcePackerv9Args['tuple']['addressBalance(address)void']>): ResourcePackerv9Composer<[...TReturns, ResourcePackerv9Returns['addressBalance(address)void'] | undefined]>

  /**
   * Calls the smallBox()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  smallBox(params?: CallParams<ResourcePackerv9Args['obj']['smallBox()void'] | ResourcePackerv9Args['tuple']['smallBox()void']>): ResourcePackerv9Composer<[...TReturns, ResourcePackerv9Returns['smallBox()void'] | undefined]>

  /**
   * Calls the mediumBox()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mediumBox(params?: CallParams<ResourcePackerv9Args['obj']['mediumBox()void'] | ResourcePackerv9Args['tuple']['mediumBox()void']>): ResourcePackerv9Composer<[...TReturns, ResourcePackerv9Returns['mediumBox()void'] | undefined]>

  /**
   * Calls the externalAppCall()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  externalAppCall(params?: CallParams<ResourcePackerv9Args['obj']['externalAppCall()void'] | ResourcePackerv9Args['tuple']['externalAppCall()void']>): ResourcePackerv9Composer<[...TReturns, ResourcePackerv9Returns['externalAppCall()void'] | undefined]>

  /**
   * Calls the assetTotal()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetTotal(params?: CallParams<ResourcePackerv9Args['obj']['assetTotal()void'] | ResourcePackerv9Args['tuple']['assetTotal()void']>): ResourcePackerv9Composer<[...TReturns, ResourcePackerv9Returns['assetTotal()void'] | undefined]>

  /**
   * Calls the hasAsset(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hasAsset(params?: CallParams<ResourcePackerv9Args['obj']['hasAsset(address)void'] | ResourcePackerv9Args['tuple']['hasAsset(address)void']>): ResourcePackerv9Composer<[...TReturns, ResourcePackerv9Returns['hasAsset(address)void'] | undefined]>

  /**
   * Calls the externalLocal(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  externalLocal(params?: CallParams<ResourcePackerv9Args['obj']['externalLocal(address)void'] | ResourcePackerv9Args['tuple']['externalLocal(address)void']>): ResourcePackerv9Composer<[...TReturns, ResourcePackerv9Returns['externalLocal(address)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ResourcePackerv9 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ResourcePackerv9Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ResourcePackerv9Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ResourcePackerv9ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ResourcePackerv9ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ResourcePackerv9ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ResourcePackerv9ComposerResults<TReturns>>
}
export type ResourcePackerv9ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

