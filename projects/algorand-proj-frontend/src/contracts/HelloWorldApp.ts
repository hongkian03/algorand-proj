/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"HelloWorldApp","structs":{},"methods":[{"name":"version","args":[],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"readonly","args":[{"name":"error","type":"uint64"}],"returns":{"type":"void"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"set_box","args":[{"name":"name","type":"byte[4]"},{"name":"value","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_box","args":[{"name":"name","type":"byte[4]"}],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_box_readonly","args":[{"name":"name","type":"byte[4]"}],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"update","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"update_args","args":[{"name":"check","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"delete","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"delete_args","args":[{"name":"check","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"create_opt_in","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":["OptIn"],"call":[]}},{"name":"update_greeting","args":[{"name":"greeting","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"create","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"create_args","args":[{"name":"greeting","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"hello","args":[{"name":"name","type":"string"}],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"hello_remember","args":[{"name":"name","type":"string"}],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_last","args":[],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"opt_in","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["OptIn"]}},{"name":"opt_in_args","args":[{"name":"check","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["OptIn"]}},{"name":"close_out","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["CloseOut"]}},{"name":"close_out_args","args":[{"name":"check","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["CloseOut"]}},{"name":"call_with_payment","args":[{"name":"payment","type":"pay"}],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":0,"bytes":1},"local":{"ints":0,"bytes":1}},"keys":{"global":{"greeting":{"key":"Z3JlZXRpbmc=","keyType":"AVMString","valueType":"AVMBytes","desc":""}},"local":{"last":{"key":"bGFzdA==","keyType":"AVMString","valueType":"AVMBytes","desc":""}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDEKY2FsbHN1YiBjbGVhcnN0YXRlXzAKaW50Y18wIC8vIDEKcmV0dXJuCgovLyBjbGVhcl9zdGF0ZQpjbGVhcnN0YXRlXzA6CnByb3RvIDAgMAppbnRjXzAgLy8gMQpyZXR1cm4="},"bareActions":{"create":["NoOp"],"call":["CloseOut","DeleteApplication","OptIn","UpdateApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the HelloWorldApp contract
 */
export type HelloWorldAppArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'version()uint64': Record<string, never>
    'readonly(uint64)void': {
      error: bigint | number
    }
    'set_box(byte[4],string)void': {
      name: Uint8Array
      value: string
    }
    'get_box(byte[4])string': {
      name: Uint8Array
    }
    'get_box_readonly(byte[4])string': {
      name: Uint8Array
    }
    'update()void': Record<string, never>
    'update_args(string)void': {
      check: string
    }
    'delete()void': Record<string, never>
    'delete_args(string)void': {
      check: string
    }
    'create_opt_in()void': Record<string, never>
    'update_greeting(string)void': {
      greeting: string
    }
    'create()void': Record<string, never>
    'create_args(string)void': {
      greeting: string
    }
    'hello(string)string': {
      name: string
    }
    'hello_remember(string)string': {
      name: string
    }
    'get_last()string': Record<string, never>
    'opt_in()void': Record<string, never>
    'opt_in_args(string)void': {
      check: string
    }
    'close_out()void': Record<string, never>
    'close_out_args(string)void': {
      check: string
    }
    'call_with_payment(pay)string': {
      payment: AppMethodCallTransactionArgument
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'version()uint64': []
    'readonly(uint64)void': [error: bigint | number]
    'set_box(byte[4],string)void': [name: Uint8Array, value: string]
    'get_box(byte[4])string': [name: Uint8Array]
    'get_box_readonly(byte[4])string': [name: Uint8Array]
    'update()void': []
    'update_args(string)void': [check: string]
    'delete()void': []
    'delete_args(string)void': [check: string]
    'create_opt_in()void': []
    'update_greeting(string)void': [greeting: string]
    'create()void': []
    'create_args(string)void': [greeting: string]
    'hello(string)string': [name: string]
    'hello_remember(string)string': [name: string]
    'get_last()string': []
    'opt_in()void': []
    'opt_in_args(string)void': [check: string]
    'close_out()void': []
    'close_out_args(string)void': [check: string]
    'call_with_payment(pay)string': [payment: AppMethodCallTransactionArgument]
  }
}

/**
 * The return type for each method
 */
export type HelloWorldAppReturns = {
  'version()uint64': bigint
  'readonly(uint64)void': void
  'set_box(byte[4],string)void': void
  'get_box(byte[4])string': string
  'get_box_readonly(byte[4])string': string
  'update()void': void
  'update_args(string)void': void
  'delete()void': void
  'delete_args(string)void': void
  'create_opt_in()void': void
  'update_greeting(string)void': void
  'create()void': void
  'create_args(string)void': void
  'hello(string)string': string
  'hello_remember(string)string': string
  'get_last()string': string
  'opt_in()void': void
  'opt_in_args(string)void': void
  'close_out()void': void
  'close_out_args(string)void': void
  'call_with_payment(pay)string': string
}

/**
 * Defines the types of available calls and state of the HelloWorldApp smart contract.
 */
export type HelloWorldAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'version()uint64' | 'version', {
      argsObj: HelloWorldAppArgs['obj']['version()uint64']
      argsTuple: HelloWorldAppArgs['tuple']['version()uint64']
      returns: HelloWorldAppReturns['version()uint64']
    }>
    & Record<'readonly(uint64)void' | 'readonly', {
      argsObj: HelloWorldAppArgs['obj']['readonly(uint64)void']
      argsTuple: HelloWorldAppArgs['tuple']['readonly(uint64)void']
      returns: HelloWorldAppReturns['readonly(uint64)void']
    }>
    & Record<'set_box(byte[4],string)void' | 'set_box', {
      argsObj: HelloWorldAppArgs['obj']['set_box(byte[4],string)void']
      argsTuple: HelloWorldAppArgs['tuple']['set_box(byte[4],string)void']
      returns: HelloWorldAppReturns['set_box(byte[4],string)void']
    }>
    & Record<'get_box(byte[4])string' | 'get_box', {
      argsObj: HelloWorldAppArgs['obj']['get_box(byte[4])string']
      argsTuple: HelloWorldAppArgs['tuple']['get_box(byte[4])string']
      returns: HelloWorldAppReturns['get_box(byte[4])string']
    }>
    & Record<'get_box_readonly(byte[4])string' | 'get_box_readonly', {
      argsObj: HelloWorldAppArgs['obj']['get_box_readonly(byte[4])string']
      argsTuple: HelloWorldAppArgs['tuple']['get_box_readonly(byte[4])string']
      returns: HelloWorldAppReturns['get_box_readonly(byte[4])string']
    }>
    & Record<'update()void' | 'update', {
      argsObj: HelloWorldAppArgs['obj']['update()void']
      argsTuple: HelloWorldAppArgs['tuple']['update()void']
      returns: HelloWorldAppReturns['update()void']
    }>
    & Record<'update_args(string)void' | 'update_args', {
      argsObj: HelloWorldAppArgs['obj']['update_args(string)void']
      argsTuple: HelloWorldAppArgs['tuple']['update_args(string)void']
      returns: HelloWorldAppReturns['update_args(string)void']
    }>
    & Record<'delete()void' | 'delete', {
      argsObj: HelloWorldAppArgs['obj']['delete()void']
      argsTuple: HelloWorldAppArgs['tuple']['delete()void']
      returns: HelloWorldAppReturns['delete()void']
    }>
    & Record<'delete_args(string)void' | 'delete_args', {
      argsObj: HelloWorldAppArgs['obj']['delete_args(string)void']
      argsTuple: HelloWorldAppArgs['tuple']['delete_args(string)void']
      returns: HelloWorldAppReturns['delete_args(string)void']
    }>
    & Record<'create_opt_in()void' | 'create_opt_in', {
      argsObj: HelloWorldAppArgs['obj']['create_opt_in()void']
      argsTuple: HelloWorldAppArgs['tuple']['create_opt_in()void']
      returns: HelloWorldAppReturns['create_opt_in()void']
    }>
    & Record<'update_greeting(string)void' | 'update_greeting', {
      argsObj: HelloWorldAppArgs['obj']['update_greeting(string)void']
      argsTuple: HelloWorldAppArgs['tuple']['update_greeting(string)void']
      returns: HelloWorldAppReturns['update_greeting(string)void']
    }>
    & Record<'create()void' | 'create', {
      argsObj: HelloWorldAppArgs['obj']['create()void']
      argsTuple: HelloWorldAppArgs['tuple']['create()void']
      returns: HelloWorldAppReturns['create()void']
    }>
    & Record<'create_args(string)void' | 'create_args', {
      argsObj: HelloWorldAppArgs['obj']['create_args(string)void']
      argsTuple: HelloWorldAppArgs['tuple']['create_args(string)void']
      returns: HelloWorldAppReturns['create_args(string)void']
    }>
    & Record<'hello(string)string' | 'hello', {
      argsObj: HelloWorldAppArgs['obj']['hello(string)string']
      argsTuple: HelloWorldAppArgs['tuple']['hello(string)string']
      returns: HelloWorldAppReturns['hello(string)string']
    }>
    & Record<'hello_remember(string)string' | 'hello_remember', {
      argsObj: HelloWorldAppArgs['obj']['hello_remember(string)string']
      argsTuple: HelloWorldAppArgs['tuple']['hello_remember(string)string']
      returns: HelloWorldAppReturns['hello_remember(string)string']
    }>
    & Record<'get_last()string' | 'get_last', {
      argsObj: HelloWorldAppArgs['obj']['get_last()string']
      argsTuple: HelloWorldAppArgs['tuple']['get_last()string']
      returns: HelloWorldAppReturns['get_last()string']
    }>
    & Record<'opt_in()void' | 'opt_in', {
      argsObj: HelloWorldAppArgs['obj']['opt_in()void']
      argsTuple: HelloWorldAppArgs['tuple']['opt_in()void']
      returns: HelloWorldAppReturns['opt_in()void']
    }>
    & Record<'opt_in_args(string)void' | 'opt_in_args', {
      argsObj: HelloWorldAppArgs['obj']['opt_in_args(string)void']
      argsTuple: HelloWorldAppArgs['tuple']['opt_in_args(string)void']
      returns: HelloWorldAppReturns['opt_in_args(string)void']
    }>
    & Record<'close_out()void' | 'close_out', {
      argsObj: HelloWorldAppArgs['obj']['close_out()void']
      argsTuple: HelloWorldAppArgs['tuple']['close_out()void']
      returns: HelloWorldAppReturns['close_out()void']
    }>
    & Record<'close_out_args(string)void' | 'close_out_args', {
      argsObj: HelloWorldAppArgs['obj']['close_out_args(string)void']
      argsTuple: HelloWorldAppArgs['tuple']['close_out_args(string)void']
      returns: HelloWorldAppReturns['close_out_args(string)void']
    }>
    & Record<'call_with_payment(pay)string' | 'call_with_payment', {
      argsObj: HelloWorldAppArgs['obj']['call_with_payment(pay)string']
      argsTuple: HelloWorldAppArgs['tuple']['call_with_payment(pay)string']
      returns: HelloWorldAppReturns['call_with_payment(pay)string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        greeting: BinaryState
      }
      maps: {}
    }
    local: {
      keys: {
        last: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type HelloWorldAppSignatures = keyof HelloWorldAppTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type HelloWorldAppNonVoidMethodSignatures = keyof HelloWorldAppTypes['methods'] extends infer T ? T extends keyof HelloWorldAppTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the HelloWorldApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends HelloWorldAppSignatures> = HelloWorldAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the HelloWorldApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends HelloWorldAppSignatures> = HelloWorldAppTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = HelloWorldAppTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = HelloWorldAppTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type HelloWorldAppCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<HelloWorldAppArgs['obj']['create_opt_in()void'] | HelloWorldAppArgs['tuple']['create_opt_in()void']> & {method: 'create_opt_in'} & {onComplete: OnApplicationComplete.OptInOC} & CreateSchema>
  | Expand<CallParams<HelloWorldAppArgs['obj']['create_opt_in()void'] | HelloWorldAppArgs['tuple']['create_opt_in()void']> & {method: 'create_opt_in()void'} & {onComplete: OnApplicationComplete.OptInOC} & CreateSchema>
  | Expand<CallParams<HelloWorldAppArgs['obj']['create()void'] | HelloWorldAppArgs['tuple']['create()void']> & {method: 'create'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<HelloWorldAppArgs['obj']['create()void'] | HelloWorldAppArgs['tuple']['create()void']> & {method: 'create()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<HelloWorldAppArgs['obj']['create_args(string)void'] | HelloWorldAppArgs['tuple']['create_args(string)void']> & {method: 'create_args'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<HelloWorldAppArgs['obj']['create_args(string)void'] | HelloWorldAppArgs['tuple']['create_args(string)void']> & {method: 'create_args(string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type HelloWorldAppUpdateCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
  | Expand<CallParams<HelloWorldAppArgs['obj']['update()void'] | HelloWorldAppArgs['tuple']['update()void']> & {method: 'update'}>
  | Expand<CallParams<HelloWorldAppArgs['obj']['update()void'] | HelloWorldAppArgs['tuple']['update()void']> & {method: 'update()void'}>
  | Expand<CallParams<HelloWorldAppArgs['obj']['update_args(string)void'] | HelloWorldAppArgs['tuple']['update_args(string)void']> & {method: 'update_args'}>
  | Expand<CallParams<HelloWorldAppArgs['obj']['update_args(string)void'] | HelloWorldAppArgs['tuple']['update_args(string)void']> & {method: 'update_args(string)void'}>
/**
 * Defines supported delete method params for this smart contract
 */
export type HelloWorldAppDeleteCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
  | Expand<CallParams<HelloWorldAppArgs['obj']['delete()void'] | HelloWorldAppArgs['tuple']['delete()void']> & {method: 'delete'}>
  | Expand<CallParams<HelloWorldAppArgs['obj']['delete()void'] | HelloWorldAppArgs['tuple']['delete()void']> & {method: 'delete()void'}>
  | Expand<CallParams<HelloWorldAppArgs['obj']['delete_args(string)void'] | HelloWorldAppArgs['tuple']['delete_args(string)void']> & {method: 'delete_args'}>
  | Expand<CallParams<HelloWorldAppArgs['obj']['delete_args(string)void'] | HelloWorldAppArgs['tuple']['delete_args(string)void']> & {method: 'delete_args(string)void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type HelloWorldAppDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: HelloWorldAppCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: HelloWorldAppUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: HelloWorldAppDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the HelloWorldApp smart contract
 */
export abstract class HelloWorldAppParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends HelloWorldAppCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_opt_in':
          case 'create_opt_in()void':
            return HelloWorldAppParamsFactory.create.createOptIn(params)
          case 'create':
          case 'create()void':
            return HelloWorldAppParamsFactory.create.create(params)
          case 'create_args':
          case 'create_args(string)void':
            return HelloWorldAppParamsFactory.create.createArgs(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the HelloWorldApp smart contract using the create_opt_in()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createOptIn(params: CallParams<HelloWorldAppArgs['obj']['create_opt_in()void'] | HelloWorldAppArgs['tuple']['create_opt_in()void']> & AppClientCompilationParams & {onComplete: OnApplicationComplete.OptInOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete: OnApplicationComplete.OptInOC} {
        return {
          ...params,
          method: 'create_opt_in()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
      /**
       * Constructs create ABI call params for the HelloWorldApp smart contract using the create()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      create(params: CallParams<HelloWorldAppArgs['obj']['create()void'] | HelloWorldAppArgs['tuple']['create()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
      /**
       * Constructs create ABI call params for the HelloWorldApp smart contract using the create_args(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createArgs(params: CallParams<HelloWorldAppArgs['obj']['create_args(string)void'] | HelloWorldAppArgs['tuple']['create_args(string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_args(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.greeting],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends HelloWorldAppUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'update':
          case 'update()void':
            return HelloWorldAppParamsFactory.update.update(params)
          case 'update_args':
          case 'update_args(string)void':
            return HelloWorldAppParamsFactory.update.updateArgs(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the HelloWorldApp smart contract using the update()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      update(params: CallParams<HelloWorldAppArgs['obj']['update()void'] | HelloWorldAppArgs['tuple']['update()void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'update()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
      /**
       * Constructs update ABI call params for the HelloWorldApp smart contract using the update_args(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateArgs(params: CallParams<HelloWorldAppArgs['obj']['update_args(string)void'] | HelloWorldAppArgs['tuple']['update_args(string)void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'update_args(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.check],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends HelloWorldAppDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'delete':
          case 'delete()void':
            return HelloWorldAppParamsFactory.delete.delete(params)
          case 'delete_args':
          case 'delete_args(string)void':
            return HelloWorldAppParamsFactory.delete.deleteArgs(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the HelloWorldApp smart contract using the delete()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      delete(params: CallParams<HelloWorldAppArgs['obj']['delete()void'] | HelloWorldAppArgs['tuple']['delete()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
      /**
       * Constructs delete ABI call params for the HelloWorldApp smart contract using the delete_args(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteArgs(params: CallParams<HelloWorldAppArgs['obj']['delete_args(string)void'] | HelloWorldAppArgs['tuple']['delete_args(string)void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete_args(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.check],
        }
      },
    }
  }

  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the HelloWorldApp smart contract using the opt_in()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optIn(params: CallParams<HelloWorldAppArgs['obj']['opt_in()void'] | HelloWorldAppArgs['tuple']['opt_in()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'opt_in()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
      /**
       * Constructs opt-in ABI call params for the HelloWorldApp smart contract using the opt_in_args(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optInArgs(params: CallParams<HelloWorldAppArgs['obj']['opt_in_args(string)void'] | HelloWorldAppArgs['tuple']['opt_in_args(string)void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'opt_in_args(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.check],
        }
      },
    }
  }

  /**
   * Gets available closeOut ABI call param factories
   */
  static get closeOut() {
    return {
      /**
       * Constructs close out ABI call params for the HelloWorldApp smart contract using the close_out()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      closeOut(params: CallParams<HelloWorldAppArgs['obj']['close_out()void'] | HelloWorldAppArgs['tuple']['close_out()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'close_out()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
      /**
       * Constructs close out ABI call params for the HelloWorldApp smart contract using the close_out_args(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      closeOutArgs(params: CallParams<HelloWorldAppArgs['obj']['close_out_args(string)void'] | HelloWorldAppArgs['tuple']['close_out_args(string)void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'close_out_args(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.check],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the version()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static version(params: CallParams<HelloWorldAppArgs['obj']['version()uint64'] | HelloWorldAppArgs['tuple']['version()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'version()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the readonly(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readonly(params: CallParams<HelloWorldAppArgs['obj']['readonly(uint64)void'] | HelloWorldAppArgs['tuple']['readonly(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'readonly(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.error],
    }
  }
  /**
   * Constructs a no op call for the set_box(byte[4],string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBox(params: CallParams<HelloWorldAppArgs['obj']['set_box(byte[4],string)void'] | HelloWorldAppArgs['tuple']['set_box(byte[4],string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_box(byte[4],string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the get_box(byte[4])string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBox(params: CallParams<HelloWorldAppArgs['obj']['get_box(byte[4])string'] | HelloWorldAppArgs['tuple']['get_box(byte[4])string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_box(byte[4])string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the get_box_readonly(byte[4])string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxReadonly(params: CallParams<HelloWorldAppArgs['obj']['get_box_readonly(byte[4])string'] | HelloWorldAppArgs['tuple']['get_box_readonly(byte[4])string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_box_readonly(byte[4])string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the update_greeting(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateGreeting(params: CallParams<HelloWorldAppArgs['obj']['update_greeting(string)void'] | HelloWorldAppArgs['tuple']['update_greeting(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_greeting(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.greeting],
    }
  }
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<HelloWorldAppArgs['obj']['hello(string)string'] | HelloWorldAppArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the hello_remember(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static helloRemember(params: CallParams<HelloWorldAppArgs['obj']['hello_remember(string)string'] | HelloWorldAppArgs['tuple']['hello_remember(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello_remember(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the get_last()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLast(params: CallParams<HelloWorldAppArgs['obj']['get_last()string'] | HelloWorldAppArgs['tuple']['get_last()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_last()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the call_with_payment(pay)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static callWithPayment(params: CallParams<HelloWorldAppArgs['obj']['call_with_payment(pay)string'] | HelloWorldAppArgs['tuple']['call_with_payment(pay)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'call_with_payment(pay)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the HelloWorldApp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class HelloWorldAppFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `HelloWorldAppFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new HelloWorldAppClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new HelloWorldAppClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the HelloWorldApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: HelloWorldAppDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? HelloWorldAppParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (HelloWorldAppCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? HelloWorldAppParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (HelloWorldAppUpdateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? HelloWorldAppParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (HelloWorldAppDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new HelloWorldAppClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
      /**
       * Creates a new instance of the HelloWorldApp smart contract using the create_opt_in()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createOptIn: (params: CallParams<HelloWorldAppArgs['obj']['create_opt_in()void'] | HelloWorldAppArgs['tuple']['create_opt_in()void']> & AppClientCompilationParams & CreateSchema & {onComplete: OnApplicationComplete.OptInOC}) => {
        return this.appFactory.params.create(HelloWorldAppParamsFactory.create.createOptIn(params))
      },
      /**
       * Creates a new instance of the HelloWorldApp smart contract using the create()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      create: (params: CallParams<HelloWorldAppArgs['obj']['create()void'] | HelloWorldAppArgs['tuple']['create()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(HelloWorldAppParamsFactory.create.create(params))
      },
      /**
       * Creates a new instance of the HelloWorldApp smart contract using the create_args(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createArgs: (params: CallParams<HelloWorldAppArgs['obj']['create_args(string)void'] | HelloWorldAppArgs['tuple']['create_args(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(HelloWorldAppParamsFactory.create.createArgs(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployUpdate call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appFactory.params.bare.deployUpdate(params)
      },
      /**
       * Updates an existing instance of the HelloWorldApp smart contract using the update()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      update: (params: CallParams<HelloWorldAppArgs['obj']['update()void'] | HelloWorldAppArgs['tuple']['update()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appFactory.params.deployUpdate(HelloWorldAppParamsFactory.update.update(params))
      },
      /**
       * Updates an existing instance of the HelloWorldApp smart contract using the update_args(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateArgs: (params: CallParams<HelloWorldAppArgs['obj']['update_args(string)void'] | HelloWorldAppArgs['tuple']['update_args(string)void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(HelloWorldAppParamsFactory.update.updateArgs(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployDelete call
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appFactory.params.bare.deployDelete(params)
      },
      /**
       * Deletes an existing instance of the HelloWorldApp smart contract using the delete()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      delete: (params: CallParams<HelloWorldAppArgs['obj']['delete()void'] | HelloWorldAppArgs['tuple']['delete()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(HelloWorldAppParamsFactory.delete.delete(params))
      },
      /**
       * Deletes an existing instance of the HelloWorldApp smart contract using the delete_args(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteArgs: (params: CallParams<HelloWorldAppArgs['obj']['delete_args(string)void'] | HelloWorldAppArgs['tuple']['delete_args(string)void']>) => {
        return this.appFactory.params.deployDelete(HelloWorldAppParamsFactory.delete.deleteArgs(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
      /**
       * Creates a new instance of the HelloWorldApp smart contract using the create_opt_in()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createOptIn: (params: CallParams<HelloWorldAppArgs['obj']['create_opt_in()void'] | HelloWorldAppArgs['tuple']['create_opt_in()void']> & AppClientCompilationParams & CreateSchema & {onComplete: OnApplicationComplete.OptInOC}) => {
        return this.appFactory.createTransaction.create(HelloWorldAppParamsFactory.create.createOptIn(params))
      },
      /**
       * Creates a new instance of the HelloWorldApp smart contract using the create()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      create: (params: CallParams<HelloWorldAppArgs['obj']['create()void'] | HelloWorldAppArgs['tuple']['create()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(HelloWorldAppParamsFactory.create.create(params))
      },
      /**
       * Creates a new instance of the HelloWorldApp smart contract using the create_args(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createArgs: (params: CallParams<HelloWorldAppArgs['obj']['create_args(string)void'] | HelloWorldAppArgs['tuple']['create_args(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(HelloWorldAppParamsFactory.create.createArgs(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new HelloWorldAppClient(result.appClient) }
      },
      /**
       * Creates a new instance of the HelloWorldApp smart contract using an ABI method call using the create_opt_in()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createOptIn: async (params: CallParams<HelloWorldAppArgs['obj']['create_opt_in()void'] | HelloWorldAppArgs['tuple']['create_opt_in()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete: OnApplicationComplete.OptInOC}) => {
        const result = await this.appFactory.send.create(HelloWorldAppParamsFactory.create.createOptIn(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | HelloWorldAppReturns['create_opt_in()void']) }, appClient: new HelloWorldAppClient(result.appClient) }
      },
      /**
       * Creates a new instance of the HelloWorldApp smart contract using an ABI method call using the create()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      create: async (params: CallParams<HelloWorldAppArgs['obj']['create()void'] | HelloWorldAppArgs['tuple']['create()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(HelloWorldAppParamsFactory.create.create(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | HelloWorldAppReturns['create()void']) }, appClient: new HelloWorldAppClient(result.appClient) }
      },
      /**
       * Creates a new instance of the HelloWorldApp smart contract using an ABI method call using the create_args(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createArgs: async (params: CallParams<HelloWorldAppArgs['obj']['create_args(string)void'] | HelloWorldAppArgs['tuple']['create_args(string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(HelloWorldAppParamsFactory.create.createArgs(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | HelloWorldAppReturns['create_args(string)void']) }, appClient: new HelloWorldAppClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the HelloWorldApp smart contract
 */
export class HelloWorldAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `HelloWorldAppClient`
   *
   * @param appClient An `AppClient` instance which has been created with the HelloWorldApp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `HelloWorldAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends HelloWorldAppNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `HelloWorldAppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<HelloWorldAppClient> {
    return new HelloWorldAppClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `HelloWorldAppClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<HelloWorldAppClient> {
    return new HelloWorldAppClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.params.bare.update(params)
      },
      /**
       * Updates an existing instance of the HelloWorldApp smart contract using the `update()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      update: (params: CallParams<HelloWorldAppArgs['obj']['update()void'] | HelloWorldAppArgs['tuple']['update()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.params.update(HelloWorldAppParamsFactory.update.update(params))
      },

      /**
       * Updates an existing instance of the HelloWorldApp smart contract using the `update_args(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateArgs: (params: CallParams<HelloWorldAppArgs['obj']['update_args(string)void'] | HelloWorldAppArgs['tuple']['update_args(string)void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(HelloWorldAppParamsFactory.update.updateArgs(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.delete(params)
      },
      /**
       * Deletes an existing instance of the HelloWorldApp smart contract using the `delete()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      delete: (params: CallParams<HelloWorldAppArgs['obj']['delete()void'] | HelloWorldAppArgs['tuple']['delete()void']> = {args: []}) => {
        return this.appClient.params.delete(HelloWorldAppParamsFactory.delete.delete(params))
      },

      /**
       * Deletes an existing instance of the HelloWorldApp smart contract using the `delete_args(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteArgs: (params: CallParams<HelloWorldAppArgs['obj']['delete_args(string)void'] | HelloWorldAppArgs['tuple']['delete_args(string)void']>) => {
        return this.appClient.params.delete(HelloWorldAppParamsFactory.delete.deleteArgs(params))
      },

    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.optIn(params)
      },
      /**
       * Opts the user into an existing instance of the HelloWorldApp smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optIn: (params: CallParams<HelloWorldAppArgs['obj']['opt_in()void'] | HelloWorldAppArgs['tuple']['opt_in()void']> = {args: []}) => {
        return this.appClient.params.optIn(HelloWorldAppParamsFactory.optIn.optIn(params))
      },

      /**
       * Opts the user into an existing instance of the HelloWorldApp smart contract using the `opt_in_args(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optInArgs: (params: CallParams<HelloWorldAppArgs['obj']['opt_in_args(string)void'] | HelloWorldAppArgs['tuple']['opt_in_args(string)void']>) => {
        return this.appClient.params.optIn(HelloWorldAppParamsFactory.optIn.optInArgs(params))
      },

    },

    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The closeOut result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.closeOut(params)
      },
      /**
       * Makes a close out call to an existing instance of the HelloWorldApp smart contract using the `close_out()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The closeOut params
       */
      closeOut: (params: CallParams<HelloWorldAppArgs['obj']['close_out()void'] | HelloWorldAppArgs['tuple']['close_out()void']> = {args: []}) => {
        return this.appClient.params.closeOut(HelloWorldAppParamsFactory.closeOut.closeOut(params))
      },

      /**
       * Makes a close out call to an existing instance of the HelloWorldApp smart contract using the `close_out_args(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The closeOut params
       */
      closeOutArgs: (params: CallParams<HelloWorldAppArgs['obj']['close_out_args(string)void'] | HelloWorldAppArgs['tuple']['close_out_args(string)void']>) => {
        return this.appClient.params.closeOut(HelloWorldAppParamsFactory.closeOut.closeOutArgs(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the HelloWorldApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `version()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    version: (params: CallParams<HelloWorldAppArgs['obj']['version()uint64'] | HelloWorldAppArgs['tuple']['version()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(HelloWorldAppParamsFactory.version(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `readonly(uint64)void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    readonly: (params: CallParams<HelloWorldAppArgs['obj']['readonly(uint64)void'] | HelloWorldAppArgs['tuple']['readonly(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(HelloWorldAppParamsFactory.readonly(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `set_box(byte[4],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBox: (params: CallParams<HelloWorldAppArgs['obj']['set_box(byte[4],string)void'] | HelloWorldAppArgs['tuple']['set_box(byte[4],string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(HelloWorldAppParamsFactory.setBox(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `get_box(byte[4])string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBox: (params: CallParams<HelloWorldAppArgs['obj']['get_box(byte[4])string'] | HelloWorldAppArgs['tuple']['get_box(byte[4])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(HelloWorldAppParamsFactory.getBox(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `get_box_readonly(byte[4])string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBoxReadonly: (params: CallParams<HelloWorldAppArgs['obj']['get_box_readonly(byte[4])string'] | HelloWorldAppArgs['tuple']['get_box_readonly(byte[4])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(HelloWorldAppParamsFactory.getBoxReadonly(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `update_greeting(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateGreeting: (params: CallParams<HelloWorldAppArgs['obj']['update_greeting(string)void'] | HelloWorldAppArgs['tuple']['update_greeting(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(HelloWorldAppParamsFactory.updateGreeting(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `hello(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<HelloWorldAppArgs['obj']['hello(string)string'] | HelloWorldAppArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(HelloWorldAppParamsFactory.hello(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `hello_remember(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    helloRemember: (params: CallParams<HelloWorldAppArgs['obj']['hello_remember(string)string'] | HelloWorldAppArgs['tuple']['hello_remember(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(HelloWorldAppParamsFactory.helloRemember(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `get_last()string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLast: (params: CallParams<HelloWorldAppArgs['obj']['get_last()string'] | HelloWorldAppArgs['tuple']['get_last()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(HelloWorldAppParamsFactory.getLast(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `call_with_payment(pay)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    callWithPayment: (params: CallParams<HelloWorldAppArgs['obj']['call_with_payment(pay)string'] | HelloWorldAppArgs['tuple']['call_with_payment(pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(HelloWorldAppParamsFactory.callWithPayment(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.createTransaction.bare.update(params)
      },
      /**
       * Updates an existing instance of the HelloWorldApp smart contract using the `update()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      update: (params: CallParams<HelloWorldAppArgs['obj']['update()void'] | HelloWorldAppArgs['tuple']['update()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.createTransaction.update(HelloWorldAppParamsFactory.update.update(params))
      },

      /**
       * Updates an existing instance of the HelloWorldApp smart contract using the `update_args(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateArgs: (params: CallParams<HelloWorldAppArgs['obj']['update_args(string)void'] | HelloWorldAppArgs['tuple']['update_args(string)void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(HelloWorldAppParamsFactory.update.updateArgs(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.delete(params)
      },
      /**
       * Deletes an existing instance of the HelloWorldApp smart contract using the `delete()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      delete: (params: CallParams<HelloWorldAppArgs['obj']['delete()void'] | HelloWorldAppArgs['tuple']['delete()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(HelloWorldAppParamsFactory.delete.delete(params))
      },

      /**
       * Deletes an existing instance of the HelloWorldApp smart contract using the `delete_args(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteArgs: (params: CallParams<HelloWorldAppArgs['obj']['delete_args(string)void'] | HelloWorldAppArgs['tuple']['delete_args(string)void']>) => {
        return this.appClient.createTransaction.delete(HelloWorldAppParamsFactory.delete.deleteArgs(params))
      },

    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.optIn(params)
      },
      /**
       * Opts the user into an existing instance of the HelloWorldApp smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optIn: (params: CallParams<HelloWorldAppArgs['obj']['opt_in()void'] | HelloWorldAppArgs['tuple']['opt_in()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(HelloWorldAppParamsFactory.optIn.optIn(params))
      },

      /**
       * Opts the user into an existing instance of the HelloWorldApp smart contract using the `opt_in_args(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optInArgs: (params: CallParams<HelloWorldAppArgs['obj']['opt_in_args(string)void'] | HelloWorldAppArgs['tuple']['opt_in_args(string)void']>) => {
        return this.appClient.createTransaction.optIn(HelloWorldAppParamsFactory.optIn.optInArgs(params))
      },

    },

    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The closeOut result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.closeOut(params)
      },
      /**
       * Makes a close out call to an existing instance of the HelloWorldApp smart contract using the `close_out()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The closeOut transaction
       */
      closeOut: (params: CallParams<HelloWorldAppArgs['obj']['close_out()void'] | HelloWorldAppArgs['tuple']['close_out()void']> = {args: []}) => {
        return this.appClient.createTransaction.closeOut(HelloWorldAppParamsFactory.closeOut.closeOut(params))
      },

      /**
       * Makes a close out call to an existing instance of the HelloWorldApp smart contract using the `close_out_args(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The closeOut transaction
       */
      closeOutArgs: (params: CallParams<HelloWorldAppArgs['obj']['close_out_args(string)void'] | HelloWorldAppArgs['tuple']['close_out_args(string)void']>) => {
        return this.appClient.createTransaction.closeOut(HelloWorldAppParamsFactory.closeOut.closeOutArgs(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the HelloWorldApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `version()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    version: (params: CallParams<HelloWorldAppArgs['obj']['version()uint64'] | HelloWorldAppArgs['tuple']['version()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(HelloWorldAppParamsFactory.version(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `readonly(uint64)void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    readonly: (params: CallParams<HelloWorldAppArgs['obj']['readonly(uint64)void'] | HelloWorldAppArgs['tuple']['readonly(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(HelloWorldAppParamsFactory.readonly(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `set_box(byte[4],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBox: (params: CallParams<HelloWorldAppArgs['obj']['set_box(byte[4],string)void'] | HelloWorldAppArgs['tuple']['set_box(byte[4],string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(HelloWorldAppParamsFactory.setBox(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `get_box(byte[4])string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBox: (params: CallParams<HelloWorldAppArgs['obj']['get_box(byte[4])string'] | HelloWorldAppArgs['tuple']['get_box(byte[4])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(HelloWorldAppParamsFactory.getBox(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `get_box_readonly(byte[4])string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBoxReadonly: (params: CallParams<HelloWorldAppArgs['obj']['get_box_readonly(byte[4])string'] | HelloWorldAppArgs['tuple']['get_box_readonly(byte[4])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(HelloWorldAppParamsFactory.getBoxReadonly(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `update_greeting(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateGreeting: (params: CallParams<HelloWorldAppArgs['obj']['update_greeting(string)void'] | HelloWorldAppArgs['tuple']['update_greeting(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(HelloWorldAppParamsFactory.updateGreeting(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `hello(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<HelloWorldAppArgs['obj']['hello(string)string'] | HelloWorldAppArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(HelloWorldAppParamsFactory.hello(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `hello_remember(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    helloRemember: (params: CallParams<HelloWorldAppArgs['obj']['hello_remember(string)string'] | HelloWorldAppArgs['tuple']['hello_remember(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(HelloWorldAppParamsFactory.helloRemember(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `get_last()string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLast: (params: CallParams<HelloWorldAppArgs['obj']['get_last()string'] | HelloWorldAppArgs['tuple']['get_last()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(HelloWorldAppParamsFactory.getLast(params))
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `call_with_payment(pay)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    callWithPayment: (params: CallParams<HelloWorldAppArgs['obj']['call_with_payment(pay)string'] | HelloWorldAppArgs['tuple']['call_with_payment(pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(HelloWorldAppParamsFactory.callWithPayment(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & SendParams>) => {
        return this.appClient.send.bare.update(params)
      },
      /**
       * Updates an existing instance of the HelloWorldApp smart contract using the `update()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      update: async (params: CallParams<HelloWorldAppArgs['obj']['update()void'] | HelloWorldAppArgs['tuple']['update()void']> & AppClientCompilationParams & SendParams = {args: []}) => {
        const result = await this.appClient.send.update(HelloWorldAppParamsFactory.update.update(params))
        return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['update()void'])}
      },

      /**
       * Updates an existing instance of the HelloWorldApp smart contract using the `update_args(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateArgs: async (params: CallParams<HelloWorldAppArgs['obj']['update_args(string)void'] | HelloWorldAppArgs['tuple']['update_args(string)void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(HelloWorldAppParamsFactory.update.updateArgs(params))
        return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['update_args(string)void'])}
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.delete(params)
      },
      /**
       * Deletes an existing instance of the HelloWorldApp smart contract using the `delete()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      delete: async (params: CallParams<HelloWorldAppArgs['obj']['delete()void'] | HelloWorldAppArgs['tuple']['delete()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(HelloWorldAppParamsFactory.delete.delete(params))
        return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['delete()void'])}
      },

      /**
       * Deletes an existing instance of the HelloWorldApp smart contract using the `delete_args(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteArgs: async (params: CallParams<HelloWorldAppArgs['obj']['delete_args(string)void'] | HelloWorldAppArgs['tuple']['delete_args(string)void']> & SendParams) => {
        const result = await this.appClient.send.delete(HelloWorldAppParamsFactory.delete.deleteArgs(params))
        return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['delete_args(string)void'])}
      },

    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.optIn(params)
      },
      /**
       * Opts the user into an existing instance of the HelloWorldApp smart contract using the `opt_in()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optIn: async (params: CallParams<HelloWorldAppArgs['obj']['opt_in()void'] | HelloWorldAppArgs['tuple']['opt_in()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(HelloWorldAppParamsFactory.optIn.optIn(params))
        return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['opt_in()void'])}
      },

      /**
       * Opts the user into an existing instance of the HelloWorldApp smart contract using the `opt_in_args(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optInArgs: async (params: CallParams<HelloWorldAppArgs['obj']['opt_in_args(string)void'] | HelloWorldAppArgs['tuple']['opt_in_args(string)void']> & SendParams) => {
        const result = await this.appClient.send.optIn(HelloWorldAppParamsFactory.optIn.optInArgs(params))
        return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['opt_in_args(string)void'])}
      },

    },

    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the HelloWorldApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The closeOut result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.closeOut(params)
      },
      /**
       * Makes a close out call to an existing instance of the HelloWorldApp smart contract using the `close_out()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The closeOut result
       */
      closeOut: async (params: CallParams<HelloWorldAppArgs['obj']['close_out()void'] | HelloWorldAppArgs['tuple']['close_out()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.closeOut(HelloWorldAppParamsFactory.closeOut.closeOut(params))
        return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['close_out()void'])}
      },

      /**
       * Makes a close out call to an existing instance of the HelloWorldApp smart contract using the `close_out_args(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The closeOut result
       */
      closeOutArgs: async (params: CallParams<HelloWorldAppArgs['obj']['close_out_args(string)void'] | HelloWorldAppArgs['tuple']['close_out_args(string)void']> & SendParams) => {
        const result = await this.appClient.send.closeOut(HelloWorldAppParamsFactory.closeOut.closeOutArgs(params))
        return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['close_out_args(string)void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the HelloWorldApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `version()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    version: async (params: CallParams<HelloWorldAppArgs['obj']['version()uint64'] | HelloWorldAppArgs['tuple']['version()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(HelloWorldAppParamsFactory.version(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['version()uint64'])}
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `readonly(uint64)void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    readonly: async (params: CallParams<HelloWorldAppArgs['obj']['readonly(uint64)void'] | HelloWorldAppArgs['tuple']['readonly(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(HelloWorldAppParamsFactory.readonly(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['readonly(uint64)void'])}
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `set_box(byte[4],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBox: async (params: CallParams<HelloWorldAppArgs['obj']['set_box(byte[4],string)void'] | HelloWorldAppArgs['tuple']['set_box(byte[4],string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(HelloWorldAppParamsFactory.setBox(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['set_box(byte[4],string)void'])}
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `get_box(byte[4])string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBox: async (params: CallParams<HelloWorldAppArgs['obj']['get_box(byte[4])string'] | HelloWorldAppArgs['tuple']['get_box(byte[4])string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(HelloWorldAppParamsFactory.getBox(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['get_box(byte[4])string'])}
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `get_box_readonly(byte[4])string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBoxReadonly: async (params: CallParams<HelloWorldAppArgs['obj']['get_box_readonly(byte[4])string'] | HelloWorldAppArgs['tuple']['get_box_readonly(byte[4])string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(HelloWorldAppParamsFactory.getBoxReadonly(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['get_box_readonly(byte[4])string'])}
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `update_greeting(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateGreeting: async (params: CallParams<HelloWorldAppArgs['obj']['update_greeting(string)void'] | HelloWorldAppArgs['tuple']['update_greeting(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(HelloWorldAppParamsFactory.updateGreeting(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['update_greeting(string)void'])}
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `hello(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<HelloWorldAppArgs['obj']['hello(string)string'] | HelloWorldAppArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(HelloWorldAppParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['hello(string)string'])}
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `hello_remember(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    helloRemember: async (params: CallParams<HelloWorldAppArgs['obj']['hello_remember(string)string'] | HelloWorldAppArgs['tuple']['hello_remember(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(HelloWorldAppParamsFactory.helloRemember(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['hello_remember(string)string'])}
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `get_last()string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLast: async (params: CallParams<HelloWorldAppArgs['obj']['get_last()string'] | HelloWorldAppArgs['tuple']['get_last()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(HelloWorldAppParamsFactory.getLast(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['get_last()string'])}
    },

    /**
     * Makes a call to the HelloWorldApp smart contract using the `call_with_payment(pay)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    callWithPayment: async (params: CallParams<HelloWorldAppArgs['obj']['call_with_payment(pay)string'] | HelloWorldAppArgs['tuple']['call_with_payment(pay)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(HelloWorldAppParamsFactory.callWithPayment(params))
      return {...result, return: result.return as unknown as (undefined | HelloWorldAppReturns['call_with_payment(pay)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new HelloWorldAppClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the HelloWorldApp smart contract using the `readonly(uint64)void` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async readonly(params: CallParams<HelloWorldAppArgs['obj']['readonly(uint64)void'] | HelloWorldAppArgs['tuple']['readonly(uint64)void']>) {
    const result = await this.appClient.send.call(HelloWorldAppParamsFactory.readonly(params))
    return result.return as unknown as HelloWorldAppReturns['readonly(uint64)void']
  }

  /**
   * Makes a readonly (simulated) call to the HelloWorldApp smart contract using the `get_box_readonly(byte[4])string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getBoxReadonly(params: CallParams<HelloWorldAppArgs['obj']['get_box_readonly(byte[4])string'] | HelloWorldAppArgs['tuple']['get_box_readonly(byte[4])string']>) {
    const result = await this.appClient.send.call(HelloWorldAppParamsFactory.getBoxReadonly(params))
    return result.return as unknown as HelloWorldAppReturns['get_box_readonly(byte[4])string']
  }

  /**
   * Makes a readonly (simulated) call to the HelloWorldApp smart contract using the `hello(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async hello(params: CallParams<HelloWorldAppArgs['obj']['hello(string)string'] | HelloWorldAppArgs['tuple']['hello(string)string']>) {
    const result = await this.appClient.send.call(HelloWorldAppParamsFactory.hello(params))
    return result.return as unknown as HelloWorldAppReturns['hello(string)string']
  }

  /**
   * Makes a readonly (simulated) call to the HelloWorldApp smart contract using the `get_last()string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getLast(params: CallParams<HelloWorldAppArgs['obj']['get_last()string'] | HelloWorldAppArgs['tuple']['get_last()string']> = {args: []}) {
    const result = await this.appClient.send.call(HelloWorldAppParamsFactory.getLast(params))
    return result.return as unknown as HelloWorldAppReturns['get_last()string']
  }

  /**
   * Methods to access state for the current HelloWorldApp app
   */
  state = {
    /**
     * Methods to access global state for the current HelloWorldApp app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          greeting: new BinaryStateValue(result.greeting),
        }
      },
      /**
       * Get the current value of the greeting key in global state
       */
      greeting: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("greeting")) as Uint8Array | undefined) },
    },
    /**
     * Methods to access local state for the current HelloWorldApp app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            last: new BinaryStateValue(result.last),
          }
        },
        /**
         * Get the current value of the last key in local state
         */
        last: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.local(encodedAddress).getValue("last")) as Uint8Array | undefined) },
      }
    },
  }

  public newGroup(): HelloWorldAppComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a version()uint64 method call against the HelloWorldApp contract
       */
      version(params: CallParams<HelloWorldAppArgs['obj']['version()uint64'] | HelloWorldAppArgs['tuple']['version()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.version(params)))
        resultMappers.push((v) => client.decodeReturnValue('version()uint64', v))
        return this
      },
      /**
       * Add a readonly(uint64)void method call against the HelloWorldApp contract
       */
      readonly(params: CallParams<HelloWorldAppArgs['obj']['readonly(uint64)void'] | HelloWorldAppArgs['tuple']['readonly(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readonly(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_box(byte[4],string)void method call against the HelloWorldApp contract
       */
      setBox(params: CallParams<HelloWorldAppArgs['obj']['set_box(byte[4],string)void'] | HelloWorldAppArgs['tuple']['set_box(byte[4],string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBox(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_box(byte[4])string method call against the HelloWorldApp contract
       */
      getBox(params: CallParams<HelloWorldAppArgs['obj']['get_box(byte[4])string'] | HelloWorldAppArgs['tuple']['get_box(byte[4])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBox(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_box(byte[4])string', v))
        return this
      },
      /**
       * Add a get_box_readonly(byte[4])string method call against the HelloWorldApp contract
       */
      getBoxReadonly(params: CallParams<HelloWorldAppArgs['obj']['get_box_readonly(byte[4])string'] | HelloWorldAppArgs['tuple']['get_box_readonly(byte[4])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxReadonly(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_box_readonly(byte[4])string', v))
        return this
      },
      /**
       * Add a update_greeting(string)void method call against the HelloWorldApp contract
       */
      updateGreeting(params: CallParams<HelloWorldAppArgs['obj']['update_greeting(string)void'] | HelloWorldAppArgs['tuple']['update_greeting(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateGreeting(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a hello(string)string method call against the HelloWorldApp contract
       */
      hello(params: CallParams<HelloWorldAppArgs['obj']['hello(string)string'] | HelloWorldAppArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a hello_remember(string)string method call against the HelloWorldApp contract
       */
      helloRemember(params: CallParams<HelloWorldAppArgs['obj']['hello_remember(string)string'] | HelloWorldAppArgs['tuple']['hello_remember(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.helloRemember(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello_remember(string)string', v))
        return this
      },
      /**
       * Add a get_last()string method call against the HelloWorldApp contract
       */
      getLast(params: CallParams<HelloWorldAppArgs['obj']['get_last()string'] | HelloWorldAppArgs['tuple']['get_last()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLast(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_last()string', v))
        return this
      },
      /**
       * Add a call_with_payment(pay)string method call against the HelloWorldApp contract
       */
      callWithPayment(params: CallParams<HelloWorldAppArgs['obj']['call_with_payment(pay)string'] | HelloWorldAppArgs['tuple']['call_with_payment(pay)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.callWithPayment(params)))
        resultMappers.push((v) => client.decodeReturnValue('call_with_payment(pay)string', v))
        return this
      },
      get update() {
        return {
          bare: (params?: AppClientBareCallParams & AppClientCompilationParams ) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdate(await client.params.update.bare(params)))
            return this
          },
          update: (params: CallParams<HelloWorldAppArgs['obj']['update()void'] | HelloWorldAppArgs['tuple']['update()void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.update(params)))
            resultMappers.push(undefined)
            return this
          },
          updateArgs: (params: CallParams<HelloWorldAppArgs['obj']['update_args(string)void'] | HelloWorldAppArgs['tuple']['update_args(string)void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateArgs(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get delete() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppDelete(client.params.delete.bare(params)))
            return this
          },
          delete: (params: CallParams<HelloWorldAppArgs['obj']['delete()void'] | HelloWorldAppArgs['tuple']['delete()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.delete(params)))
            resultMappers.push(undefined)
            return this
          },
          deleteArgs: (params: CallParams<HelloWorldAppArgs['obj']['delete_args(string)void'] | HelloWorldAppArgs['tuple']['delete_args(string)void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteArgs(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get optIn() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppCall(client.params.optIn.bare(params)))
            return this
          },
          optIn: (params: CallParams<HelloWorldAppArgs['obj']['opt_in()void'] | HelloWorldAppArgs['tuple']['opt_in()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optIn(params)))
            resultMappers.push(undefined)
            return this
          },
          optInArgs: (params: CallParams<HelloWorldAppArgs['obj']['opt_in_args(string)void'] | HelloWorldAppArgs['tuple']['opt_in_args(string)void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optInArgs(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get closeOut() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppCall(client.params.closeOut.bare(params)))
            return this
          },
          closeOut: (params: CallParams<HelloWorldAppArgs['obj']['close_out()void'] | HelloWorldAppArgs['tuple']['close_out()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.closeOut.closeOut(params)))
            resultMappers.push(undefined)
            return this
          },
          closeOutArgs: (params: CallParams<HelloWorldAppArgs['obj']['close_out_args(string)void'] | HelloWorldAppArgs['tuple']['close_out_args(string)void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.closeOut.closeOutArgs(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the HelloWorldApp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as HelloWorldAppComposer
  }
}
export type HelloWorldAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the version()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  version(params?: CallParams<HelloWorldAppArgs['obj']['version()uint64'] | HelloWorldAppArgs['tuple']['version()uint64']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['version()uint64'] | undefined]>

  /**
   * Calls the readonly(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readonly(params?: CallParams<HelloWorldAppArgs['obj']['readonly(uint64)void'] | HelloWorldAppArgs['tuple']['readonly(uint64)void']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['readonly(uint64)void'] | undefined]>

  /**
   * Calls the set_box(byte[4],string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBox(params?: CallParams<HelloWorldAppArgs['obj']['set_box(byte[4],string)void'] | HelloWorldAppArgs['tuple']['set_box(byte[4],string)void']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['set_box(byte[4],string)void'] | undefined]>

  /**
   * Calls the get_box(byte[4])string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBox(params?: CallParams<HelloWorldAppArgs['obj']['get_box(byte[4])string'] | HelloWorldAppArgs['tuple']['get_box(byte[4])string']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['get_box(byte[4])string'] | undefined]>

  /**
   * Calls the get_box_readonly(byte[4])string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxReadonly(params?: CallParams<HelloWorldAppArgs['obj']['get_box_readonly(byte[4])string'] | HelloWorldAppArgs['tuple']['get_box_readonly(byte[4])string']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['get_box_readonly(byte[4])string'] | undefined]>

  /**
   * Calls the update_greeting(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateGreeting(params?: CallParams<HelloWorldAppArgs['obj']['update_greeting(string)void'] | HelloWorldAppArgs['tuple']['update_greeting(string)void']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['update_greeting(string)void'] | undefined]>

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<HelloWorldAppArgs['obj']['hello(string)string'] | HelloWorldAppArgs['tuple']['hello(string)string']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['hello(string)string'] | undefined]>

  /**
   * Calls the hello_remember(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  helloRemember(params?: CallParams<HelloWorldAppArgs['obj']['hello_remember(string)string'] | HelloWorldAppArgs['tuple']['hello_remember(string)string']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['hello_remember(string)string'] | undefined]>

  /**
   * Calls the get_last()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLast(params?: CallParams<HelloWorldAppArgs['obj']['get_last()string'] | HelloWorldAppArgs['tuple']['get_last()string']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['get_last()string'] | undefined]>

  /**
   * Calls the call_with_payment(pay)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  callWithPayment(params?: CallParams<HelloWorldAppArgs['obj']['call_with_payment(pay)string'] | HelloWorldAppArgs['tuple']['call_with_payment(pay)string']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['call_with_payment(pay)string'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the HelloWorldApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): HelloWorldAppComposer<[...TReturns, undefined]>
    /**
     * Deletes an existing instance of the HelloWorldApp smart contract using the delete()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    delete(params?: CallParams<HelloWorldAppArgs['obj']['delete()void'] | HelloWorldAppArgs['tuple']['delete()void']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['delete()void'] | undefined]>
    /**
     * Deletes an existing instance of the HelloWorldApp smart contract using the delete_args(string)void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteArgs(params?: CallParams<HelloWorldAppArgs['obj']['delete_args(string)void'] | HelloWorldAppArgs['tuple']['delete_args(string)void']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['delete_args(string)void'] | undefined]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the HelloWorldApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): HelloWorldAppComposer<[...TReturns, undefined]>
    /**
     * Opts the user into an existing instance of the HelloWorldApp smart contract using the opt_in()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optIn(params?: CallParams<HelloWorldAppArgs['obj']['opt_in()void'] | HelloWorldAppArgs['tuple']['opt_in()void']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['opt_in()void'] | undefined]>
    /**
     * Opts the user into an existing instance of the HelloWorldApp smart contract using the opt_in_args(string)void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInArgs(params?: CallParams<HelloWorldAppArgs['obj']['opt_in_args(string)void'] | HelloWorldAppArgs['tuple']['opt_in_args(string)void']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['opt_in_args(string)void'] | undefined]>
  }

  /**
   * Gets available closeOut methods
   */
  readonly closeOut: {
    /**
     * Makes a close out call to an existing instance of the HelloWorldApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): HelloWorldAppComposer<[...TReturns, undefined]>
    /**
     * Makes a close out call to an existing instance of the HelloWorldApp smart contract using the close_out()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    closeOut(params?: CallParams<HelloWorldAppArgs['obj']['close_out()void'] | HelloWorldAppArgs['tuple']['close_out()void']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['close_out()void'] | undefined]>
    /**
     * Makes a close out call to an existing instance of the HelloWorldApp smart contract using the close_out_args(string)void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    closeOutArgs(params?: CallParams<HelloWorldAppArgs['obj']['close_out_args(string)void'] | HelloWorldAppArgs['tuple']['close_out_args(string)void']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['close_out_args(string)void'] | undefined]>
  }

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the HelloWorldApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): HelloWorldAppComposer<[...TReturns, undefined]>
    /**
     * Updates an existing instance of the HelloWorldApp smart contract using the update()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    update(params?: CallParams<HelloWorldAppArgs['obj']['update()void'] | HelloWorldAppArgs['tuple']['update()void']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['update()void'] | undefined]>
    /**
     * Updates an existing instance of the HelloWorldApp smart contract using the update_args(string)void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateArgs(params?: CallParams<HelloWorldAppArgs['obj']['update_args(string)void'] | HelloWorldAppArgs['tuple']['update_args(string)void']>): HelloWorldAppComposer<[...TReturns, HelloWorldAppReturns['update_args(string)void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the HelloWorldApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): HelloWorldAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): HelloWorldAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<HelloWorldAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<HelloWorldAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<HelloWorldAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<HelloWorldAppComposerResults<TReturns>>
}
export type HelloWorldAppComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

