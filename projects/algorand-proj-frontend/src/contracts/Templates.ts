/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Templates","desc":"","methods":[{"name":"tmpl","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"specificLengthTemplateVar","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"throwError","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"itobTemplateVar","args":[],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":0,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":15,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[1,2]},{"teal":16,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[3]},{"teal":17,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[4,5]},{"teal":18,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[6]},{"teal":19,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[7,8]},{"teal":20,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[9]},{"teal":21,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]},{"teal":25,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[36]},{"teal":30,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:12","pc":[37,38,39]},{"teal":31,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:12","pc":[40]},{"teal":32,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:12","pc":[41]},{"teal":36,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:12","pc":[42,43,44]},{"teal":40,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:13","pc":[45]},{"teal":41,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:13","pc":[46]},{"teal":45,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:14","pc":[47]},{"teal":46,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:14","pc":[48]},{"teal":47,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:12","pc":[49]},{"teal":52,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:17","pc":[50,51,52]},{"teal":53,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:17","pc":[53]},{"teal":54,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:17","pc":[54]},{"teal":58,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:17","pc":[55,56,57]},{"teal":62,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:18","pc":[58]},{"teal":63,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:18","pc":[59]},{"teal":64,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:18","pc":[60]},{"teal":65,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:18","pc":[61]},{"teal":66,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:17","pc":[62]},{"teal":71,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:21","pc":[63,64,65]},{"teal":72,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:21","pc":[66]},{"teal":73,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:21","pc":[67]},{"teal":77,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:21","pc":[68,69,70]},{"teal":80,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:22","errorMessage":"this is an error","pc":[71]},{"teal":81,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:21","pc":[72]},{"teal":86,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:25","pc":[73,74,75,76,77,78]},{"teal":89,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:25","pc":[79,80,81]},{"teal":90,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:25","pc":[82]},{"teal":91,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:25","pc":[83]},{"teal":92,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:25","pc":[84]},{"teal":93,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:25","pc":[85,86,87]},{"teal":94,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:25","pc":[88]},{"teal":95,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:25","pc":[89]},{"teal":96,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:25","pc":[90]},{"teal":97,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:25","pc":[91]},{"teal":98,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:25","pc":[92]},{"teal":99,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:25","pc":[93]},{"teal":103,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:25","pc":[94,95,96]},{"teal":107,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:26","pc":[97]},{"teal":108,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:26","pc":[98]},{"teal":109,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:25","pc":[99]},{"teal":112,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[100]},{"teal":113,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[101]},{"teal":116,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[102,103,104,105,106,107]},{"teal":117,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[108,109,110]},{"teal":118,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[111,112,113,114]},{"teal":121,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[115]},{"teal":124,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[116,117,118,119,120,121]},{"teal":125,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[122,123,124,125,126,127]},{"teal":126,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[128,129,130,131,132,133]},{"teal":127,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[134,135,136,137,138,139]},{"teal":128,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[140,141,142]},{"teal":129,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","pc":[143,144,145,146,147,148,149,150,151,152]},{"teal":132,"source":"tests/example-contracts/arc56_templates/templates.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[153]}],"pcOffsetMethod":"cblocks"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIFRNUExfdWludDY0VG1wbFZhcgpieXRlY2Jsb2NrIFRNUExfYnl0ZXNUbXBsVmFyIFRNUExfYnl0ZXM2NFRtcGxWYXIgVE1QTF9ieXRlczMyVG1wbFZhcgoKLy8gVGhpcyBURUFMIHdhcyBnZW5lcmF0ZWQgYnkgVEVBTFNjcmlwdCB2MC4xMDUuMwovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICIqTk9UX0lNUExFTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECiEKcHVzaGludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIHRtcGwoKXZvaWQKKmFiaV9yb3V0ZV90bXBsOgoJLy8gZXhlY3V0ZSB0bXBsKCl2b2lkCgljYWxsc3ViIHRtcGwKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHRtcGwoKTogdm9pZAp0bXBsOgoJcHJvdG8gMCAwCgoJLy8gdGVzdHMvZXhhbXBsZS1jb250cmFjdHMvYXJjNTZfdGVtcGxhdGVzL3RlbXBsYXRlcy5hbGdvLnRzOjEzCgkvLyBsb2codGhpcy5ieXRlc1RtcGxWYXIpCglieXRlYyAwIC8vIFRNUExfYnl0ZXNUbXBsVmFyCglsb2cKCgkvLyB0ZXN0cy9leGFtcGxlLWNvbnRyYWN0cy9hcmM1Nl90ZW1wbGF0ZXMvdGVtcGxhdGVzLmFsZ28udHM6MTQKCS8vIGFzc2VydCh0aGlzLnVpbnQ2NFRtcGxWYXIpCglpbnRjIDEgLy8gVE1QTF91aW50NjRUbXBsVmFyCglhc3NlcnQKCXJldHN1YgoKLy8gc3BlY2lmaWNMZW5ndGhUZW1wbGF0ZVZhcigpdm9pZAoqYWJpX3JvdXRlX3NwZWNpZmljTGVuZ3RoVGVtcGxhdGVWYXI6CgkvLyBleGVjdXRlIHNwZWNpZmljTGVuZ3RoVGVtcGxhdGVWYXIoKXZvaWQKCWNhbGxzdWIgc3BlY2lmaWNMZW5ndGhUZW1wbGF0ZVZhcgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gc3BlY2lmaWNMZW5ndGhUZW1wbGF0ZVZhcigpOiB2b2lkCnNwZWNpZmljTGVuZ3RoVGVtcGxhdGVWYXI6Cglwcm90byAwIDAKCgkvLyB0ZXN0cy9leGFtcGxlLWNvbnRyYWN0cy9hcmM1Nl90ZW1wbGF0ZXMvdGVtcGxhdGVzLmFsZ28udHM6MTgKCS8vIGVkMjU1MTlWZXJpZnlCYXJlKHRoaXMuYnl0ZXNUbXBsVmFyLCB0aGlzLmJ5dGVzNjRUbXBsVmFyLCB0aGlzLmJ5dGVzMzJUbXBsVmFyKQoJYnl0ZWMgMCAvLyBUTVBMX2J5dGVzVG1wbFZhcgoJYnl0ZWMgMSAvLyBUTVBMX2J5dGVzNjRUbXBsVmFyCglieXRlYyAyIC8vIFRNUExfYnl0ZXMzMlRtcGxWYXIKCWVkMjU1MTl2ZXJpZnlfYmFyZQoJcmV0c3ViCgovLyB0aHJvd0Vycm9yKCl2b2lkCiphYmlfcm91dGVfdGhyb3dFcnJvcjoKCS8vIGV4ZWN1dGUgdGhyb3dFcnJvcigpdm9pZAoJY2FsbHN1YiB0aHJvd0Vycm9yCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyB0aHJvd0Vycm9yKCk6IHZvaWQKdGhyb3dFcnJvcjoKCXByb3RvIDAgMAoKCS8vIHRoaXMgaXMgYW4gZXJyb3IKCWVycgoJcmV0c3ViCgovLyBpdG9iVGVtcGxhdGVWYXIoKWJ5dGVbXQoqYWJpX3JvdXRlX2l0b2JUZW1wbGF0ZVZhcjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJcHVzaGJ5dGVzIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGl0b2JUZW1wbGF0ZVZhcigpYnl0ZVtdCgljYWxsc3ViIGl0b2JUZW1wbGF0ZVZhcgoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBpdG9iVGVtcGxhdGVWYXIoKTogYnl0ZXMKaXRvYlRlbXBsYXRlVmFyOgoJcHJvdG8gMCAxCgoJLy8gdGVzdHMvZXhhbXBsZS1jb250cmFjdHMvYXJjNTZfdGVtcGxhdGVzL3RlbXBsYXRlcy5hbGdvLnRzOjI2CgkvLyByZXR1cm4gaXRvYih0aGlzLnVpbnQ2NFRtcGxWYXIpCglpbnRjIDEgLy8gVE1QTF91aW50NjRUbXBsVmFyCglpdG9iCglyZXRzdWIKCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CglpbnRjIDAgLy8gMQoJcmV0dXJuCgoqY3JlYXRlX05vT3A6CglwdXNoYnl0ZXMgMHhiODQ0N2IzNiAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4OWE3MWQyYjQgLy8gbWV0aG9kICJ0bXBsKCl2b2lkIgoJcHVzaGJ5dGVzIDB4ZGY0ZDVjM2IgLy8gbWV0aG9kICJzcGVjaWZpY0xlbmd0aFRlbXBsYXRlVmFyKCl2b2lkIgoJcHVzaGJ5dGVzIDB4M2Q4NzBkODcgLy8gbWV0aG9kICJ0aHJvd0Vycm9yKCl2b2lkIgoJcHVzaGJ5dGVzIDB4YmMwYjE3MDYgLy8gbWV0aG9kICJpdG9iVGVtcGxhdGVWYXIoKWJ5dGVbXSIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfdG1wbCAqYWJpX3JvdXRlX3NwZWNpZmljTGVuZ3RoVGVtcGxhdGVWYXIgKmFiaV9yb3V0ZV90aHJvd0Vycm9yICphYmlfcm91dGVfaXRvYlRlbXBsYXRlVmFyCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJy","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"templateVariables":{"bytesTmplVar":{"type":"byte[]"},"uint64TmplVar":{"type":"uint64"},"bytes32TmplVar":{"type":"byte[32]"},"bytes64TmplVar":{"type":"byte[64]"}},"scratchVariables":{"bytesTmplVar":{"type":"byte[]","slot":200},"uint64TmplVar":{"type":"uint64","slot":201},"bytes32TmplVar":{"type":"byte[32]","slot":202},"bytes64TmplVar":{"type":"byte[64]","slot":203}},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":26,"patch":0,"commitHash":"0d10b244"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * Deploy-time template variables
 */
export type TemplateVariables = {
  bytesTmplVar: Uint8Array,
  uint64TmplVar: bigint,
  bytes32TmplVar: Uint8Array,
  bytes64TmplVar: Uint8Array,
}

/**
 * The argument types for the Templates contract
 */
export type TemplatesArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'tmpl()void': Record<string, never>
    'specificLengthTemplateVar()void': Record<string, never>
    'throwError()void': Record<string, never>
    'itobTemplateVar()byte[]': Record<string, never>
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'tmpl()void': []
    'specificLengthTemplateVar()void': []
    'throwError()void': []
    'itobTemplateVar()byte[]': []
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type TemplatesReturns = {
  'tmpl()void': void
  'specificLengthTemplateVar()void': void
  'throwError()void': void
  'itobTemplateVar()byte[]': Uint8Array
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the Templates smart contract.
 */
export type TemplatesTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'tmpl()void' | 'tmpl', {
      argsObj: TemplatesArgs['obj']['tmpl()void']
      argsTuple: TemplatesArgs['tuple']['tmpl()void']
      returns: TemplatesReturns['tmpl()void']
    }>
    & Record<'specificLengthTemplateVar()void' | 'specificLengthTemplateVar', {
      argsObj: TemplatesArgs['obj']['specificLengthTemplateVar()void']
      argsTuple: TemplatesArgs['tuple']['specificLengthTemplateVar()void']
      returns: TemplatesReturns['specificLengthTemplateVar()void']
    }>
    & Record<'throwError()void' | 'throwError', {
      argsObj: TemplatesArgs['obj']['throwError()void']
      argsTuple: TemplatesArgs['tuple']['throwError()void']
      returns: TemplatesReturns['throwError()void']
    }>
    & Record<'itobTemplateVar()byte[]' | 'itobTemplateVar', {
      argsObj: TemplatesArgs['obj']['itobTemplateVar()byte[]']
      argsTuple: TemplatesArgs['tuple']['itobTemplateVar()byte[]']
      returns: TemplatesReturns['itobTemplateVar()byte[]']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: TemplatesArgs['obj']['createApplication()void']
      argsTuple: TemplatesArgs['tuple']['createApplication()void']
      returns: TemplatesReturns['createApplication()void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type TemplatesSignatures = keyof TemplatesTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TemplatesNonVoidMethodSignatures = keyof TemplatesTypes['methods'] extends infer T ? T extends keyof TemplatesTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Templates smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TemplatesSignatures> = TemplatesTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Templates smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TemplatesSignatures> = TemplatesTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type TemplatesCreateCallParams =
  | Expand<CallParams<TemplatesArgs['obj']['createApplication()void'] | TemplatesArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<TemplatesArgs['obj']['createApplication()void'] | TemplatesArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TemplatesDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TemplatesCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Templates smart contract
 */
export abstract class TemplatesParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends TemplatesCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return TemplatesParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Templates smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<TemplatesArgs['obj']['createApplication()void'] | TemplatesArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the tmpl()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static tmpl(params: CallParams<TemplatesArgs['obj']['tmpl()void'] | TemplatesArgs['tuple']['tmpl()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'tmpl()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the specificLengthTemplateVar()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static specificLengthTemplateVar(params: CallParams<TemplatesArgs['obj']['specificLengthTemplateVar()void'] | TemplatesArgs['tuple']['specificLengthTemplateVar()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'specificLengthTemplateVar()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the throwError()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static throwError(params: CallParams<TemplatesArgs['obj']['throwError()void'] | TemplatesArgs['tuple']['throwError()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'throwError()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the itobTemplateVar()byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static itobTemplateVar(params: CallParams<TemplatesArgs['obj']['itobTemplateVar()byte[]'] | TemplatesArgs['tuple']['itobTemplateVar()byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'itobTemplateVar()byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Templates smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TemplatesFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TemplatesFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TemplatesClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TemplatesClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Templates smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TemplatesDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? TemplatesParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (TemplatesCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new TemplatesClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Templates smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<TemplatesArgs['obj']['createApplication()void'] | TemplatesArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(TemplatesParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Templates smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<TemplatesArgs['obj']['createApplication()void'] | TemplatesArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(TemplatesParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Templates smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<TemplatesArgs['obj']['createApplication()void'] | TemplatesArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(TemplatesParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | TemplatesReturns['createApplication()void']) }, appClient: new TemplatesClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Templates smart contract
 */
export class TemplatesClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TemplatesClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Templates app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TemplatesClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TemplatesNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TemplatesClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TemplatesClient> {
    return new TemplatesClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TemplatesClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TemplatesClient> {
    return new TemplatesClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Templates smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Templates smart contract using the `tmpl()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    tmpl: (params: CallParams<TemplatesArgs['obj']['tmpl()void'] | TemplatesArgs['tuple']['tmpl()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TemplatesParamsFactory.tmpl(params))
    },

    /**
     * Makes a call to the Templates smart contract using the `specificLengthTemplateVar()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    specificLengthTemplateVar: (params: CallParams<TemplatesArgs['obj']['specificLengthTemplateVar()void'] | TemplatesArgs['tuple']['specificLengthTemplateVar()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TemplatesParamsFactory.specificLengthTemplateVar(params))
    },

    /**
     * Makes a call to the Templates smart contract using the `throwError()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    throwError: (params: CallParams<TemplatesArgs['obj']['throwError()void'] | TemplatesArgs['tuple']['throwError()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TemplatesParamsFactory.throwError(params))
    },

    /**
     * Makes a call to the Templates smart contract using the `itobTemplateVar()byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    itobTemplateVar: (params: CallParams<TemplatesArgs['obj']['itobTemplateVar()byte[]'] | TemplatesArgs['tuple']['itobTemplateVar()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TemplatesParamsFactory.itobTemplateVar(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Templates smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Templates smart contract using the `tmpl()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    tmpl: (params: CallParams<TemplatesArgs['obj']['tmpl()void'] | TemplatesArgs['tuple']['tmpl()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TemplatesParamsFactory.tmpl(params))
    },

    /**
     * Makes a call to the Templates smart contract using the `specificLengthTemplateVar()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    specificLengthTemplateVar: (params: CallParams<TemplatesArgs['obj']['specificLengthTemplateVar()void'] | TemplatesArgs['tuple']['specificLengthTemplateVar()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TemplatesParamsFactory.specificLengthTemplateVar(params))
    },

    /**
     * Makes a call to the Templates smart contract using the `throwError()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    throwError: (params: CallParams<TemplatesArgs['obj']['throwError()void'] | TemplatesArgs['tuple']['throwError()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TemplatesParamsFactory.throwError(params))
    },

    /**
     * Makes a call to the Templates smart contract using the `itobTemplateVar()byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    itobTemplateVar: (params: CallParams<TemplatesArgs['obj']['itobTemplateVar()byte[]'] | TemplatesArgs['tuple']['itobTemplateVar()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TemplatesParamsFactory.itobTemplateVar(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Templates smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Templates smart contract using the `tmpl()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    tmpl: async (params: CallParams<TemplatesArgs['obj']['tmpl()void'] | TemplatesArgs['tuple']['tmpl()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TemplatesParamsFactory.tmpl(params))
      return {...result, return: result.return as unknown as (undefined | TemplatesReturns['tmpl()void'])}
    },

    /**
     * Makes a call to the Templates smart contract using the `specificLengthTemplateVar()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    specificLengthTemplateVar: async (params: CallParams<TemplatesArgs['obj']['specificLengthTemplateVar()void'] | TemplatesArgs['tuple']['specificLengthTemplateVar()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TemplatesParamsFactory.specificLengthTemplateVar(params))
      return {...result, return: result.return as unknown as (undefined | TemplatesReturns['specificLengthTemplateVar()void'])}
    },

    /**
     * Makes a call to the Templates smart contract using the `throwError()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    throwError: async (params: CallParams<TemplatesArgs['obj']['throwError()void'] | TemplatesArgs['tuple']['throwError()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TemplatesParamsFactory.throwError(params))
      return {...result, return: result.return as unknown as (undefined | TemplatesReturns['throwError()void'])}
    },

    /**
     * Makes a call to the Templates smart contract using the `itobTemplateVar()byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    itobTemplateVar: async (params: CallParams<TemplatesArgs['obj']['itobTemplateVar()byte[]'] | TemplatesArgs['tuple']['itobTemplateVar()byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TemplatesParamsFactory.itobTemplateVar(params))
      return {...result, return: result.return as unknown as (undefined | TemplatesReturns['itobTemplateVar()byte[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TemplatesClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Templates app
   */
  state = {
  }

  public newGroup(): TemplatesComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a tmpl()void method call against the Templates contract
       */
      tmpl(params: CallParams<TemplatesArgs['obj']['tmpl()void'] | TemplatesArgs['tuple']['tmpl()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.tmpl(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a specificLengthTemplateVar()void method call against the Templates contract
       */
      specificLengthTemplateVar(params: CallParams<TemplatesArgs['obj']['specificLengthTemplateVar()void'] | TemplatesArgs['tuple']['specificLengthTemplateVar()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.specificLengthTemplateVar(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a throwError()void method call against the Templates contract
       */
      throwError(params: CallParams<TemplatesArgs['obj']['throwError()void'] | TemplatesArgs['tuple']['throwError()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.throwError(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a itobTemplateVar()byte[] method call against the Templates contract
       */
      itobTemplateVar(params: CallParams<TemplatesArgs['obj']['itobTemplateVar()byte[]'] | TemplatesArgs['tuple']['itobTemplateVar()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.itobTemplateVar(params)))
        resultMappers.push((v) => client.decodeReturnValue('itobTemplateVar()byte[]', v))
        return this
      },
      /**
       * Add a clear state call to the Templates contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TemplatesComposer
  }
}
export type TemplatesComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the tmpl()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  tmpl(params?: CallParams<TemplatesArgs['obj']['tmpl()void'] | TemplatesArgs['tuple']['tmpl()void']>): TemplatesComposer<[...TReturns, TemplatesReturns['tmpl()void'] | undefined]>

  /**
   * Calls the specificLengthTemplateVar()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  specificLengthTemplateVar(params?: CallParams<TemplatesArgs['obj']['specificLengthTemplateVar()void'] | TemplatesArgs['tuple']['specificLengthTemplateVar()void']>): TemplatesComposer<[...TReturns, TemplatesReturns['specificLengthTemplateVar()void'] | undefined]>

  /**
   * Calls the throwError()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  throwError(params?: CallParams<TemplatesArgs['obj']['throwError()void'] | TemplatesArgs['tuple']['throwError()void']>): TemplatesComposer<[...TReturns, TemplatesReturns['throwError()void'] | undefined]>

  /**
   * Calls the itobTemplateVar()byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  itobTemplateVar(params?: CallParams<TemplatesArgs['obj']['itobTemplateVar()byte[]'] | TemplatesArgs['tuple']['itobTemplateVar()byte[]']>): TemplatesComposer<[...TReturns, TemplatesReturns['itobTemplateVar()byte[]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Templates smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TemplatesComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TemplatesComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TemplatesComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TemplatesComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TemplatesComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TemplatesComposerResults<TReturns>>
}
export type TemplatesComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

