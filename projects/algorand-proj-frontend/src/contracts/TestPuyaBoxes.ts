/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"TestPuyaBoxes","structs":{"DummyStruct":[{"name":"name","type":"string"},{"name":"id","type":"uint64"}]},"methods":[{"name":"set_box_bytes","args":[{"name":"name","type":"string"},{"name":"value","type":"byte[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_box_str","args":[{"name":"name","type":"string"},{"name":"value","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_box_int","args":[{"name":"name","type":"string"},{"name":"value","type":"uint32"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_box_int512","args":[{"name":"name","type":"string"},{"name":"value","type":"uint512"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_box_static","args":[{"name":"name","type":"string"},{"name":"value","type":"byte[4]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_struct","args":[{"name":"name","type":"string"},{"name":"value","type":"(string,uint64)","struct":"DummyStruct"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuaGVsbG9fd29ybGQzLmNvbnRyYWN0LlRlc3RQdXlhQm94ZXMuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":["NoOp"],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type DummyStruct = {
  name: string,
  id: bigint
}


/**
 * Converts the ABI tuple representation of a DummyStruct to the struct representation
 */
export function DummyStructFromTuple(abiTuple: [string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.DummyStruct, APP_SPEC.structs) as DummyStruct
}

/**
 * The argument types for the TestPuyaBoxes contract
 */
export type TestPuyaBoxesArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'set_box_bytes(string,byte[])void': {
      name: string
      value: Uint8Array
    }
    'set_box_str(string,string)void': {
      name: string
      value: string
    }
    'set_box_int(string,uint32)void': {
      name: string
      value: bigint | number
    }
    'set_box_int512(string,uint512)void': {
      name: string
      value: bigint | number
    }
    'set_box_static(string,byte[4])void': {
      name: string
      value: Uint8Array
    }
    'set_struct(string,(string,uint64))void': {
      name: string
      value: DummyStruct
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'set_box_bytes(string,byte[])void': [name: string, value: Uint8Array]
    'set_box_str(string,string)void': [name: string, value: string]
    'set_box_int(string,uint32)void': [name: string, value: bigint | number]
    'set_box_int512(string,uint512)void': [name: string, value: bigint | number]
    'set_box_static(string,byte[4])void': [name: string, value: Uint8Array]
    'set_struct(string,(string,uint64))void': [name: string, value: DummyStruct]
  }
}

/**
 * The return type for each method
 */
export type TestPuyaBoxesReturns = {
  'set_box_bytes(string,byte[])void': void
  'set_box_str(string,string)void': void
  'set_box_int(string,uint32)void': void
  'set_box_int512(string,uint512)void': void
  'set_box_static(string,byte[4])void': void
  'set_struct(string,(string,uint64))void': void
}

/**
 * Defines the types of available calls and state of the TestPuyaBoxes smart contract.
 */
export type TestPuyaBoxesTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'set_box_bytes(string,byte[])void' | 'set_box_bytes', {
      argsObj: TestPuyaBoxesArgs['obj']['set_box_bytes(string,byte[])void']
      argsTuple: TestPuyaBoxesArgs['tuple']['set_box_bytes(string,byte[])void']
      returns: TestPuyaBoxesReturns['set_box_bytes(string,byte[])void']
    }>
    & Record<'set_box_str(string,string)void' | 'set_box_str', {
      argsObj: TestPuyaBoxesArgs['obj']['set_box_str(string,string)void']
      argsTuple: TestPuyaBoxesArgs['tuple']['set_box_str(string,string)void']
      returns: TestPuyaBoxesReturns['set_box_str(string,string)void']
    }>
    & Record<'set_box_int(string,uint32)void' | 'set_box_int', {
      argsObj: TestPuyaBoxesArgs['obj']['set_box_int(string,uint32)void']
      argsTuple: TestPuyaBoxesArgs['tuple']['set_box_int(string,uint32)void']
      returns: TestPuyaBoxesReturns['set_box_int(string,uint32)void']
    }>
    & Record<'set_box_int512(string,uint512)void' | 'set_box_int512', {
      argsObj: TestPuyaBoxesArgs['obj']['set_box_int512(string,uint512)void']
      argsTuple: TestPuyaBoxesArgs['tuple']['set_box_int512(string,uint512)void']
      returns: TestPuyaBoxesReturns['set_box_int512(string,uint512)void']
    }>
    & Record<'set_box_static(string,byte[4])void' | 'set_box_static', {
      argsObj: TestPuyaBoxesArgs['obj']['set_box_static(string,byte[4])void']
      argsTuple: TestPuyaBoxesArgs['tuple']['set_box_static(string,byte[4])void']
      returns: TestPuyaBoxesReturns['set_box_static(string,byte[4])void']
    }>
    & Record<'set_struct(string,(string,uint64))void' | 'set_struct', {
      argsObj: TestPuyaBoxesArgs['obj']['set_struct(string,(string,uint64))void']
      argsTuple: TestPuyaBoxesArgs['tuple']['set_struct(string,(string,uint64))void']
      returns: TestPuyaBoxesReturns['set_struct(string,(string,uint64))void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type TestPuyaBoxesSignatures = keyof TestPuyaBoxesTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TestPuyaBoxesNonVoidMethodSignatures = keyof TestPuyaBoxesTypes['methods'] extends infer T ? T extends keyof TestPuyaBoxesTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TestPuyaBoxes smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TestPuyaBoxesSignatures> = TestPuyaBoxesTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TestPuyaBoxes smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TestPuyaBoxesSignatures> = TestPuyaBoxesTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type TestPuyaBoxesCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TestPuyaBoxesDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TestPuyaBoxesCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TestPuyaBoxes smart contract
 */
export abstract class TestPuyaBoxesParamsFactory {
  /**
   * Constructs a no op call for the set_box_bytes(string,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBoxBytes(params: CallParams<TestPuyaBoxesArgs['obj']['set_box_bytes(string,byte[])void'] | TestPuyaBoxesArgs['tuple']['set_box_bytes(string,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_box_bytes(string,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the set_box_str(string,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBoxStr(params: CallParams<TestPuyaBoxesArgs['obj']['set_box_str(string,string)void'] | TestPuyaBoxesArgs['tuple']['set_box_str(string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_box_str(string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the set_box_int(string,uint32)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBoxInt(params: CallParams<TestPuyaBoxesArgs['obj']['set_box_int(string,uint32)void'] | TestPuyaBoxesArgs['tuple']['set_box_int(string,uint32)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_box_int(string,uint32)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the set_box_int512(string,uint512)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBoxInt512(params: CallParams<TestPuyaBoxesArgs['obj']['set_box_int512(string,uint512)void'] | TestPuyaBoxesArgs['tuple']['set_box_int512(string,uint512)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_box_int512(string,uint512)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the set_box_static(string,byte[4])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBoxStatic(params: CallParams<TestPuyaBoxesArgs['obj']['set_box_static(string,byte[4])void'] | TestPuyaBoxesArgs['tuple']['set_box_static(string,byte[4])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_box_static(string,byte[4])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the set_struct(string,(string,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setStruct(params: CallParams<TestPuyaBoxesArgs['obj']['set_struct(string,(string,uint64))void'] | TestPuyaBoxesArgs['tuple']['set_struct(string,(string,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_struct(string,(string,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.value],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TestPuyaBoxes smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TestPuyaBoxesFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TestPuyaBoxesFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TestPuyaBoxesClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TestPuyaBoxesClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TestPuyaBoxes smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TestPuyaBoxesDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new TestPuyaBoxesClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TestPuyaBoxes smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TestPuyaBoxes smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TestPuyaBoxes smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new TestPuyaBoxesClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TestPuyaBoxes smart contract
 */
export class TestPuyaBoxesClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TestPuyaBoxesClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TestPuyaBoxes app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TestPuyaBoxesClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TestPuyaBoxesNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TestPuyaBoxesClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TestPuyaBoxesClient> {
    return new TestPuyaBoxesClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TestPuyaBoxesClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TestPuyaBoxesClient> {
    return new TestPuyaBoxesClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the TestPuyaBoxes smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_box_bytes(string,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBoxBytes: (params: CallParams<TestPuyaBoxesArgs['obj']['set_box_bytes(string,byte[])void'] | TestPuyaBoxesArgs['tuple']['set_box_bytes(string,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TestPuyaBoxesParamsFactory.setBoxBytes(params))
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_box_str(string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBoxStr: (params: CallParams<TestPuyaBoxesArgs['obj']['set_box_str(string,string)void'] | TestPuyaBoxesArgs['tuple']['set_box_str(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TestPuyaBoxesParamsFactory.setBoxStr(params))
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_box_int(string,uint32)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBoxInt: (params: CallParams<TestPuyaBoxesArgs['obj']['set_box_int(string,uint32)void'] | TestPuyaBoxesArgs['tuple']['set_box_int(string,uint32)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TestPuyaBoxesParamsFactory.setBoxInt(params))
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_box_int512(string,uint512)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBoxInt512: (params: CallParams<TestPuyaBoxesArgs['obj']['set_box_int512(string,uint512)void'] | TestPuyaBoxesArgs['tuple']['set_box_int512(string,uint512)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TestPuyaBoxesParamsFactory.setBoxInt512(params))
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_box_static(string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBoxStatic: (params: CallParams<TestPuyaBoxesArgs['obj']['set_box_static(string,byte[4])void'] | TestPuyaBoxesArgs['tuple']['set_box_static(string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TestPuyaBoxesParamsFactory.setBoxStatic(params))
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_struct(string,(string,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setStruct: (params: CallParams<TestPuyaBoxesArgs['obj']['set_struct(string,(string,uint64))void'] | TestPuyaBoxesArgs['tuple']['set_struct(string,(string,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TestPuyaBoxesParamsFactory.setStruct(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the TestPuyaBoxes smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_box_bytes(string,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBoxBytes: (params: CallParams<TestPuyaBoxesArgs['obj']['set_box_bytes(string,byte[])void'] | TestPuyaBoxesArgs['tuple']['set_box_bytes(string,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TestPuyaBoxesParamsFactory.setBoxBytes(params))
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_box_str(string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBoxStr: (params: CallParams<TestPuyaBoxesArgs['obj']['set_box_str(string,string)void'] | TestPuyaBoxesArgs['tuple']['set_box_str(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TestPuyaBoxesParamsFactory.setBoxStr(params))
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_box_int(string,uint32)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBoxInt: (params: CallParams<TestPuyaBoxesArgs['obj']['set_box_int(string,uint32)void'] | TestPuyaBoxesArgs['tuple']['set_box_int(string,uint32)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TestPuyaBoxesParamsFactory.setBoxInt(params))
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_box_int512(string,uint512)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBoxInt512: (params: CallParams<TestPuyaBoxesArgs['obj']['set_box_int512(string,uint512)void'] | TestPuyaBoxesArgs['tuple']['set_box_int512(string,uint512)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TestPuyaBoxesParamsFactory.setBoxInt512(params))
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_box_static(string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBoxStatic: (params: CallParams<TestPuyaBoxesArgs['obj']['set_box_static(string,byte[4])void'] | TestPuyaBoxesArgs['tuple']['set_box_static(string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TestPuyaBoxesParamsFactory.setBoxStatic(params))
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_struct(string,(string,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setStruct: (params: CallParams<TestPuyaBoxesArgs['obj']['set_struct(string,(string,uint64))void'] | TestPuyaBoxesArgs['tuple']['set_struct(string,(string,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TestPuyaBoxesParamsFactory.setStruct(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the TestPuyaBoxes smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_box_bytes(string,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBoxBytes: async (params: CallParams<TestPuyaBoxesArgs['obj']['set_box_bytes(string,byte[])void'] | TestPuyaBoxesArgs['tuple']['set_box_bytes(string,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TestPuyaBoxesParamsFactory.setBoxBytes(params))
      return {...result, return: result.return as unknown as (undefined | TestPuyaBoxesReturns['set_box_bytes(string,byte[])void'])}
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_box_str(string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBoxStr: async (params: CallParams<TestPuyaBoxesArgs['obj']['set_box_str(string,string)void'] | TestPuyaBoxesArgs['tuple']['set_box_str(string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TestPuyaBoxesParamsFactory.setBoxStr(params))
      return {...result, return: result.return as unknown as (undefined | TestPuyaBoxesReturns['set_box_str(string,string)void'])}
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_box_int(string,uint32)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBoxInt: async (params: CallParams<TestPuyaBoxesArgs['obj']['set_box_int(string,uint32)void'] | TestPuyaBoxesArgs['tuple']['set_box_int(string,uint32)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TestPuyaBoxesParamsFactory.setBoxInt(params))
      return {...result, return: result.return as unknown as (undefined | TestPuyaBoxesReturns['set_box_int(string,uint32)void'])}
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_box_int512(string,uint512)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBoxInt512: async (params: CallParams<TestPuyaBoxesArgs['obj']['set_box_int512(string,uint512)void'] | TestPuyaBoxesArgs['tuple']['set_box_int512(string,uint512)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TestPuyaBoxesParamsFactory.setBoxInt512(params))
      return {...result, return: result.return as unknown as (undefined | TestPuyaBoxesReturns['set_box_int512(string,uint512)void'])}
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_box_static(string,byte[4])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBoxStatic: async (params: CallParams<TestPuyaBoxesArgs['obj']['set_box_static(string,byte[4])void'] | TestPuyaBoxesArgs['tuple']['set_box_static(string,byte[4])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TestPuyaBoxesParamsFactory.setBoxStatic(params))
      return {...result, return: result.return as unknown as (undefined | TestPuyaBoxesReturns['set_box_static(string,byte[4])void'])}
    },

    /**
     * Makes a call to the TestPuyaBoxes smart contract using the `set_struct(string,(string,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setStruct: async (params: CallParams<TestPuyaBoxesArgs['obj']['set_struct(string,(string,uint64))void'] | TestPuyaBoxesArgs['tuple']['set_struct(string,(string,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TestPuyaBoxesParamsFactory.setStruct(params))
      return {...result, return: result.return as unknown as (undefined | TestPuyaBoxesReturns['set_struct(string,(string,uint64))void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TestPuyaBoxesClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current TestPuyaBoxes app
   */
  state = {
  }

  public newGroup(): TestPuyaBoxesComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a set_box_bytes(string,byte[])void method call against the TestPuyaBoxes contract
       */
      setBoxBytes(params: CallParams<TestPuyaBoxesArgs['obj']['set_box_bytes(string,byte[])void'] | TestPuyaBoxesArgs['tuple']['set_box_bytes(string,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBoxBytes(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_box_str(string,string)void method call against the TestPuyaBoxes contract
       */
      setBoxStr(params: CallParams<TestPuyaBoxesArgs['obj']['set_box_str(string,string)void'] | TestPuyaBoxesArgs['tuple']['set_box_str(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBoxStr(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_box_int(string,uint32)void method call against the TestPuyaBoxes contract
       */
      setBoxInt(params: CallParams<TestPuyaBoxesArgs['obj']['set_box_int(string,uint32)void'] | TestPuyaBoxesArgs['tuple']['set_box_int(string,uint32)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBoxInt(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_box_int512(string,uint512)void method call against the TestPuyaBoxes contract
       */
      setBoxInt512(params: CallParams<TestPuyaBoxesArgs['obj']['set_box_int512(string,uint512)void'] | TestPuyaBoxesArgs['tuple']['set_box_int512(string,uint512)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBoxInt512(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_box_static(string,byte[4])void method call against the TestPuyaBoxes contract
       */
      setBoxStatic(params: CallParams<TestPuyaBoxesArgs['obj']['set_box_static(string,byte[4])void'] | TestPuyaBoxesArgs['tuple']['set_box_static(string,byte[4])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBoxStatic(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_struct(string,(string,uint64))void method call against the TestPuyaBoxes contract
       */
      setStruct(params: CallParams<TestPuyaBoxesArgs['obj']['set_struct(string,(string,uint64))void'] | TestPuyaBoxesArgs['tuple']['set_struct(string,(string,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setStruct(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the TestPuyaBoxes contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TestPuyaBoxesComposer
  }
}
export type TestPuyaBoxesComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_box_bytes(string,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBoxBytes(params?: CallParams<TestPuyaBoxesArgs['obj']['set_box_bytes(string,byte[])void'] | TestPuyaBoxesArgs['tuple']['set_box_bytes(string,byte[])void']>): TestPuyaBoxesComposer<[...TReturns, TestPuyaBoxesReturns['set_box_bytes(string,byte[])void'] | undefined]>

  /**
   * Calls the set_box_str(string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBoxStr(params?: CallParams<TestPuyaBoxesArgs['obj']['set_box_str(string,string)void'] | TestPuyaBoxesArgs['tuple']['set_box_str(string,string)void']>): TestPuyaBoxesComposer<[...TReturns, TestPuyaBoxesReturns['set_box_str(string,string)void'] | undefined]>

  /**
   * Calls the set_box_int(string,uint32)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBoxInt(params?: CallParams<TestPuyaBoxesArgs['obj']['set_box_int(string,uint32)void'] | TestPuyaBoxesArgs['tuple']['set_box_int(string,uint32)void']>): TestPuyaBoxesComposer<[...TReturns, TestPuyaBoxesReturns['set_box_int(string,uint32)void'] | undefined]>

  /**
   * Calls the set_box_int512(string,uint512)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBoxInt512(params?: CallParams<TestPuyaBoxesArgs['obj']['set_box_int512(string,uint512)void'] | TestPuyaBoxesArgs['tuple']['set_box_int512(string,uint512)void']>): TestPuyaBoxesComposer<[...TReturns, TestPuyaBoxesReturns['set_box_int512(string,uint512)void'] | undefined]>

  /**
   * Calls the set_box_static(string,byte[4])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBoxStatic(params?: CallParams<TestPuyaBoxesArgs['obj']['set_box_static(string,byte[4])void'] | TestPuyaBoxesArgs['tuple']['set_box_static(string,byte[4])void']>): TestPuyaBoxesComposer<[...TReturns, TestPuyaBoxesReturns['set_box_static(string,byte[4])void'] | undefined]>

  /**
   * Calls the set_struct(string,(string,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setStruct(params?: CallParams<TestPuyaBoxesArgs['obj']['set_struct(string,(string,uint64))void'] | TestPuyaBoxesArgs['tuple']['set_struct(string,(string,uint64))void']>): TestPuyaBoxesComposer<[...TReturns, TestPuyaBoxesReturns['set_struct(string,(string,uint64))void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the TestPuyaBoxes smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TestPuyaBoxesComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TestPuyaBoxesComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TestPuyaBoxesComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TestPuyaBoxesComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TestPuyaBoxesComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TestPuyaBoxesComposerResults<TReturns>>
}
export type TestPuyaBoxesComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

