/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"NestedStruct","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"setValue","args":[{"name":"key","type":"uint64"},{"name":"value","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getValue","args":[{"name":"key","type":"uint64"}],"returns":{"type":"((string))","struct":"Struct2"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Struct2":[{"name":"x","type":[{"name":"a","type":"string"}]}]},"state":{"schema":{"global":{"bytes":10,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{"state":{"keyType":"uint64","valueType":"Struct2"}},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"nested_struct.algo.ts:6","pc":[0]},{"teal":2,"source":"nested_struct.algo.ts:6","pc":[1,2,3]},{"teal":3,"source":"nested_struct.algo.ts:6","pc":[4,5,6,7,8,9]},{"teal":15,"source":"nested_struct.algo.ts:6","pc":[10,11]},{"teal":16,"source":"nested_struct.algo.ts:6","pc":[12]},{"teal":17,"source":"nested_struct.algo.ts:6","pc":[13,14]},{"teal":18,"source":"nested_struct.algo.ts:6","pc":[15]},{"teal":19,"source":"nested_struct.algo.ts:6","pc":[16,17]},{"teal":20,"source":"nested_struct.algo.ts:6","pc":[18]},{"teal":21,"source":"nested_struct.algo.ts:6","pc":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44]},{"teal":25,"source":"nested_struct.algo.ts:6","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[45]},{"teal":30,"source":"nested_struct.algo.ts:7","pc":[46,47,48]},{"teal":31,"source":"nested_struct.algo.ts:7","pc":[49]},{"teal":32,"source":"nested_struct.algo.ts:7","pc":[50]},{"teal":36,"source":"nested_struct.algo.ts:7","pc":[51,52,53]},{"teal":37,"source":"nested_struct.algo.ts:7","pc":[54]},{"teal":42,"source":"nested_struct.algo.ts:11","pc":[55,56,57]},{"teal":43,"source":"nested_struct.algo.ts:11","pc":[58,59,60]},{"teal":46,"source":"nested_struct.algo.ts:11","pc":[61,62,63]},{"teal":47,"source":"nested_struct.algo.ts:11","pc":[64]},{"teal":50,"source":"nested_struct.algo.ts:11","pc":[65,66,67]},{"teal":51,"source":"nested_struct.algo.ts:11","pc":[68]},{"teal":52,"source":"nested_struct.algo.ts:11","pc":[69]},{"teal":56,"source":"nested_struct.algo.ts:11","pc":[70,71,72]},{"teal":60,"source":"nested_struct.algo.ts:12","pc":[73,74]},{"teal":61,"source":"nested_struct.algo.ts:12","pc":[75]},{"teal":62,"source":"nested_struct.algo.ts:12","pc":[76]},{"teal":63,"source":"nested_struct.algo.ts:12","pc":[77]},{"teal":64,"source":"nested_struct.algo.ts:12","pc":[78]},{"teal":65,"source":"nested_struct.algo.ts:12","pc":[79]},{"teal":66,"source":"nested_struct.algo.ts:12","pc":[80]},{"teal":67,"source":"nested_struct.algo.ts:12","pc":[81]},{"teal":68,"source":"nested_struct.algo.ts:12","pc":[82,83]},{"teal":69,"source":"nested_struct.algo.ts:12","pc":[84]},{"teal":70,"source":"nested_struct.algo.ts:12","pc":[85]},{"teal":71,"source":"nested_struct.algo.ts:12","pc":[86]},{"teal":72,"source":"nested_struct.algo.ts:12","pc":[87,88,89]},{"teal":73,"source":"nested_struct.algo.ts:12","pc":[90]},{"teal":74,"source":"nested_struct.algo.ts:12","pc":[91]},{"teal":75,"source":"nested_struct.algo.ts:12","pc":[92,93,94]},{"teal":76,"source":"nested_struct.algo.ts:12","pc":[95]},{"teal":77,"source":"nested_struct.algo.ts:12","pc":[96]},{"teal":78,"source":"nested_struct.algo.ts:12","pc":[97,98,99]},{"teal":79,"source":"nested_struct.algo.ts:12","pc":[100]},{"teal":80,"source":"nested_struct.algo.ts:12","pc":[101]},{"teal":81,"source":"nested_struct.algo.ts:12","pc":[102]},{"teal":82,"source":"nested_struct.algo.ts:11","pc":[103]},{"teal":87,"source":"nested_struct.algo.ts:15","pc":[104,105,106,107,108,109]},{"teal":90,"source":"nested_struct.algo.ts:15","pc":[110,111,112]},{"teal":91,"source":"nested_struct.algo.ts:15","pc":[113]},{"teal":94,"source":"nested_struct.algo.ts:15","pc":[114,115,116]},{"teal":95,"source":"nested_struct.algo.ts:15","pc":[117]},{"teal":96,"source":"nested_struct.algo.ts:15","pc":[118]},{"teal":97,"source":"nested_struct.algo.ts:15","pc":[119]},{"teal":98,"source":"nested_struct.algo.ts:15","pc":[120]},{"teal":102,"source":"nested_struct.algo.ts:15","pc":[121,122,123]},{"teal":106,"source":"nested_struct.algo.ts:16","pc":[124,125]},{"teal":107,"source":"nested_struct.algo.ts:16","pc":[126]},{"teal":108,"source":"nested_struct.algo.ts:16","pc":[127]},{"teal":109,"source":"nested_struct.algo.ts:15","pc":[128]},{"teal":112,"source":"nested_struct.algo.ts:6","pc":[129,130,131,132,133,134]},{"teal":113,"source":"nested_struct.algo.ts:6","pc":[135,136,137]},{"teal":114,"source":"nested_struct.algo.ts:6","pc":[138,139,140,141]},{"teal":117,"source":"nested_struct.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[142]},{"teal":120,"source":"nested_struct.algo.ts:6","pc":[143,144,145,146,147,148]},{"teal":121,"source":"nested_struct.algo.ts:6","pc":[149,150,151,152,153,154]},{"teal":122,"source":"nested_struct.algo.ts:6","pc":[155,156,157]},{"teal":123,"source":"nested_struct.algo.ts:6","pc":[158,159,160,161,162,163]},{"teal":126,"source":"nested_struct.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[164]},{"teal":129,"source":"nested_struct.algo.ts:6","pc":[165,166,167]},{"teal":130,"source":"nested_struct.algo.ts:6","pc":[168,169]},{"teal":131,"source":"nested_struct.algo.ts:6","pc":[170,171]},{"teal":132,"source":"nested_struct.algo.ts:6","pc":[172]},{"teal":133,"source":"nested_struct.algo.ts:6","pc":[173,174]},{"teal":134,"source":"nested_struct.algo.ts:6","pc":[175,176]},{"teal":135,"source":"nested_struct.algo.ts:6","pc":[177]},{"teal":136,"source":"nested_struct.algo.ts:6","pc":[178]},{"teal":137,"source":"nested_struct.algo.ts:6","pc":[179,180]},{"teal":138,"source":"nested_struct.algo.ts:6","pc":[181]},{"teal":139,"source":"nested_struct.algo.ts:6","pc":[182]},{"teal":140,"source":"nested_struct.algo.ts:6","pc":[183]},{"teal":141,"source":"nested_struct.algo.ts:6","pc":[184,185,186]},{"teal":142,"source":"nested_struct.algo.ts:6","pc":[187,188]},{"teal":143,"source":"nested_struct.algo.ts:6","pc":[189,190]},{"teal":144,"source":"nested_struct.algo.ts:6","pc":[191]},{"teal":145,"source":"nested_struct.algo.ts:6","pc":[192]},{"teal":146,"source":"nested_struct.algo.ts:6","pc":[193,194]},{"teal":147,"source":"nested_struct.algo.ts:6","pc":[195,196]},{"teal":148,"source":"nested_struct.algo.ts:6","pc":[197,198]},{"teal":149,"source":"nested_struct.algo.ts:6","pc":[199,200]},{"teal":150,"source":"nested_struct.algo.ts:6","pc":[201]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxCmJ5dGVjYmxvY2sgMHggMHgwMDAyCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNi4zCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQpwdXNoaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQKCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKCk6IHZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAwIDAKCXJldHN1YgoKLy8gc2V0VmFsdWUodWludDY0LHN0cmluZyl2b2lkCiphYmlfcm91dGVfc2V0VmFsdWU6CgkvLyB2YWx1ZTogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIGtleTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBzZXRWYWx1ZSh1aW50NjQsc3RyaW5nKXZvaWQKCWNhbGxzdWIgc2V0VmFsdWUKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHNldFZhbHVlKGtleTogdWludDY0LCB2YWx1ZTogc3RyaW5nKTogdm9pZApzZXRWYWx1ZToKCXByb3RvIDIgMAoKCS8vIG5lc3RlZF9zdHJ1Y3QuYWxnby50czoxMgoJLy8gdGhpcy5zdGF0ZShrZXkpLnZhbHVlID0geyB4OiB7IGE6IHZhbHVlIH0gfQoJZnJhbWVfZGlnIC0xIC8vIGtleTogdWludDY0CglpdG9iCglieXRlYyAwIC8vICBpbml0aWFsIGhlYWQKCWJ5dGVjIDAgLy8gIGluaXRpYWwgdGFpbAoJYnl0ZWMgMSAvLyAgaW5pdGlhbCBoZWFkIG9mZnNldAoJYnl0ZWMgMCAvLyAgaW5pdGlhbCBoZWFkCglieXRlYyAwIC8vICBpbml0aWFsIHRhaWwKCWJ5dGVjIDEgLy8gIGluaXRpYWwgaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMiAvLyB2YWx1ZTogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY2FsbHN1YiAqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCXBvcCAvLyBwb3AgaGVhZCBvZmZzZXQKCWNvbmNhdCAvLyBjb25jYXQgaGVhZCBhbmQgdGFpbAoJY2FsbHN1YiAqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCXBvcCAvLyBwb3AgaGVhZCBvZmZzZXQKCWNvbmNhdCAvLyBjb25jYXQgaGVhZCBhbmQgdGFpbAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gZ2V0VmFsdWUodWludDY0KSgoc3RyaW5nKSkKKmFiaV9yb3V0ZV9nZXRWYWx1ZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJcHVzaGJ5dGVzIDB4MTUxZjdjNzUKCgkvLyBrZXk6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgZ2V0VmFsdWUodWludDY0KSgoc3RyaW5nKSkKCWNhbGxzdWIgZ2V0VmFsdWUKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBnZXRWYWx1ZShrZXk6IHVpbnQ2NCk6IFN0cnVjdDIKZ2V0VmFsdWU6Cglwcm90byAxIDEKCgkvLyBuZXN0ZWRfc3RydWN0LmFsZ28udHM6MTYKCS8vIHJldHVybiB0aGlzLnN0YXRlKGtleSkudmFsdWUKCWZyYW1lX2RpZyAtMSAvLyBrZXk6IHVpbnQ2NAoJaXRvYgoJYXBwX2dsb2JhbF9nZXQKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJcHVzaGJ5dGVzIDB4Yjg0NDdiMzYgLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY3JlYXRlIE5vT3AKCWVycgoKKmNhbGxfTm9PcDoKCXB1c2hieXRlcyAweGUwNjVjNDcwIC8vIG1ldGhvZCAic2V0VmFsdWUodWludDY0LHN0cmluZyl2b2lkIgoJcHVzaGJ5dGVzIDB4ZjQ3MGZkYjYgLy8gbWV0aG9kICJnZXRWYWx1ZSh1aW50NjQpKChzdHJpbmcpKSIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfc2V0VmFsdWUgKmFiaV9yb3V0ZV9nZXRWYWx1ZQoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycgoKKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50OgoJcHJvdG8gNCAzCglmcmFtZV9kaWcgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0xIC8vIGVsZW1lbnQKCWR1cAoJbGVuCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCWJ0b2kKCSsKCWl0b2IKCWV4dHJhY3QgNiAyCglmcmFtZV9idXJ5IC0yIC8vIGhlYWQgb2Zmc2V0CglmcmFtZV9kaWcgLTMgLy8gdHVwbGUgdGFpbAoJc3dhcAoJY29uY2F0CglmcmFtZV9idXJ5IC0zIC8vIHR1cGxlIHRhaWwKCWZyYW1lX2RpZyAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTMgLy8gdHVwbGUgdGFpbAoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0CglyZXRzdWI=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiABASYCAAIAAjEYFIEGCzEZCI0MAGIAAAAAAAAAAAAAAFQAAAAAAAAAAAAAAIgAAiJDigAAiTYaAlcCADYaAReIAAIiQ4oCAIv/FigoKSgoKYv+SRUWVwYCTFCIAEZIUIgAQUhQZ4mABBUffHU2GgEXiAAEULAiQ4oBAYv/FmSJgAS4RHs2NhoAjgH/oACABOBlxHCABPRw/bY2GgCOAv+T/8QAigQDi/yL/lCM/Iv/SRWL/hcIFlcGAoz+i/1MUIz9i/yL/Yv+iQ==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":1,"patch":2,"commitHash":"088f89dd"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Struct2 = {
  x: {
    a: string
  }
}


/**
 * Converts the ABI tuple representation of a Struct2 to the struct representation
 */
export function Struct2FromTuple(abiTuple: [[string]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Struct2, APP_SPEC.structs) as Struct2
}

/**
 * The argument types for the NestedStruct contract
 */
export type NestedStructArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'setValue(uint64,string)void': {
      key: bigint | number
      value: string
    }
    'getValue(uint64)((string))': {
      key: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'setValue(uint64,string)void': [key: bigint | number, value: string]
    'getValue(uint64)((string))': [key: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type NestedStructReturns = {
  'createApplication()void': void
  'setValue(uint64,string)void': void
  'getValue(uint64)((string))': Struct2
}

/**
 * Defines the types of available calls and state of the NestedStruct smart contract.
 */
export type NestedStructTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: NestedStructArgs['obj']['createApplication()void']
      argsTuple: NestedStructArgs['tuple']['createApplication()void']
      returns: NestedStructReturns['createApplication()void']
    }>
    & Record<'setValue(uint64,string)void' | 'setValue', {
      argsObj: NestedStructArgs['obj']['setValue(uint64,string)void']
      argsTuple: NestedStructArgs['tuple']['setValue(uint64,string)void']
      returns: NestedStructReturns['setValue(uint64,string)void']
    }>
    & Record<'getValue(uint64)((string))' | 'getValue', {
      argsObj: NestedStructArgs['obj']['getValue(uint64)((string))']
      argsTuple: NestedStructArgs['tuple']['getValue(uint64)((string))']
      returns: NestedStructReturns['getValue(uint64)((string))']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {}
      maps: {
        state: Map<bigint | number, Struct2>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type NestedStructSignatures = keyof NestedStructTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type NestedStructNonVoidMethodSignatures = keyof NestedStructTypes['methods'] extends infer T ? T extends keyof NestedStructTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the NestedStruct smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends NestedStructSignatures> = NestedStructTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the NestedStruct smart contract to the method's return type
 */
export type MethodReturn<TSignature extends NestedStructSignatures> = NestedStructTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = NestedStructTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type NestedStructCreateCallParams =
  | Expand<CallParams<NestedStructArgs['obj']['createApplication()void'] | NestedStructArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<NestedStructArgs['obj']['createApplication()void'] | NestedStructArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type NestedStructDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: NestedStructCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the NestedStruct smart contract
 */
export abstract class NestedStructParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends NestedStructCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return NestedStructParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the NestedStruct smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<NestedStructArgs['obj']['createApplication()void'] | NestedStructArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the setValue(uint64,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setValue(params: CallParams<NestedStructArgs['obj']['setValue(uint64,string)void'] | NestedStructArgs['tuple']['setValue(uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setValue(uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the getValue(uint64)((string)) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getValue(params: CallParams<NestedStructArgs['obj']['getValue(uint64)((string))'] | NestedStructArgs['tuple']['getValue(uint64)((string))']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getValue(uint64)((string))' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the NestedStruct smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class NestedStructFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `NestedStructFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new NestedStructClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new NestedStructClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the NestedStruct smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: NestedStructDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? NestedStructParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (NestedStructCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new NestedStructClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NestedStruct smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<NestedStructArgs['obj']['createApplication()void'] | NestedStructArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(NestedStructParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NestedStruct smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<NestedStructArgs['obj']['createApplication()void'] | NestedStructArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(NestedStructParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the NestedStruct smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<NestedStructArgs['obj']['createApplication()void'] | NestedStructArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(NestedStructParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | NestedStructReturns['createApplication()void']) }, appClient: new NestedStructClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the NestedStruct smart contract
 */
export class NestedStructClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `NestedStructClient`
   *
   * @param appClient An `AppClient` instance which has been created with the NestedStruct app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `NestedStructClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends NestedStructNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `NestedStructClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<NestedStructClient> {
    return new NestedStructClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `NestedStructClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<NestedStructClient> {
    return new NestedStructClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the NestedStruct smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the NestedStruct smart contract using the `setValue(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setValue: (params: CallParams<NestedStructArgs['obj']['setValue(uint64,string)void'] | NestedStructArgs['tuple']['setValue(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NestedStructParamsFactory.setValue(params))
    },

    /**
     * Makes a call to the NestedStruct smart contract using the `getValue(uint64)((string))` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getValue: (params: CallParams<NestedStructArgs['obj']['getValue(uint64)((string))'] | NestedStructArgs['tuple']['getValue(uint64)((string))']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(NestedStructParamsFactory.getValue(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the NestedStruct smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the NestedStruct smart contract using the `setValue(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setValue: (params: CallParams<NestedStructArgs['obj']['setValue(uint64,string)void'] | NestedStructArgs['tuple']['setValue(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NestedStructParamsFactory.setValue(params))
    },

    /**
     * Makes a call to the NestedStruct smart contract using the `getValue(uint64)((string))` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getValue: (params: CallParams<NestedStructArgs['obj']['getValue(uint64)((string))'] | NestedStructArgs['tuple']['getValue(uint64)((string))']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(NestedStructParamsFactory.getValue(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the NestedStruct smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the NestedStruct smart contract using the `setValue(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setValue: async (params: CallParams<NestedStructArgs['obj']['setValue(uint64,string)void'] | NestedStructArgs['tuple']['setValue(uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NestedStructParamsFactory.setValue(params))
      return {...result, return: result.return as unknown as (undefined | NestedStructReturns['setValue(uint64,string)void'])}
    },

    /**
     * Makes a call to the NestedStruct smart contract using the `getValue(uint64)((string))` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getValue: async (params: CallParams<NestedStructArgs['obj']['getValue(uint64)((string))'] | NestedStructArgs['tuple']['getValue(uint64)((string))']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(NestedStructParamsFactory.getValue(params))
      return {...result, return: result.return as unknown as (undefined | NestedStructReturns['getValue(uint64)((string))'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new NestedStructClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current NestedStruct app
   */
  state = {
    /**
     * Methods to access global state for the current NestedStruct app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
        }
      },
      /**
       * Get values from the state map in global state
       */
      state: {
        /**
         * Get all current values of the state map in global state
         */
        getMap: async (): Promise<Map<bigint, Struct2>> => { return (await this.appClient.state.global.getMap("state")) as Map<bigint, Struct2> },
        /**
         * Get a current value of the state map by key from global state
         */
        value: async (key: bigint | number): Promise<Struct2 | undefined> => { return await this.appClient.state.global.getMapValue("state", key) as Struct2 | undefined },
      },
    },
  }

  public newGroup(): NestedStructComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a setValue(uint64,string)void method call against the NestedStruct contract
       */
      setValue(params: CallParams<NestedStructArgs['obj']['setValue(uint64,string)void'] | NestedStructArgs['tuple']['setValue(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setValue(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getValue(uint64)((string)) method call against the NestedStruct contract
       */
      getValue(params: CallParams<NestedStructArgs['obj']['getValue(uint64)((string))'] | NestedStructArgs['tuple']['getValue(uint64)((string))']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getValue(params)))
        resultMappers.push((v) => client.decodeReturnValue('getValue(uint64)((string))', v))
        return this
      },
      /**
       * Add a clear state call to the NestedStruct contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as NestedStructComposer
  }
}
export type NestedStructComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setValue(uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setValue(params?: CallParams<NestedStructArgs['obj']['setValue(uint64,string)void'] | NestedStructArgs['tuple']['setValue(uint64,string)void']>): NestedStructComposer<[...TReturns, NestedStructReturns['setValue(uint64,string)void'] | undefined]>

  /**
   * Calls the getValue(uint64)((string)) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getValue(params?: CallParams<NestedStructArgs['obj']['getValue(uint64)((string))'] | NestedStructArgs['tuple']['getValue(uint64)((string))']>): NestedStructComposer<[...TReturns, NestedStructReturns['getValue(uint64)((string))'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the NestedStruct smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): NestedStructComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): NestedStructComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<NestedStructComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<NestedStructComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<NestedStructComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<NestedStructComposerResults<TReturns>>
}
export type NestedStructComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

