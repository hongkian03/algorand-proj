/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"InnerFeeContract","structs":{},"methods":[{"name":"burn_ops","args":[{"type":"uint64","name":"op_budget"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"burn_ops_readonly","args":[{"type":"uint64","name":"op_budget"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"no_op","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"send_x_inners_with_fees","args":[{"type":"uint64","name":"app_id"},{"type":"uint64[]","name":"fees"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"send_inners_with_fees","args":[{"type":"uint64","name":"app_id_1"},{"type":"uint64","name":"app_id_2"},{"type":"(uint64,uint64,uint64,uint64,uint64[])","name":"fees"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"send_inners_with_fees_2","args":[{"type":"uint64","name":"app_id_1"},{"type":"uint64","name":"app_id_2"},{"type":"(uint64,uint64,uint64[],uint64,uint64,uint64[])","name":"fees"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[83,99,115,124,143,166],"errorMessage":"OnCompletion is not NoOp"},{"pc":[194],"errorMessage":"can only call when creating"},{"pc":[86,102,118,127,146,169],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudGVzdF9jb250cmFjdC5jb250cmFjdC5Jbm5lckZlZUNvbnRyYWN0LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the InnerFeeContract contract
 */
export type InnerFeeContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'burn_ops(uint64)void': {
      opBudget: bigint | number
    }
    'burn_ops_readonly(uint64)void': {
      opBudget: bigint | number
    }
    'no_op()void': Record<string, never>
    'send_x_inners_with_fees(uint64,uint64[])void': {
      appId: bigint | number
      fees: bigint[] | number[]
    }
    'send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void': {
      appId_1: bigint | number
      appId_2: bigint | number
      fees: [bigint | number, bigint | number, bigint | number, bigint | number, bigint[] | number[]]
    }
    'send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void': {
      appId_1: bigint | number
      appId_2: bigint | number
      fees: [bigint | number, bigint | number, bigint[] | number[], bigint | number, bigint | number, bigint[] | number[]]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'burn_ops(uint64)void': [opBudget: bigint | number]
    'burn_ops_readonly(uint64)void': [opBudget: bigint | number]
    'no_op()void': []
    'send_x_inners_with_fees(uint64,uint64[])void': [appId: bigint | number, fees: bigint[] | number[]]
    'send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void': [appId_1: bigint | number, appId_2: bigint | number, fees: [bigint | number, bigint | number, bigint | number, bigint | number, bigint[] | number[]]]
    'send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void': [appId_1: bigint | number, appId_2: bigint | number, fees: [bigint | number, bigint | number, bigint[] | number[], bigint | number, bigint | number, bigint[] | number[]]]
  }
}

/**
 * The return type for each method
 */
export type InnerFeeContractReturns = {
  'burn_ops(uint64)void': void
  'burn_ops_readonly(uint64)void': void
  'no_op()void': void
  'send_x_inners_with_fees(uint64,uint64[])void': void
  'send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void': void
  'send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void': void
}

/**
 * Defines the types of available calls and state of the InnerFeeContract smart contract.
 */
export type InnerFeeContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'burn_ops(uint64)void' | 'burn_ops', {
      argsObj: InnerFeeContractArgs['obj']['burn_ops(uint64)void']
      argsTuple: InnerFeeContractArgs['tuple']['burn_ops(uint64)void']
      returns: InnerFeeContractReturns['burn_ops(uint64)void']
    }>
    & Record<'burn_ops_readonly(uint64)void' | 'burn_ops_readonly', {
      argsObj: InnerFeeContractArgs['obj']['burn_ops_readonly(uint64)void']
      argsTuple: InnerFeeContractArgs['tuple']['burn_ops_readonly(uint64)void']
      returns: InnerFeeContractReturns['burn_ops_readonly(uint64)void']
    }>
    & Record<'no_op()void' | 'no_op', {
      argsObj: InnerFeeContractArgs['obj']['no_op()void']
      argsTuple: InnerFeeContractArgs['tuple']['no_op()void']
      returns: InnerFeeContractReturns['no_op()void']
    }>
    & Record<'send_x_inners_with_fees(uint64,uint64[])void' | 'send_x_inners_with_fees', {
      argsObj: InnerFeeContractArgs['obj']['send_x_inners_with_fees(uint64,uint64[])void']
      argsTuple: InnerFeeContractArgs['tuple']['send_x_inners_with_fees(uint64,uint64[])void']
      returns: InnerFeeContractReturns['send_x_inners_with_fees(uint64,uint64[])void']
    }>
    & Record<'send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void' | 'send_inners_with_fees', {
      argsObj: InnerFeeContractArgs['obj']['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void']
      argsTuple: InnerFeeContractArgs['tuple']['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void']
      returns: InnerFeeContractReturns['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void']
    }>
    & Record<'send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void' | 'send_inners_with_fees_2', {
      argsObj: InnerFeeContractArgs['obj']['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void']
      argsTuple: InnerFeeContractArgs['tuple']['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void']
      returns: InnerFeeContractReturns['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type InnerFeeContractSignatures = keyof InnerFeeContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type InnerFeeContractNonVoidMethodSignatures = keyof InnerFeeContractTypes['methods'] extends infer T ? T extends keyof InnerFeeContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the InnerFeeContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends InnerFeeContractSignatures> = InnerFeeContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the InnerFeeContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends InnerFeeContractSignatures> = InnerFeeContractTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type InnerFeeContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type InnerFeeContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: InnerFeeContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the InnerFeeContract smart contract
 */
export abstract class InnerFeeContractParamsFactory {
  /**
   * Constructs a no op call for the burn_ops(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnOps(params: CallParams<InnerFeeContractArgs['obj']['burn_ops(uint64)void'] | InnerFeeContractArgs['tuple']['burn_ops(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burn_ops(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.opBudget],
    }
  }
  /**
   * Constructs a no op call for the burn_ops_readonly(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnOpsReadonly(params: CallParams<InnerFeeContractArgs['obj']['burn_ops_readonly(uint64)void'] | InnerFeeContractArgs['tuple']['burn_ops_readonly(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burn_ops_readonly(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.opBudget],
    }
  }
  /**
   * Constructs a no op call for the no_op()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static noOp(params: CallParams<InnerFeeContractArgs['obj']['no_op()void'] | InnerFeeContractArgs['tuple']['no_op()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'no_op()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the send_x_inners_with_fees(uint64,uint64[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendXInnersWithFees(params: CallParams<InnerFeeContractArgs['obj']['send_x_inners_with_fees(uint64,uint64[])void'] | InnerFeeContractArgs['tuple']['send_x_inners_with_fees(uint64,uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'send_x_inners_with_fees(uint64,uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId, params.args.fees],
    }
  }
  /**
   * Constructs a no op call for the send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendInnersWithFees(params: CallParams<InnerFeeContractArgs['obj']['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void'] | InnerFeeContractArgs['tuple']['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId_1, params.args.appId_2, params.args.fees],
    }
  }
  /**
   * Constructs a no op call for the send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendInnersWithFees_2(params: CallParams<InnerFeeContractArgs['obj']['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void'] | InnerFeeContractArgs['tuple']['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId_1, params.args.appId_2, params.args.fees],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the InnerFeeContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class InnerFeeContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `InnerFeeContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new InnerFeeContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new InnerFeeContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the InnerFeeContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: InnerFeeContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new InnerFeeContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the InnerFeeContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the InnerFeeContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the InnerFeeContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new InnerFeeContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the InnerFeeContract smart contract
 */
export class InnerFeeContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `InnerFeeContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the InnerFeeContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `InnerFeeContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends InnerFeeContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `InnerFeeContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<InnerFeeContractClient> {
    return new InnerFeeContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `InnerFeeContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<InnerFeeContractClient> {
    return new InnerFeeContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the InnerFeeContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `burn_ops(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnOps: (params: CallParams<InnerFeeContractArgs['obj']['burn_ops(uint64)void'] | InnerFeeContractArgs['tuple']['burn_ops(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerFeeContractParamsFactory.burnOps(params))
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `burn_ops_readonly(uint64)void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnOpsReadonly: (params: CallParams<InnerFeeContractArgs['obj']['burn_ops_readonly(uint64)void'] | InnerFeeContractArgs['tuple']['burn_ops_readonly(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerFeeContractParamsFactory.burnOpsReadonly(params))
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `no_op()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    noOp: (params: CallParams<InnerFeeContractArgs['obj']['no_op()void'] | InnerFeeContractArgs['tuple']['no_op()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(InnerFeeContractParamsFactory.noOp(params))
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `send_x_inners_with_fees(uint64,uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendXInnersWithFees: (params: CallParams<InnerFeeContractArgs['obj']['send_x_inners_with_fees(uint64,uint64[])void'] | InnerFeeContractArgs['tuple']['send_x_inners_with_fees(uint64,uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerFeeContractParamsFactory.sendXInnersWithFees(params))
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendInnersWithFees: (params: CallParams<InnerFeeContractArgs['obj']['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void'] | InnerFeeContractArgs['tuple']['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerFeeContractParamsFactory.sendInnersWithFees(params))
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendInnersWithFees_2: (params: CallParams<InnerFeeContractArgs['obj']['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void'] | InnerFeeContractArgs['tuple']['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerFeeContractParamsFactory.sendInnersWithFees_2(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the InnerFeeContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `burn_ops(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnOps: (params: CallParams<InnerFeeContractArgs['obj']['burn_ops(uint64)void'] | InnerFeeContractArgs['tuple']['burn_ops(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerFeeContractParamsFactory.burnOps(params))
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `burn_ops_readonly(uint64)void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnOpsReadonly: (params: CallParams<InnerFeeContractArgs['obj']['burn_ops_readonly(uint64)void'] | InnerFeeContractArgs['tuple']['burn_ops_readonly(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerFeeContractParamsFactory.burnOpsReadonly(params))
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `no_op()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    noOp: (params: CallParams<InnerFeeContractArgs['obj']['no_op()void'] | InnerFeeContractArgs['tuple']['no_op()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(InnerFeeContractParamsFactory.noOp(params))
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `send_x_inners_with_fees(uint64,uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendXInnersWithFees: (params: CallParams<InnerFeeContractArgs['obj']['send_x_inners_with_fees(uint64,uint64[])void'] | InnerFeeContractArgs['tuple']['send_x_inners_with_fees(uint64,uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerFeeContractParamsFactory.sendXInnersWithFees(params))
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendInnersWithFees: (params: CallParams<InnerFeeContractArgs['obj']['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void'] | InnerFeeContractArgs['tuple']['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerFeeContractParamsFactory.sendInnersWithFees(params))
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendInnersWithFees_2: (params: CallParams<InnerFeeContractArgs['obj']['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void'] | InnerFeeContractArgs['tuple']['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerFeeContractParamsFactory.sendInnersWithFees_2(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the InnerFeeContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `burn_ops(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnOps: async (params: CallParams<InnerFeeContractArgs['obj']['burn_ops(uint64)void'] | InnerFeeContractArgs['tuple']['burn_ops(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerFeeContractParamsFactory.burnOps(params))
      return {...result, return: result.return as unknown as (undefined | InnerFeeContractReturns['burn_ops(uint64)void'])}
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `burn_ops_readonly(uint64)void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnOpsReadonly: async (params: CallParams<InnerFeeContractArgs['obj']['burn_ops_readonly(uint64)void'] | InnerFeeContractArgs['tuple']['burn_ops_readonly(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerFeeContractParamsFactory.burnOpsReadonly(params))
      return {...result, return: result.return as unknown as (undefined | InnerFeeContractReturns['burn_ops_readonly(uint64)void'])}
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `no_op()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    noOp: async (params: CallParams<InnerFeeContractArgs['obj']['no_op()void'] | InnerFeeContractArgs['tuple']['no_op()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(InnerFeeContractParamsFactory.noOp(params))
      return {...result, return: result.return as unknown as (undefined | InnerFeeContractReturns['no_op()void'])}
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `send_x_inners_with_fees(uint64,uint64[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendXInnersWithFees: async (params: CallParams<InnerFeeContractArgs['obj']['send_x_inners_with_fees(uint64,uint64[])void'] | InnerFeeContractArgs['tuple']['send_x_inners_with_fees(uint64,uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerFeeContractParamsFactory.sendXInnersWithFees(params))
      return {...result, return: result.return as unknown as (undefined | InnerFeeContractReturns['send_x_inners_with_fees(uint64,uint64[])void'])}
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendInnersWithFees: async (params: CallParams<InnerFeeContractArgs['obj']['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void'] | InnerFeeContractArgs['tuple']['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerFeeContractParamsFactory.sendInnersWithFees(params))
      return {...result, return: result.return as unknown as (undefined | InnerFeeContractReturns['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void'])}
    },

    /**
     * Makes a call to the InnerFeeContract smart contract using the `send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendInnersWithFees_2: async (params: CallParams<InnerFeeContractArgs['obj']['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void'] | InnerFeeContractArgs['tuple']['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerFeeContractParamsFactory.sendInnersWithFees_2(params))
      return {...result, return: result.return as unknown as (undefined | InnerFeeContractReturns['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new InnerFeeContractClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the InnerFeeContract smart contract using the `burn_ops_readonly(uint64)void` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async burnOpsReadonly(params: CallParams<InnerFeeContractArgs['obj']['burn_ops_readonly(uint64)void'] | InnerFeeContractArgs['tuple']['burn_ops_readonly(uint64)void']>) {
    const result = await this.appClient.send.call(InnerFeeContractParamsFactory.burnOpsReadonly(params))
    return result.return as unknown as InnerFeeContractReturns['burn_ops_readonly(uint64)void']
  }

  /**
   * Methods to access state for the current InnerFeeContract app
   */
  state = {
  }

  public newGroup(): InnerFeeContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a burn_ops(uint64)void method call against the InnerFeeContract contract
       */
      burnOps(params: CallParams<InnerFeeContractArgs['obj']['burn_ops(uint64)void'] | InnerFeeContractArgs['tuple']['burn_ops(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnOps(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burn_ops_readonly(uint64)void method call against the InnerFeeContract contract
       */
      burnOpsReadonly(params: CallParams<InnerFeeContractArgs['obj']['burn_ops_readonly(uint64)void'] | InnerFeeContractArgs['tuple']['burn_ops_readonly(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnOpsReadonly(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a no_op()void method call against the InnerFeeContract contract
       */
      noOp(params: CallParams<InnerFeeContractArgs['obj']['no_op()void'] | InnerFeeContractArgs['tuple']['no_op()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.noOp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a send_x_inners_with_fees(uint64,uint64[])void method call against the InnerFeeContract contract
       */
      sendXInnersWithFees(params: CallParams<InnerFeeContractArgs['obj']['send_x_inners_with_fees(uint64,uint64[])void'] | InnerFeeContractArgs['tuple']['send_x_inners_with_fees(uint64,uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendXInnersWithFees(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void method call against the InnerFeeContract contract
       */
      sendInnersWithFees(params: CallParams<InnerFeeContractArgs['obj']['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void'] | InnerFeeContractArgs['tuple']['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendInnersWithFees(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void method call against the InnerFeeContract contract
       */
      sendInnersWithFees_2(params: CallParams<InnerFeeContractArgs['obj']['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void'] | InnerFeeContractArgs['tuple']['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendInnersWithFees_2(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the InnerFeeContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as InnerFeeContractComposer
  }
}
export type InnerFeeContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the burn_ops(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnOps(params?: CallParams<InnerFeeContractArgs['obj']['burn_ops(uint64)void'] | InnerFeeContractArgs['tuple']['burn_ops(uint64)void']>): InnerFeeContractComposer<[...TReturns, InnerFeeContractReturns['burn_ops(uint64)void'] | undefined]>

  /**
   * Calls the burn_ops_readonly(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnOpsReadonly(params?: CallParams<InnerFeeContractArgs['obj']['burn_ops_readonly(uint64)void'] | InnerFeeContractArgs['tuple']['burn_ops_readonly(uint64)void']>): InnerFeeContractComposer<[...TReturns, InnerFeeContractReturns['burn_ops_readonly(uint64)void'] | undefined]>

  /**
   * Calls the no_op()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  noOp(params?: CallParams<InnerFeeContractArgs['obj']['no_op()void'] | InnerFeeContractArgs['tuple']['no_op()void']>): InnerFeeContractComposer<[...TReturns, InnerFeeContractReturns['no_op()void'] | undefined]>

  /**
   * Calls the send_x_inners_with_fees(uint64,uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendXInnersWithFees(params?: CallParams<InnerFeeContractArgs['obj']['send_x_inners_with_fees(uint64,uint64[])void'] | InnerFeeContractArgs['tuple']['send_x_inners_with_fees(uint64,uint64[])void']>): InnerFeeContractComposer<[...TReturns, InnerFeeContractReturns['send_x_inners_with_fees(uint64,uint64[])void'] | undefined]>

  /**
   * Calls the send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendInnersWithFees(params?: CallParams<InnerFeeContractArgs['obj']['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void'] | InnerFeeContractArgs['tuple']['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void']>): InnerFeeContractComposer<[...TReturns, InnerFeeContractReturns['send_inners_with_fees(uint64,uint64,(uint64,uint64,uint64,uint64,uint64[]))void'] | undefined]>

  /**
   * Calls the send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendInnersWithFees_2(params?: CallParams<InnerFeeContractArgs['obj']['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void'] | InnerFeeContractArgs['tuple']['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void']>): InnerFeeContractComposer<[...TReturns, InnerFeeContractReturns['send_inners_with_fees_2(uint64,uint64,(uint64,uint64,uint64[],uint64,uint64,uint64[]))void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the InnerFeeContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): InnerFeeContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): InnerFeeContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<InnerFeeContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<InnerFeeContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<InnerFeeContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<InnerFeeContractComposerResults<TReturns>>
}
export type InnerFeeContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

