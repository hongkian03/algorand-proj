{
    "name": "GetMoney",
    "structs": {},
    "methods": [
        {
            "name": "init",
            "args": [
                {
                    "type": "byte[]",
                    "name": "oracle_pubkey"
                },
                {
                    "type": "uint64",
                    "name": "usdt_asset_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_oracle",
            "args": [
                {
                    "type": "byte[]",
                    "name": "new_key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_asset",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sweep",
            "args": [
                {
                    "type": "account",
                    "name": "receiver"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "release_simple",
            "args": [
                {
                    "type": "account",
                    "name": "recipient"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "opt_in_asset",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW4="
                },
                "oracle_pk": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "b3JhY2xlX3Br"
                },
                "asset_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRfaWQ="
                },
                "paused": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGF1c2Vk"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        92,
                        104,
                        126,
                        144,
                        160,
                        178
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        182
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        95,
                        107,
                        129,
                        147,
                        163
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        232,
                        248,
                        264,
                        301,
                        332
                    ],
                    "errorMessage": "check self.admin exists"
                },
                {
                    "pc": [
                        270,
                        307,
                        338
                    ],
                    "errorMessage": "check self.asset_id exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAAEEJgMFYWRtaW4IYXNzZXRfaWQJb3JhY2xlX3BrMRtBADGCBgTdtxgcBHLiuLcEcJuAqASIdzPDBKFNxBYEA01PejYaAI4GAFgARgA2ACQADgACIkMxGRREMRhEiADkI0MxGRREMRhENhoBF8AcNhoCF4gArCNDMRkURDEYRDYaARfAHIgAdSNDMRkURDEYRDYaAReIAFUjQzEZFEQxGEQ2GgFXAgCIADMjQzEZFEQxGBRENhoBVwIANhoCF4gAAiNDigIAKDEAZyqL/mcpi/9ngAZwYXVzZWQiZ4mKAQAxACIoZUQSRCqL/2eJigEAMQAiKGVEEkQpi/9niYoBADEAIihlRBJEIillRLGL/7IUi/+yFSKyErIRJLIQIrIBs4mKAgAxACIoZUQSRCIpZUSxi/6yFIv/shKyESSyECKyAbOJMQAiKGVEEkQiKWVEsTIKshQishKyESSyECKyAbOJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}